{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/404.html ","path":"404.html ","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/uploads/wechat-reward-image.JPG","path":"uploads/wechat-reward-image.JPG","modified":1,"renderable":0},{"_id":"themes/next/source/404.html ","path":"404.html ","modified":1,"renderable":1},{"_id":"source/uploads/avatar-hus.jpg","path":"uploads/avatar-hus.jpg","modified":1,"renderable":0},{"_id":"source/uploads/blog/1-1.jpg","path":"uploads/blog/1-1.jpg","modified":1,"renderable":0},{"_id":"source/uploads/alipay-reward-image.JPG","path":"uploads/alipay-reward-image.JPG","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html ","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1469596923000},{"_id":"source/.DS_Store","hash":"3acbdf911e073e028b3694683d119fa6ead8314d","modified":1490683249000},{"_id":"source/favicon.ico","hash":"90e0a835fb17fd570cd65624c1b2a2083a762e0a","modified":1467614925000},{"_id":"themes/next/.DS_Store","hash":"d4f69433c4a84fe121ef3f40c429730b014a0e54","modified":1469529067000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1469525114000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1469525114000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1469525114000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1469525114000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1469525114000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1469525114000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1469525114000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1469525114000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1469525114000},{"_id":"themes/next/_config.yml","hash":"55521c461b86587cac5e031da0a9084599e57160","modified":1470738789000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1469525114000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1469525114000},{"_id":"source/about/index.md","hash":"a1398d933ad493bf5e320b8149b63e0d903ff6c5","modified":1469600418000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1476281845000},{"_id":"source/_posts/Swift3-迁移小结.md","hash":"a756ca5d7135b7dc4b5573f058115de5880ae1f1","modified":1476281241000},{"_id":"source/_posts/Swift使用Xib自定义View和Cell.md","hash":"79f9c16af208650709496760125210bf9c01588e","modified":1476281872000},{"_id":"source/_posts/Swift模拟登陆小结.md","hash":"e01037fbef0afd2b1f01049025d790d9e9064be6","modified":1476281923000},{"_id":"source/_posts/iOS-webApp客户端开发小记.md","hash":"8e89f0918fbeeee26b3fcfd3791842dd2a2d1fa0","modified":1470731986000},{"_id":"source/_posts/iOS10-Today-Extension-开发小结.md","hash":"0a39f92cefd385db3714a382066c712503f65153","modified":1483011888000},{"_id":"source/_posts/iOS9-Swift2-Xcode7的APNS使用.md","hash":"d85a5064be04a3077a801c1ffe40ec57d2297e42","modified":1476281978000},{"_id":"source/_posts/一个UITextView的小Bug.md","hash":"baae8ee43436a208092e0fb7f7ecdaa24800e73d","modified":1476281938000},{"_id":"source/_posts/使用Alamofire实现GB2312编码的网络请求.md","hash":"3393f0a331f8d9653007e11b276a5cdc2eb271d5","modified":1476281960000},{"_id":"source/_posts/博文的开始.md","hash":"9133993f816ef944acd112dad0a10db91bfe5d42","modified":1470731897000},{"_id":"source/_posts/阿里百川、友盟推送SDK集成.md","hash":"092d1e23f5cc5fd2d45f8a33c3a0a5dd833e6245","modified":1470731965000},{"_id":"source/_posts/阿里百川即时通讯功能-iOS开发.md","hash":"ffafbcf2a8f0e05af0ca2052e781cc20ca2cdd31","modified":1470731980000},{"_id":"source/_posts/阿里百川用户反馈Swift开发小结.md","hash":"b5431835f785ddcf0413bbbad6324812883e37e1","modified":1483020425000},{"_id":"source/categories/index.md","hash":"b54fdd283d9f13cf7309d9b0143ffa5a7a9ab7d7","modified":1469597570000},{"_id":"source/commonweal/index.md","hash":"ff0ce9bdc704b5fe12fa8908d833bde00387588a","modified":1469598296000},{"_id":"source/tags/index.md","hash":"5312d0e4ebfbc4cca074097286aed06c9dca1cca","modified":1469597500000},{"_id":"source/uploads/.DS_Store","hash":"df87bf4cc95bd89fa718d31e6fad2a42c628d774","modified":1483017924000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1469525114000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1469525114000},{"_id":"source/uploads/wechat-reward-image.JPG","hash":"4f866f779c4d6023e2ca7631287ace3f46d3acdc","modified":1469536836000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1469525114000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1469525114000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1469525114000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1469525114000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1469525114000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1469525114000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1469525114000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1469525114000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1469525114000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1469525114000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1469525114000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1469525114000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1469525114000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1469525114000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1469525114000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1469525114000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1469525114000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1469525114000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1469525114000},{"_id":"themes/next/source/404.html ","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1469596784000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1469525114000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469525114000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469525114000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469525114000},{"_id":"source/uploads/avatar-hus.jpg","hash":"3f3de33d4dc05b0ba06c52df1f923adfda522079","modified":1465831066000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"source/uploads/blog/1-1.jpg","hash":"882193a082e7000bb6049a510a98a956d3a42a98","modified":1470726094000},{"_id":"source/uploads/alipay-reward-image.JPG","hash":"3a31d1d7798ab1183910ddc117e71794bf6792bc","modified":1469536837000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1469525114000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1469525114000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1469525114000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1469525114000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1469525114000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1469525114000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469525114000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469525114000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1469525114000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1469525114000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1469525114000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fec8e1acdc32508082c8db344df9a5f061f943c7","modified":1469583809000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1469525114000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469525114000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1469525114000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1469525114000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469525114000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469525114000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469525114000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469525114000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469525114000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469525114000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469525114000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469525114000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469525114000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469525114000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469525114000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469525114000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469525114000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469525114000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469525114000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1469525114000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469525114000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469525114000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469525114000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1469525114000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469525114000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1469525114000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469525114000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469525114000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1469525114000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1469525114000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469525114000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1469525114000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1469525114000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469525114000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469525114000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1469525114000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1469525114000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1469525114000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469525114000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469525114000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469525114000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469525114000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469525114000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469525114000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1469525114000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469525114000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1469525114000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1469525114000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469525114000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1469525114000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1469525114000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469525114000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469525114000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469525114000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1469525114000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1469525114000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1469525114000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469525114000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469525114000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1469525114000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1469525114000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469525114000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469525114000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469525114000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469525114000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469525114000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469525114000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1469525114000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469525114000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469525114000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469525114000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469525114000}],"Category":[{"name":"开发","_id":"cj1m7t9bc0005hnh1arw1xpkk"},{"name":"iOS","parent":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9bv000ihnh1buy835kr"},{"name":"总结","_id":"cj1m7t9c9001lhnh1dq5k21q1"}],"Data":[],"Page":[{"title":"关于","date":"2016-07-27T05:24:18.000Z","comments":0,"_content":"<p style=\"text-align:center\"> 物联网工程本科，计算机控制方向硕士在读 </p>\n\n<p style=\"text-align:center\"> 对物联网相关技术有着浓厚兴趣，具有实现想法的学习动力和软硬件开发能力</p>\n\n<p style=\"text-align:center\">目前 某风TV iOS 开发实习</p>\n\n<p style=\"text-align:center\">iOS、Arduino、Python、MongoDB爱好者</p>\n\n<p style=\"text-align:center\">乐于接受新玩意儿、新知识、新技术</p>\n\n<p style=\"text-align:center\">热爱技术、热爱生活、热爱团队合作</p>\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-07-27 13:24:18\ncomments: false\n---\n<p style=\"text-align:center\"> 物联网工程本科，计算机控制方向硕士在读 </p>\n\n<p style=\"text-align:center\"> 对物联网相关技术有着浓厚兴趣，具有实现想法的学习动力和软硬件开发能力</p>\n\n<p style=\"text-align:center\">目前 某风TV iOS 开发实习</p>\n\n<p style=\"text-align:center\">iOS、Arduino、Python、MongoDB爱好者</p>\n\n<p style=\"text-align:center\">乐于接受新玩意儿、新知识、新技术</p>\n\n<p style=\"text-align:center\">热爱技术、热爱生活、热爱团队合作</p>\n\n","updated":"2016-07-27T06:20:18.000Z","path":"about/index.html","layout":"page","_id":"cj1m7t9b10000hnh1efy0qz8p","content":"<p style=\"text-align:center\"> 物联网工程本科，计算机控制方向硕士在读 </p>\n\n<p style=\"text-align:center\"> 对物联网相关技术有着浓厚兴趣，具有实现想法的学习动力和软硬件开发能力</p>\n\n<p style=\"text-align:center\">目前 某风TV iOS 开发实习</p>\n\n<p style=\"text-align:center\">iOS、Arduino、Python、MongoDB爱好者</p>\n\n<p style=\"text-align:center\">乐于接受新玩意儿、新知识、新技术</p>\n\n<p style=\"text-align:center\">热爱技术、热爱生活、热爱团队合作</p>\n\n","excerpt":"","more":"<p style=\"text-align:center\"> 物联网工程本科，计算机控制方向硕士在读 </p>\n\n<p style=\"text-align:center\"> 对物联网相关技术有着浓厚兴趣，具有实现想法的学习动力和软硬件开发能力</p>\n\n<p style=\"text-align:center\">目前 某风TV iOS 开发实习</p>\n\n<p style=\"text-align:center\">iOS、Arduino、Python、MongoDB爱好者</p>\n\n<p style=\"text-align:center\">乐于接受新玩意儿、新知识、新技术</p>\n\n<p style=\"text-align:center\">热爱技术、热爱生活、热爱团队合作</p>\n\n"},{"title":"分类","date":"2016-07-27T05:29:11.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-27 13:29:11\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-07-27T05:32:50.000Z","path":"categories/index.html","layout":"page","_id":"cj1m7t9b70002hnh1e3da9esv","content":"","excerpt":"","more":""},{"title":"commonweal","date":"2016-07-27T05:25:49.000Z","type":"commonweal","comments":0,"_content":"","source":"commonweal/index.md","raw":"---\ntitle: commonweal\ndate: 2016-07-27 13:25:49\ntype: \"commonweal\"\ncomments: false\n---\n","updated":"2016-07-27T05:44:56.000Z","path":"commonweal/index.html","layout":"page","_id":"cj1m7t9bd0006hnh1qv6hie6v","content":"","excerpt":"","more":""},{"title":"All tags","date":"2016-07-27T05:27:12.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-07-27 13:27:12\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-07-27T05:31:40.000Z","path":"tags/index.html","layout":"page","_id":"cj1m7t9gc003ghnh1l118cnrl","content":"","excerpt":"","more":""}],"Post":[{"title":"Swift3 迁移小结","date":"2016-10-08T14:56:05.000Z","_content":"## 背景\n\n9.15号中秋节那天发布了[师大助手App](https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&ls=1&mt=8)，后来有次在 Yosemite OS 下更新到 Xcode8 ，打开后项目一片红，当时只是想修复一下 bug，还没想要迁移到 Swift3，于是默默的 重新装了 Xcode7，又继续愉快的改bug了，然后9月20号提交到商店更新也没问题。21号提示 Sierra 可以更新了，于是手贱更新了一波。然后悲剧就开始了。\n更新完 Sierra 后，我添加了Widgets功能，于是准备上传到商店，然后就是 一直传不上去。试了一下几个方法：\n\n1. Xcode7 打包，Xcode8 上传\n2. Xcode7 打包，在 Sierra 下用 Application Loader 上传\n3. Xcode7 打包，在同学 Yosemite 下用 Application Loader 上传\n\n结果以上都不行，一直卡在验证那里，于是我就一狠心，说用 Xcode8 ，做一下 Swift3 迁移😂，开启了升级打怪之旅\n\n## 步骤\n\n### 自动代码 Convert\n\n在这里，我只 Convert 自己写的代码，事实证明是明智的，因为第三方库自己都做了适配，不需要我们来进行 Convert，这一步做完，自己的代码大致上没什么问题了，主要错误都集中在第三方库的接口调用上\n\n### 第三方库 Update\n\n我有个习惯，就是 update 之前喜欢先去项目主页看一下，看看有没有什么坑。\n\n#### CocoaPods \n\n1. 卸载已有的 CocoaPods (非必须)\n``` swift \n$ which pod\n/usr/local/bin/pod\n$ sudo rm -rf /usr/local/bin/pod\n```\n2. 安装支持 Xcode8 的 CocoaPods\n``` swift\nsudo gem install cocoapods --pre\n```\n更新完 CocoaPods 还有更新本地库，就不说了。\n\n#### Alamofire\n\n去官网看了一下，真是坑爹，Alamofire 4.0 变化好大，接口都按照 Swift3 重新弄了，二话不说，先更新一下。\n``` swift\npod 'Alamofire', '~> 4.0'\n```\n基本的代码更新看[官方文档](https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%204.0%20Migration%20Guide.md)就差不多了。下面写几个官方文档没有提到的：\n\n##### 配置https证书\n``` swift\nfunc configureAlamofireManager() {\n   let manager = SessionManager.default\n   manager.delegate.sessionDidReceiveChallenge = { session, challenge in\n       var disposition: URLSession.AuthChallengeDisposition = .performDefaultHandling\n       var credential: URLCredential?\n       \n       if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust {\n           disposition = URLSession.AuthChallengeDisposition.useCredential\n           credential = URLCredential(trust: challenge.protectionSpace.serverTrust!)\n       } else {\n           if challenge.previousFailureCount > 0 {\n               disposition = .cancelAuthenticationChallenge\n           } else {\n               credential = manager.session.configuration.urlCredentialStorage?.defaultCredential(for: challenge.protectionSpace)\n               \n               if credential != nil {\n                   disposition = .useCredential\n               }\n           }\n       }\n       return (disposition, credential)\n   }\n}\n```\n\n##### 自定义Request请求\n\n``` Swift\nlet urlRequest = urlRequestWithComponents(SchoolNetWorkBaseURL, parameters: parameters)\nAlamofire.upload(urlRequest.1, with: urlRequest.0).response {\n    response in\n        \n    let htmlString:String = NSString(data: response.data!, encoding: GB2312Encoding)! as String\n    print(htmlString)\n}\n\nfileprivate func urlRequestWithComponents(_ urlString:String,parameters:[String: AnyObject]) -> (URLRequestConvertible,Data) {\n        \n   // create  url request to send\n   var mutableURLRequest = URLRequest(url: URL(string: urlString)!)\n   mutableURLRequest.httpMethod = HTTPMethod.post.rawValue\n   let contentType = \"application/x-www-form-urlencoded\"\n   mutableURLRequest.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n   mutableURLRequest.setValue(\"****\", forHTTPHeaderField: \"Referer\")\n   \n   // add parameters\n   var uploadData = Data()\n   for (key,value) in parameters {\n       uploadData.append(\"\\(key)=\\(value)&\".data(using: String.Encoding(rawValue: GB2312Encoding))!)\n   }\n   \n   return (try! URLEncoding.default.encode(mutableURLRequest, with: nil),uploadData)\n}\n```\n\n#### Eureka\n\nEureka 在新版本中删除了 ImageRow，我之前代码有一处无法调用，后来提了个[issue](https://github.com/xmartlabs/Eureka/issues/688)，问了作者。\n![Issue](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Swift3_1.png)\n由于在 iOS10 中，app 需要对相册和相机的使用进行权限申明，不然会闪退，未避免其他 app 闪退，就删了 imageRow，作者也给了解决方法，按照他给方法，本地添加 imageRow 就可继续使用了，或者自己实现CustomRow，准备过段时间试一下自定义 CustomRow。\n\n#### Kanna\n\n项目中需要解析 html ，一直用的 Kanna，在 swift3 中，原来的`doc.xpath(\"//table/tr\").count`变成了 `doc.xpath(\"//table/tr\").nodeSet.count`。\n\n\n","source":"_posts/Swift3-迁移小结.md","raw":"---\ntitle: Swift3 迁移小结\ndate: 2016-10-8 22:56:05\ntags: \n- Swift 3.x\n- Alamofire 4.x\n- Kanna 2.x\n- Eureka 2.x\ncategories:\n- 开发\n- iOS\n---\n## 背景\n\n9.15号中秋节那天发布了[师大助手App](https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&ls=1&mt=8)，后来有次在 Yosemite OS 下更新到 Xcode8 ，打开后项目一片红，当时只是想修复一下 bug，还没想要迁移到 Swift3，于是默默的 重新装了 Xcode7，又继续愉快的改bug了，然后9月20号提交到商店更新也没问题。21号提示 Sierra 可以更新了，于是手贱更新了一波。然后悲剧就开始了。\n更新完 Sierra 后，我添加了Widgets功能，于是准备上传到商店，然后就是 一直传不上去。试了一下几个方法：\n\n1. Xcode7 打包，Xcode8 上传\n2. Xcode7 打包，在 Sierra 下用 Application Loader 上传\n3. Xcode7 打包，在同学 Yosemite 下用 Application Loader 上传\n\n结果以上都不行，一直卡在验证那里，于是我就一狠心，说用 Xcode8 ，做一下 Swift3 迁移😂，开启了升级打怪之旅\n\n## 步骤\n\n### 自动代码 Convert\n\n在这里，我只 Convert 自己写的代码，事实证明是明智的，因为第三方库自己都做了适配，不需要我们来进行 Convert，这一步做完，自己的代码大致上没什么问题了，主要错误都集中在第三方库的接口调用上\n\n### 第三方库 Update\n\n我有个习惯，就是 update 之前喜欢先去项目主页看一下，看看有没有什么坑。\n\n#### CocoaPods \n\n1. 卸载已有的 CocoaPods (非必须)\n``` swift \n$ which pod\n/usr/local/bin/pod\n$ sudo rm -rf /usr/local/bin/pod\n```\n2. 安装支持 Xcode8 的 CocoaPods\n``` swift\nsudo gem install cocoapods --pre\n```\n更新完 CocoaPods 还有更新本地库，就不说了。\n\n#### Alamofire\n\n去官网看了一下，真是坑爹，Alamofire 4.0 变化好大，接口都按照 Swift3 重新弄了，二话不说，先更新一下。\n``` swift\npod 'Alamofire', '~> 4.0'\n```\n基本的代码更新看[官方文档](https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%204.0%20Migration%20Guide.md)就差不多了。下面写几个官方文档没有提到的：\n\n##### 配置https证书\n``` swift\nfunc configureAlamofireManager() {\n   let manager = SessionManager.default\n   manager.delegate.sessionDidReceiveChallenge = { session, challenge in\n       var disposition: URLSession.AuthChallengeDisposition = .performDefaultHandling\n       var credential: URLCredential?\n       \n       if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust {\n           disposition = URLSession.AuthChallengeDisposition.useCredential\n           credential = URLCredential(trust: challenge.protectionSpace.serverTrust!)\n       } else {\n           if challenge.previousFailureCount > 0 {\n               disposition = .cancelAuthenticationChallenge\n           } else {\n               credential = manager.session.configuration.urlCredentialStorage?.defaultCredential(for: challenge.protectionSpace)\n               \n               if credential != nil {\n                   disposition = .useCredential\n               }\n           }\n       }\n       return (disposition, credential)\n   }\n}\n```\n\n##### 自定义Request请求\n\n``` Swift\nlet urlRequest = urlRequestWithComponents(SchoolNetWorkBaseURL, parameters: parameters)\nAlamofire.upload(urlRequest.1, with: urlRequest.0).response {\n    response in\n        \n    let htmlString:String = NSString(data: response.data!, encoding: GB2312Encoding)! as String\n    print(htmlString)\n}\n\nfileprivate func urlRequestWithComponents(_ urlString:String,parameters:[String: AnyObject]) -> (URLRequestConvertible,Data) {\n        \n   // create  url request to send\n   var mutableURLRequest = URLRequest(url: URL(string: urlString)!)\n   mutableURLRequest.httpMethod = HTTPMethod.post.rawValue\n   let contentType = \"application/x-www-form-urlencoded\"\n   mutableURLRequest.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n   mutableURLRequest.setValue(\"****\", forHTTPHeaderField: \"Referer\")\n   \n   // add parameters\n   var uploadData = Data()\n   for (key,value) in parameters {\n       uploadData.append(\"\\(key)=\\(value)&\".data(using: String.Encoding(rawValue: GB2312Encoding))!)\n   }\n   \n   return (try! URLEncoding.default.encode(mutableURLRequest, with: nil),uploadData)\n}\n```\n\n#### Eureka\n\nEureka 在新版本中删除了 ImageRow，我之前代码有一处无法调用，后来提了个[issue](https://github.com/xmartlabs/Eureka/issues/688)，问了作者。\n![Issue](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Swift3_1.png)\n由于在 iOS10 中，app 需要对相册和相机的使用进行权限申明，不然会闪退，未避免其他 app 闪退，就删了 imageRow，作者也给了解决方法，按照他给方法，本地添加 imageRow 就可继续使用了，或者自己实现CustomRow，准备过段时间试一下自定义 CustomRow。\n\n#### Kanna\n\n项目中需要解析 html ，一直用的 Kanna，在 swift3 中，原来的`doc.xpath(\"//table/tr\").count`变成了 `doc.xpath(\"//table/tr\").nodeSet.count`。\n\n\n","slug":"Swift3-迁移小结","published":1,"updated":"2016-10-12T14:07:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9b30001hnh1x84eihk2","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>9.15号中秋节那天发布了<a href=\"https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&amp;ls=1&amp;mt=8\" target=\"_blank\" rel=\"external\">师大助手App</a>，后来有次在 Yosemite OS 下更新到 Xcode8 ，打开后项目一片红，当时只是想修复一下 bug，还没想要迁移到 Swift3，于是默默的 重新装了 Xcode7，又继续愉快的改bug了，然后9月20号提交到商店更新也没问题。21号提示 Sierra 可以更新了，于是手贱更新了一波。然后悲剧就开始了。<br>更新完 Sierra 后，我添加了Widgets功能，于是准备上传到商店，然后就是 一直传不上去。试了一下几个方法：</p>\n<ol>\n<li>Xcode7 打包，Xcode8 上传</li>\n<li>Xcode7 打包，在 Sierra 下用 Application Loader 上传</li>\n<li>Xcode7 打包，在同学 Yosemite 下用 Application Loader 上传</li>\n</ol>\n<p>结果以上都不行，一直卡在验证那里，于是我就一狠心，说用 Xcode8 ，做一下 Swift3 迁移😂，开启了升级打怪之旅</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"自动代码-Convert\"><a href=\"#自动代码-Convert\" class=\"headerlink\" title=\"自动代码 Convert\"></a>自动代码 Convert</h3><p>在这里，我只 Convert 自己写的代码，事实证明是明智的，因为第三方库自己都做了适配，不需要我们来进行 Convert，这一步做完，自己的代码大致上没什么问题了，主要错误都集中在第三方库的接口调用上</p>\n<h3 id=\"第三方库-Update\"><a href=\"#第三方库-Update\" class=\"headerlink\" title=\"第三方库 Update\"></a>第三方库 Update</h3><p>我有个习惯，就是 update 之前喜欢先去项目主页看一下，看看有没有什么坑。</p>\n<h4 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h4><ol>\n<li><p>卸载已有的 CocoaPods (非必须)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ which pod</div><div class=\"line\">/usr/local/bin/pod</div><div class=\"line\">$ sudo rm -rf /usr/local/bin/pod</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装支持 Xcode8 的 CocoaPods</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>更新完 CocoaPods 还有更新本地库，就不说了。</p>\n<h4 id=\"Alamofire\"><a href=\"#Alamofire\" class=\"headerlink\" title=\"Alamofire\"></a>Alamofire</h4><p>去官网看了一下，真是坑爹，Alamofire 4.0 变化好大，接口都按照 Swift3 重新弄了，二话不说，先更新一下。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod '<span class=\"type\">Alamofire'</span>, '~&gt; <span class=\"number\">4.0</span>'</div></pre></td></tr></table></figure></p>\n<p>基本的代码更新看<a href=\"https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%204.0%20Migration%20Guide.md\" target=\"_blank\" rel=\"external\">官方文档</a>就差不多了。下面写几个官方文档没有提到的：</p>\n<h5 id=\"配置https证书\"><a href=\"#配置https证书\" class=\"headerlink\" title=\"配置https证书\"></a>配置https证书</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configureAlamofireManager</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> manager = <span class=\"type\">SessionManager</span>.<span class=\"keyword\">default</span></div><div class=\"line\">   manager.delegate.sessionDidReceiveChallenge = &#123; session, challenge <span class=\"keyword\">in</span></div><div class=\"line\">       <span class=\"keyword\">var</span> disposition: <span class=\"type\">URLSession</span>.<span class=\"type\">AuthChallengeDisposition</span> = .performDefaultHandling</div><div class=\"line\">       <span class=\"keyword\">var</span> credential: <span class=\"type\">URLCredential</span>?</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> challenge.protectionSpace.authenticationMethod == <span class=\"type\">NSURLAuthenticationMethodServerTrust</span> &#123;</div><div class=\"line\">           disposition = <span class=\"type\">URLSession</span>.<span class=\"type\">AuthChallengeDisposition</span>.useCredential</div><div class=\"line\">           credential = <span class=\"type\">URLCredential</span>(trust: challenge.protectionSpace.serverTrust!)</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> challenge.previousFailureCount &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">               disposition = .cancelAuthenticationChallenge</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               credential = manager.session.configuration.urlCredentialStorage?.defaultCredential(<span class=\"keyword\">for</span>: challenge.protectionSpace)</div><div class=\"line\">               </div><div class=\"line\">               <span class=\"keyword\">if</span> credential != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                   disposition = .useCredential</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (disposition, credential)</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"自定义Request请求\"><a href=\"#自定义Request请求\" class=\"headerlink\" title=\"自定义Request请求\"></a>自定义Request请求</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlRequest = urlRequestWithComponents(<span class=\"type\">SchoolNetWorkBaseURL</span>, parameters: parameters)</div><div class=\"line\"><span class=\"type\">Alamofire</span>.upload(urlRequest.<span class=\"number\">1</span>, with: urlRequest.<span class=\"number\">0</span>).response &#123;</div><div class=\"line\">    response <span class=\"keyword\">in</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">let</span> htmlString:<span class=\"type\">String</span> = <span class=\"type\">NSString</span>(data: response.data!, encoding: <span class=\"type\">GB2312Encoding</span>)! <span class=\"keyword\">as</span> <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(htmlString)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fileprivate <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlRequestWithComponents</span><span class=\"params\">(<span class=\"number\">_</span> urlString:String,parameters:[String: AnyObject])</span></span> -&gt; (<span class=\"type\">URLRequestConvertible</span>,<span class=\"type\">Data</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">   <span class=\"comment\">// create  url request to send</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mutableURLRequest = <span class=\"type\">URLRequest</span>(url: <span class=\"type\">URL</span>(string: urlString)!)</div><div class=\"line\">   mutableURLRequest.httpMethod = <span class=\"type\">HTTPMethod</span>.post.rawValue</div><div class=\"line\">   <span class=\"keyword\">let</span> contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></div><div class=\"line\">   mutableURLRequest.setValue(contentType, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">   mutableURLRequest.setValue(<span class=\"string\">\"****\"</span>, forHTTPHeaderField: <span class=\"string\">\"Referer\"</span>)</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// add parameters</span></div><div class=\"line\">   <span class=\"keyword\">var</span> uploadData = <span class=\"type\">Data</span>()</div><div class=\"line\">   <span class=\"keyword\">for</span> (key,value) <span class=\"keyword\">in</span> parameters &#123;</div><div class=\"line\">       uploadData.append(<span class=\"string\">\"<span class=\"subst\">\\(key)</span>=<span class=\"subst\">\\(value)</span>&amp;\"</span>.data(using: <span class=\"type\">String</span>.<span class=\"type\">Encoding</span>(rawValue: <span class=\"type\">GB2312Encoding</span>))!)</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">return</span> (<span class=\"keyword\">try</span>! <span class=\"type\">URLEncoding</span>.<span class=\"keyword\">default</span>.encode(mutableURLRequest, with: <span class=\"literal\">nil</span>),uploadData)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a>Eureka</h4><p>Eureka 在新版本中删除了 ImageRow，我之前代码有一处无法调用，后来提了个<a href=\"https://github.com/xmartlabs/Eureka/issues/688\" target=\"_blank\" rel=\"external\">issue</a>，问了作者。<br><img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Swift3_1.png\" alt=\"Issue\"><br>由于在 iOS10 中，app 需要对相册和相机的使用进行权限申明，不然会闪退，未避免其他 app 闪退，就删了 imageRow，作者也给了解决方法，按照他给方法，本地添加 imageRow 就可继续使用了，或者自己实现CustomRow，准备过段时间试一下自定义 CustomRow。</p>\n<h4 id=\"Kanna\"><a href=\"#Kanna\" class=\"headerlink\" title=\"Kanna\"></a>Kanna</h4><p>项目中需要解析 html ，一直用的 Kanna，在 swift3 中，原来的<code>doc.xpath(&quot;//table/tr&quot;).count</code>变成了 <code>doc.xpath(&quot;//table/tr&quot;).nodeSet.count</code>。</p>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>9.15号中秋节那天发布了<a href=\"https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&amp;ls=1&amp;mt=8\">师大助手App</a>，后来有次在 Yosemite OS 下更新到 Xcode8 ，打开后项目一片红，当时只是想修复一下 bug，还没想要迁移到 Swift3，于是默默的 重新装了 Xcode7，又继续愉快的改bug了，然后9月20号提交到商店更新也没问题。21号提示 Sierra 可以更新了，于是手贱更新了一波。然后悲剧就开始了。<br>更新完 Sierra 后，我添加了Widgets功能，于是准备上传到商店，然后就是 一直传不上去。试了一下几个方法：</p>\n<ol>\n<li>Xcode7 打包，Xcode8 上传</li>\n<li>Xcode7 打包，在 Sierra 下用 Application Loader 上传</li>\n<li>Xcode7 打包，在同学 Yosemite 下用 Application Loader 上传</li>\n</ol>\n<p>结果以上都不行，一直卡在验证那里，于是我就一狠心，说用 Xcode8 ，做一下 Swift3 迁移😂，开启了升级打怪之旅</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"自动代码-Convert\"><a href=\"#自动代码-Convert\" class=\"headerlink\" title=\"自动代码 Convert\"></a>自动代码 Convert</h3><p>在这里，我只 Convert 自己写的代码，事实证明是明智的，因为第三方库自己都做了适配，不需要我们来进行 Convert，这一步做完，自己的代码大致上没什么问题了，主要错误都集中在第三方库的接口调用上</p>\n<h3 id=\"第三方库-Update\"><a href=\"#第三方库-Update\" class=\"headerlink\" title=\"第三方库 Update\"></a>第三方库 Update</h3><p>我有个习惯，就是 update 之前喜欢先去项目主页看一下，看看有没有什么坑。</p>\n<h4 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h4><ol>\n<li><p>卸载已有的 CocoaPods (非必须)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ which pod</div><div class=\"line\">/usr/local/bin/pod</div><div class=\"line\">$ sudo rm -rf /usr/local/bin/pod</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装支持 Xcode8 的 CocoaPods</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>更新完 CocoaPods 还有更新本地库，就不说了。</p>\n<h4 id=\"Alamofire\"><a href=\"#Alamofire\" class=\"headerlink\" title=\"Alamofire\"></a>Alamofire</h4><p>去官网看了一下，真是坑爹，Alamofire 4.0 变化好大，接口都按照 Swift3 重新弄了，二话不说，先更新一下。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod '<span class=\"type\">Alamofire'</span>, '~&gt; <span class=\"number\">4.0</span>'</div></pre></td></tr></table></figure></p>\n<p>基本的代码更新看<a href=\"https://github.com/Alamofire/Alamofire/blob/master/Documentation/Alamofire%204.0%20Migration%20Guide.md\">官方文档</a>就差不多了。下面写几个官方文档没有提到的：</p>\n<h5 id=\"配置https证书\"><a href=\"#配置https证书\" class=\"headerlink\" title=\"配置https证书\"></a>配置https证书</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configureAlamofireManager</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> manager = <span class=\"type\">SessionManager</span>.<span class=\"keyword\">default</span></div><div class=\"line\">   manager.delegate.sessionDidReceiveChallenge = &#123; session, challenge <span class=\"keyword\">in</span></div><div class=\"line\">       <span class=\"keyword\">var</span> disposition: <span class=\"type\">URLSession</span>.<span class=\"type\">AuthChallengeDisposition</span> = .performDefaultHandling</div><div class=\"line\">       <span class=\"keyword\">var</span> credential: <span class=\"type\">URLCredential</span>?</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> challenge.protectionSpace.authenticationMethod == <span class=\"type\">NSURLAuthenticationMethodServerTrust</span> &#123;</div><div class=\"line\">           disposition = <span class=\"type\">URLSession</span>.<span class=\"type\">AuthChallengeDisposition</span>.useCredential</div><div class=\"line\">           credential = <span class=\"type\">URLCredential</span>(trust: challenge.protectionSpace.serverTrust!)</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> challenge.previousFailureCount &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">               disposition = .cancelAuthenticationChallenge</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               credential = manager.session.configuration.urlCredentialStorage?.defaultCredential(<span class=\"keyword\">for</span>: challenge.protectionSpace)</div><div class=\"line\">               </div><div class=\"line\">               <span class=\"keyword\">if</span> credential != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                   disposition = .useCredential</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> (disposition, credential)</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"自定义Request请求\"><a href=\"#自定义Request请求\" class=\"headerlink\" title=\"自定义Request请求\"></a>自定义Request请求</h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlRequest = urlRequestWithComponents(<span class=\"type\">SchoolNetWorkBaseURL</span>, parameters: parameters)</div><div class=\"line\"><span class=\"type\">Alamofire</span>.upload(urlRequest.<span class=\"number\">1</span>, with: urlRequest.<span class=\"number\">0</span>).response &#123;</div><div class=\"line\">    response <span class=\"keyword\">in</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">let</span> htmlString:<span class=\"type\">String</span> = <span class=\"type\">NSString</span>(data: response.data!, encoding: <span class=\"type\">GB2312Encoding</span>)! <span class=\"keyword\">as</span> <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(htmlString)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fileprivate <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlRequestWithComponents</span><span class=\"params\">(<span class=\"number\">_</span> urlString:String,parameters:[String: AnyObject])</span></span> -&gt; (<span class=\"type\">URLRequestConvertible</span>,<span class=\"type\">Data</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">   <span class=\"comment\">// create  url request to send</span></div><div class=\"line\">   <span class=\"keyword\">var</span> mutableURLRequest = <span class=\"type\">URLRequest</span>(url: <span class=\"type\">URL</span>(string: urlString)!)</div><div class=\"line\">   mutableURLRequest.httpMethod = <span class=\"type\">HTTPMethod</span>.post.rawValue</div><div class=\"line\">   <span class=\"keyword\">let</span> contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></div><div class=\"line\">   mutableURLRequest.setValue(contentType, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">   mutableURLRequest.setValue(<span class=\"string\">\"****\"</span>, forHTTPHeaderField: <span class=\"string\">\"Referer\"</span>)</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// add parameters</span></div><div class=\"line\">   <span class=\"keyword\">var</span> uploadData = <span class=\"type\">Data</span>()</div><div class=\"line\">   <span class=\"keyword\">for</span> (key,value) <span class=\"keyword\">in</span> parameters &#123;</div><div class=\"line\">       uploadData.append(<span class=\"string\">\"<span class=\"subst\">\\(key)</span>=<span class=\"subst\">\\(value)</span>&amp;\"</span>.data(using: <span class=\"type\">String</span>.<span class=\"type\">Encoding</span>(rawValue: <span class=\"type\">GB2312Encoding</span>))!)</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">return</span> (<span class=\"keyword\">try</span>! <span class=\"type\">URLEncoding</span>.<span class=\"keyword\">default</span>.encode(mutableURLRequest, with: <span class=\"literal\">nil</span>),uploadData)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a>Eureka</h4><p>Eureka 在新版本中删除了 ImageRow，我之前代码有一处无法调用，后来提了个<a href=\"https://github.com/xmartlabs/Eureka/issues/688\">issue</a>，问了作者。<br><img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Swift3_1.png\" alt=\"Issue\"><br>由于在 iOS10 中，app 需要对相册和相机的使用进行权限申明，不然会闪退，未避免其他 app 闪退，就删了 imageRow，作者也给了解决方法，按照他给方法，本地添加 imageRow 就可继续使用了，或者自己实现CustomRow，准备过段时间试一下自定义 CustomRow。</p>\n<h4 id=\"Kanna\"><a href=\"#Kanna\" class=\"headerlink\" title=\"Kanna\"></a>Kanna</h4><p>项目中需要解析 html ，一直用的 Kanna，在 swift3 中，原来的<code>doc.xpath(&quot;//table/tr&quot;).count</code>变成了 <code>doc.xpath(&quot;//table/tr&quot;).nodeSet.count</code>。</p>\n"},{"title":"Swift 使用 Xib 自定义 View 和 Cell","date":"2016-08-09T09:06:52.000Z","_content":"\n# 背景\n\n原来一直使用的是Storyboard自定义`UITableViewCell`的，暑期来公司实习，发现公司用的是Xib自定义View，学长说人多用SB不好协同工作。除了这个原因，我之前还发现Storyboard的复用性不好，自定义的Cell不能在多个Storyboard文件中复用😂。\n\n下面介绍利用Xib自定义View和Cell。\n\n# 自定义Cell\n\n新建Cell文件时，勾选生成Xib文件。然后在Xib上使用控件和约束，和Storyboard一样。\n\n在使用自定义的Cell时，要记得注册可复用的Cell。例如:`collectionView.registerReusableCell(FMPersonHelpReportVCCollectionViewCell)`\n\n剩下的使用过程和用Storyboard自定义的Prototype Cell是一致的。\n\n# 自定义View\n\n新建View的时候，是无法勾选生成Xib文件的，所以需要我们自己创建同名的UIView和Xib文件。并且将 Xib文件的 File's Owner -> Custom Class -> Class 属性设为刚才新建的类。\n\n由于自定义View不能直接从View初始化，所以写了一个基类。\n\n``` swift\nclass BaseXibView: UIView {\n    \n    var view:UIView?\n    \n    //初始化方法。\n    func initFromXib(){\n        //获取Xib文件名字\n        let xibName = NSStringFromClass(self.classForCoder)\n        let xibClassName = xibName.characters.split{$0 == \".\"}.map(String.init).last\n        //使用Xib初始化一个View\n        let view = NSBundle.mainBundle().loadNibNamed(xibClassName, owner: self, options: nil).first as! UIView\n        view.frame = self.bounds\n        view.translatesAutoresizingMaskIntoConstraints = true\n        view.autoresizingMask = [.FlexibleWidth,.FlexibleHeight]\n        self.addSubview(view)\n        self.view = view\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        initFromXib()\n    }\n    \n    required init(coder aDecoder: NSCoder) {\n        super.init(coder:aDecoder)!\n        initFromXib()\n    }\n}\n\n```\n\n\n这是我写的一个自定义View，主要用来进行新手引导的，覆盖在原视图上，点击view，慢慢改变透明度。\n``` swift\nclass FMHomeNewUserGuideView: BaseXibView {\n    \n    @IBOutlet var imageView: UIImageView!\n    @IBOutlet var label: UILabel!\n    \n    var isMainView = true\n    \n    override func initFromXib() {\n        super.initFromXib()\n    }\n    \n    override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {\n        UIView.animateWithDuration(0.25, animations: { \n            self.alpha = 0\n            }) { (isComplete) in\n                self.removeSubviews()\n        }\n    }\n    \n    func setUI() {\n        \n    }\n} \n```\n\n用法：\n``` swift \nlet homeNewUserGuideView = FMHomeNewUserGuideView()\n```\n\n\n# 参考资料\n\n\n\n\n","source":"_posts/Swift使用Xib自定义View和Cell.md","raw":"---\ntitle: Swift 使用 Xib 自定义 View 和 Cell\ndate: 2016-08-09 17:06:52\ntags: \n- Swift \n- Xib\n- 自定义View\ncategories:\n- 开发\n- iOS\n---\n\n# 背景\n\n原来一直使用的是Storyboard自定义`UITableViewCell`的，暑期来公司实习，发现公司用的是Xib自定义View，学长说人多用SB不好协同工作。除了这个原因，我之前还发现Storyboard的复用性不好，自定义的Cell不能在多个Storyboard文件中复用😂。\n\n下面介绍利用Xib自定义View和Cell。\n\n# 自定义Cell\n\n新建Cell文件时，勾选生成Xib文件。然后在Xib上使用控件和约束，和Storyboard一样。\n\n在使用自定义的Cell时，要记得注册可复用的Cell。例如:`collectionView.registerReusableCell(FMPersonHelpReportVCCollectionViewCell)`\n\n剩下的使用过程和用Storyboard自定义的Prototype Cell是一致的。\n\n# 自定义View\n\n新建View的时候，是无法勾选生成Xib文件的，所以需要我们自己创建同名的UIView和Xib文件。并且将 Xib文件的 File's Owner -> Custom Class -> Class 属性设为刚才新建的类。\n\n由于自定义View不能直接从View初始化，所以写了一个基类。\n\n``` swift\nclass BaseXibView: UIView {\n    \n    var view:UIView?\n    \n    //初始化方法。\n    func initFromXib(){\n        //获取Xib文件名字\n        let xibName = NSStringFromClass(self.classForCoder)\n        let xibClassName = xibName.characters.split{$0 == \".\"}.map(String.init).last\n        //使用Xib初始化一个View\n        let view = NSBundle.mainBundle().loadNibNamed(xibClassName, owner: self, options: nil).first as! UIView\n        view.frame = self.bounds\n        view.translatesAutoresizingMaskIntoConstraints = true\n        view.autoresizingMask = [.FlexibleWidth,.FlexibleHeight]\n        self.addSubview(view)\n        self.view = view\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        initFromXib()\n    }\n    \n    required init(coder aDecoder: NSCoder) {\n        super.init(coder:aDecoder)!\n        initFromXib()\n    }\n}\n\n```\n\n\n这是我写的一个自定义View，主要用来进行新手引导的，覆盖在原视图上，点击view，慢慢改变透明度。\n``` swift\nclass FMHomeNewUserGuideView: BaseXibView {\n    \n    @IBOutlet var imageView: UIImageView!\n    @IBOutlet var label: UILabel!\n    \n    var isMainView = true\n    \n    override func initFromXib() {\n        super.initFromXib()\n    }\n    \n    override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {\n        UIView.animateWithDuration(0.25, animations: { \n            self.alpha = 0\n            }) { (isComplete) in\n                self.removeSubviews()\n        }\n    }\n    \n    func setUI() {\n        \n    }\n} \n```\n\n用法：\n``` swift \nlet homeNewUserGuideView = FMHomeNewUserGuideView()\n```\n\n\n# 参考资料\n\n\n\n\n","slug":"Swift使用Xib自定义View和Cell","published":1,"updated":"2016-10-12T14:17:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9b70003hnh1ae3ngjej","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>原来一直使用的是Storyboard自定义<code>UITableViewCell</code>的，暑期来公司实习，发现公司用的是Xib自定义View，学长说人多用SB不好协同工作。除了这个原因，我之前还发现Storyboard的复用性不好，自定义的Cell不能在多个Storyboard文件中复用😂。</p>\n<p>下面介绍利用Xib自定义View和Cell。</p>\n<h1 id=\"自定义Cell\"><a href=\"#自定义Cell\" class=\"headerlink\" title=\"自定义Cell\"></a>自定义Cell</h1><p>新建Cell文件时，勾选生成Xib文件。然后在Xib上使用控件和约束，和Storyboard一样。</p>\n<p>在使用自定义的Cell时，要记得注册可复用的Cell。例如:<code>collectionView.registerReusableCell(FMPersonHelpReportVCCollectionViewCell)</code></p>\n<p>剩下的使用过程和用Storyboard自定义的Prototype Cell是一致的。</p>\n<h1 id=\"自定义View\"><a href=\"#自定义View\" class=\"headerlink\" title=\"自定义View\"></a>自定义View</h1><p>新建View的时候，是无法勾选生成Xib文件的，所以需要我们自己创建同名的UIView和Xib文件。并且将 Xib文件的 File’s Owner -&gt; Custom Class -&gt; Class 属性设为刚才新建的类。</p>\n<p>由于自定义View不能直接从View初始化，所以写了一个基类。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseXibView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> view:<span class=\"type\">UIView</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//初始化方法。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initFromXib</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//获取Xib文件名字</span></div><div class=\"line\">        <span class=\"keyword\">let</span> xibName = <span class=\"type\">NSStringFromClass</span>(<span class=\"keyword\">self</span>.classForCoder)</div><div class=\"line\">        <span class=\"keyword\">let</span> xibClassName = xibName.characters.<span class=\"built_in\">split</span>&#123;$<span class=\"number\">0</span> == <span class=\"string\">\".\"</span>&#125;.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>).last</div><div class=\"line\">        <span class=\"comment\">//使用Xib初始化一个View</span></div><div class=\"line\">        <span class=\"keyword\">let</span> view = <span class=\"type\">NSBundle</span>.mainBundle().loadNibNamed(xibClassName, owner: <span class=\"keyword\">self</span>, options: <span class=\"literal\">nil</span>).first <span class=\"keyword\">as</span>! <span class=\"type\">UIView</span></div><div class=\"line\">        view.frame = <span class=\"keyword\">self</span>.bounds</div><div class=\"line\">        view.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">true</span></div><div class=\"line\">        view.autoresizingMask = [.<span class=\"type\">FlexibleWidth</span>,.<span class=\"type\">FlexibleHeight</span>]</div><div class=\"line\">        <span class=\"keyword\">self</span>.addSubview(view)</div><div class=\"line\">        <span class=\"keyword\">self</span>.view = view</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</div><div class=\"line\">        initFromXib()</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder:aDecoder)!</div><div class=\"line\">        initFromXib()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是我写的一个自定义View，主要用来进行新手引导的，覆盖在原视图上，点击view，慢慢改变透明度。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FMHomeNewUserGuideView</span>: <span class=\"title\">BaseXibView</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span>!</div><div class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> label: <span class=\"type\">UILabel</span>!</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> isMainView = <span class=\"literal\">true</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initFromXib</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.initFromXib()</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">touchesBegan</span><span class=\"params\">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</div><div class=\"line\">        <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123; </div><div class=\"line\">            <span class=\"keyword\">self</span>.alpha = <span class=\"number\">0</span></div><div class=\"line\">            &#125;) &#123; (isComplete) <span class=\"keyword\">in</span></div><div class=\"line\">                <span class=\"keyword\">self</span>.removeSubviews()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setUI</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用法：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> homeNewUserGuideView = <span class=\"type\">FMHomeNewUserGuideView</span>()</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1>","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>原来一直使用的是Storyboard自定义<code>UITableViewCell</code>的，暑期来公司实习，发现公司用的是Xib自定义View，学长说人多用SB不好协同工作。除了这个原因，我之前还发现Storyboard的复用性不好，自定义的Cell不能在多个Storyboard文件中复用😂。</p>\n<p>下面介绍利用Xib自定义View和Cell。</p>\n<h1 id=\"自定义Cell\"><a href=\"#自定义Cell\" class=\"headerlink\" title=\"自定义Cell\"></a>自定义Cell</h1><p>新建Cell文件时，勾选生成Xib文件。然后在Xib上使用控件和约束，和Storyboard一样。</p>\n<p>在使用自定义的Cell时，要记得注册可复用的Cell。例如:<code>collectionView.registerReusableCell(FMPersonHelpReportVCCollectionViewCell)</code></p>\n<p>剩下的使用过程和用Storyboard自定义的Prototype Cell是一致的。</p>\n<h1 id=\"自定义View\"><a href=\"#自定义View\" class=\"headerlink\" title=\"自定义View\"></a>自定义View</h1><p>新建View的时候，是无法勾选生成Xib文件的，所以需要我们自己创建同名的UIView和Xib文件。并且将 Xib文件的 File’s Owner -&gt; Custom Class -&gt; Class 属性设为刚才新建的类。</p>\n<p>由于自定义View不能直接从View初始化，所以写了一个基类。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseXibView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> view:<span class=\"type\">UIView</span>?</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//初始化方法。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initFromXib</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//获取Xib文件名字</span></div><div class=\"line\">        <span class=\"keyword\">let</span> xibName = <span class=\"type\">NSStringFromClass</span>(<span class=\"keyword\">self</span>.classForCoder)</div><div class=\"line\">        <span class=\"keyword\">let</span> xibClassName = xibName.characters.<span class=\"built_in\">split</span>&#123;$<span class=\"number\">0</span> == <span class=\"string\">\".\"</span>&#125;.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>).last</div><div class=\"line\">        <span class=\"comment\">//使用Xib初始化一个View</span></div><div class=\"line\">        <span class=\"keyword\">let</span> view = <span class=\"type\">NSBundle</span>.mainBundle().loadNibNamed(xibClassName, owner: <span class=\"keyword\">self</span>, options: <span class=\"literal\">nil</span>).first <span class=\"keyword\">as</span>! <span class=\"type\">UIView</span></div><div class=\"line\">        view.frame = <span class=\"keyword\">self</span>.bounds</div><div class=\"line\">        view.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">true</span></div><div class=\"line\">        view.autoresizingMask = [.<span class=\"type\">FlexibleWidth</span>,.<span class=\"type\">FlexibleHeight</span>]</div><div class=\"line\">        <span class=\"keyword\">self</span>.addSubview(view)</div><div class=\"line\">        <span class=\"keyword\">self</span>.view = view</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</div><div class=\"line\">        initFromXib()</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder:aDecoder)!</div><div class=\"line\">        initFromXib()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是我写的一个自定义View，主要用来进行新手引导的，覆盖在原视图上，点击view，慢慢改变透明度。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FMHomeNewUserGuideView</span>: <span class=\"title\">BaseXibView</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span>!</div><div class=\"line\">    <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> label: <span class=\"type\">UILabel</span>!</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> isMainView = <span class=\"literal\">true</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initFromXib</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.initFromXib()</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">touchesBegan</span><span class=\"params\">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</div><div class=\"line\">        <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123; </div><div class=\"line\">            <span class=\"keyword\">self</span>.alpha = <span class=\"number\">0</span></div><div class=\"line\">            &#125;) &#123; (isComplete) <span class=\"keyword\">in</span></div><div class=\"line\">                <span class=\"keyword\">self</span>.removeSubviews()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setUI</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用法：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> homeNewUserGuideView = <span class=\"type\">FMHomeNewUserGuideView</span>()</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1>"},{"title":"Swift 模拟登陆小结","date":"2016-08-02T10:27:36.000Z","_content":"\n\n# 背景\n\n过完年在学校度过大学的最后一学期，期间加深学习了Python的Django和iOS开发。在学习的过程中，就想着临走前做一个校园应用。由于我们的需要的信息分散在学校各个部门的系统中，此时就需要通过模拟登陆来获取我们想要的信息。一开始是用python来模拟登陆解析数据的，后期由于我对架构设计的改变（主要是服务器资源和流量没钱买😂），我把很多解析放在手机端（暂时为iOS端）来处理，所以就应运而出本篇博文。\n\n# 准备工作\n\n要模拟浏览器登陆，首先得分析浏览器登陆的步骤，再用代码来实现。在分析浏览器登陆之前先介绍一下使用到的工具。\n\n## 工具\n\n### Charles\n\n这是一款常用的网络封包截取工具，在做开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Mac和PC都可以使用。今天好像发布了新版了。这个还可以作为iPhone的http代理，来抓包手机的网络包。关于此软件的使用详情，可以阅读[唐巧老师的博客](\"http://blog.devtang.com/2015/11/14/charles-introduction/\")。\n\n### Postman\n\n这是Mac上Chrome的一个网络调试的工具插件，PC上不知道有没有，可以通过该工具来进行各种http请求。\n\n### 编码工具\n\n这是一个在线的[站长工具](http://tool.chinaz.com/tools/urlencode.aspx)，可以进行各类编码间的转换，最常用的应该就是utf-8的UrlDecode和UrlEncode。这个工具还非常贴心的提供了gb2312格式的UrlDecode和UrlEncode。\n\n### Alamofire（iOS网络库）\n\n1. Alamofire 的前身是 AFNetworking。AFNetworking 是 iOS 和 OS X 上很受欢迎的第三方HTTP网络基础库。\n2. 其实 AFNetwork 的前缀 AF 便是 Alamofire 的缩写。\n3. Swift发布后，AFNetworking的作者又用Swift语言写了个相同功能的库，这便是 Alamofire。\n4. Alamofire 本质是基于`NSURLSession`，并做了封装。使用 Alamofire 可以让我们网络请求相关代码（如获取数据，提交数据，上传文件，下载文件等）更加简洁易用。\n\n**关于Cookie:**\nAlamofire是基于NSURLRequest封装的，所以Cookie会自动保存，就和浏览器请求是一个效果。而且网站Set_cookie多久，本地的Cookie就多久，每次请求的时候都会自动带上cookie，直到过期。（所以像登陆session这些的都不用我们手动去处理）。\n\n## 基础知识\n\nPOST请求和GET请求应该就不用解释了，这里提醒一下编码格式，现在大部分服务器都是utf-8编码格式的，但不排除少量用的GB2312。所以在发现服务器响应数据乱码时要检查返回数据的编码格式。\n\n## 几个例子\n\n### 登陆1\n\n做校园APP想到的第一个功能就是查成绩查课表，于是第一个就是拿教务系统动刀。\n\n通过Charles发现，使用网页登陆教务系统的时候，其实是跳转到一个check页验证账号密码，再跳转回教务系统首页。该网页返回的就是JSON数据，所以用的`responseJSON`。\n\n``` swift\nAlamofire.request(Method.POST, SchoolBaseURL+\"login/check.shtml\"\n, parameters:[\"user\":\"*****\",\"pass\":\"*****\",\"usertype\":\"stu\"]\n, encoding: ParameterEncoding.URL\n, headers: nil).responseJSON {\n                response in\n            \n            guard response.result.isSuccess  else {\n                self.callback?.managerApiCallBackFailed(self)\n                Hud.showError(\"网络错误了\")\n                return\n            }\n            // 登陆成功\n}\n```\n\n### 登陆2\n\n想到的第二个功能就是查询校园网流量使用情况，于是瞄上了信息管理中心的校园网系统。\n\n这里请求时必须带上Content-Type和Referer。否则就会跳到登录页。这个系统就是我讲的GB2312编码的坑货系统。返回的data需要经过GB2312编码。\n\n``` swift\nAlamofire.request(Method.POST, SchoolNetWorkBaseURL\n, parameters:[\"username\":\"*****\",\"password\":\"*****\"]\n, encoding: ParameterEncoding.URL\n, headers: [\"Content-Type\":\"application/x-www-form-urlencoded\",\"Referer\":SchoolNetWorkBaseURL]).response {\n                request, response, data, error in \n                \n                // 业务处理\n                let GB2312Encoding = CFStringConvertEncodingToNSStringEncoding(0x0632)\n                let selfHTMLString:String = NSString(data: data!, encoding: GB2312Encoding)! as String\n}\n\n```\n \n弄到这里感觉还比较轻松，但是最坑爹的是，这个网站的请求参数必须是经过GB2312的URLEncode。而Alamofire只能将参数进行utf-8编码。我开始时以为将请求参数用GB2312编码后传入即可，或者利用GB2312编码的URLEncode后再传入。但是都相当于Alamofire在最外层还是用UTF-8又URLEncode了一遍。\n\n这是Alamofire的源码，这里可以由`charst=utf-8`看出它默认将数据进行utf-8编码。\n``` swift\nif let method = Method(rawValue: mutableURLRequest.HTTPMethod) where encodesParametersInURL(method) {\n    if let\n        URLComponents = NSURLComponents(URL: mutableURLRequest.URL!, resolvingAgainstBaseURL: false)\n        where !parameters.isEmpty\n    {\n        let percentEncodedQuery = (URLComponents.percentEncodedQuery.map { $0 + \"&\" } ?? \"\") + query(parameters)\n        URLComponents.percentEncodedQuery = percentEncodedQuery\n        mutableURLRequest.URL = URLComponents.URL\n    }\n} else {\n    if mutableURLRequest.valueForHTTPHeaderField(\"Content-Type\") == nil {\n        mutableURLRequest.setValue(\n            \"application/x-www-form-urlencoded; charset=utf-8\",\n            forHTTPHeaderField: \"Content-Type\"\n        )\n    }\n\n    mutableURLRequest.HTTPBody = query(parameters).dataUsingEncoding(\n        NSUTF8StringEncoding,\n        allowLossyConversion: false\n    )\n}\n```\n\n这里参考学长给的建议，将request先自己编码后再进行传输。首先封装了自定义编码request方法。\n\n``` swift\nprivate func urlRequestWithComponents(urlString:String,parameters:[String: AnyObject]) -> (URLRequestConvertible,NSData) {\n    \n    // create  url request to send\n    let mutableURLRequest = NSMutableURLRequest(URL: NSURL(string: urlString)!)\n    mutableURLRequest.HTTPMethod = Alamofire.Method.POST.rawValue\n    let contentType = \"application/x-www-form-urlencoded\"\n    mutableURLRequest.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n    mutableURLRequest.setValue(\"http://nic.ahnu.edu.cn/cgi-bin/service\", forHTTPHeaderField: \"Referer\")\n    \n    // add parameters\n    let uploadData = NSMutableData()\n    for (key,value) in parameters {\n        uploadData.appendData(\"\\(key)=\\(value)&\".dataUsingEncoding(GB2312Encoding)!)\n    }\n    \n    return (Alamofire.ParameterEncoding.URL.encode(mutableURLRequest, parameters: nil).0,uploadData)\n}\n```\n\n\n``` swift\n\nlet urlRequest = urlRequestWithComponents(SchoolNetWorkBaseURL\n, parameters:[\"username\":\"****\",\"credential\":self.credential,\"logtbl\":\"int201607\",\"echo\":\"查询\",\"func\":\"计费网关\"])\n \nAlamofire.upload(urlRequest.0, data: urlRequest.1).response {\n    request, response, data, error in\n    \n    let htmlString:String = NSString(data: data!, encoding: GB2312Encoding)! as String\n    print(htmlString)\n}\n```\n\n\n\n","source":"_posts/Swift模拟登陆小结.md","raw":"---\ntitle: Swift 模拟登陆小结\ndate: 2016-08-02 18:27:36\ntags: \n- Swift \n- Alamofire \n- 模拟登陆\ncategories:\n- 开发\n- iOS\n---\n\n\n# 背景\n\n过完年在学校度过大学的最后一学期，期间加深学习了Python的Django和iOS开发。在学习的过程中，就想着临走前做一个校园应用。由于我们的需要的信息分散在学校各个部门的系统中，此时就需要通过模拟登陆来获取我们想要的信息。一开始是用python来模拟登陆解析数据的，后期由于我对架构设计的改变（主要是服务器资源和流量没钱买😂），我把很多解析放在手机端（暂时为iOS端）来处理，所以就应运而出本篇博文。\n\n# 准备工作\n\n要模拟浏览器登陆，首先得分析浏览器登陆的步骤，再用代码来实现。在分析浏览器登陆之前先介绍一下使用到的工具。\n\n## 工具\n\n### Charles\n\n这是一款常用的网络封包截取工具，在做开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Mac和PC都可以使用。今天好像发布了新版了。这个还可以作为iPhone的http代理，来抓包手机的网络包。关于此软件的使用详情，可以阅读[唐巧老师的博客](\"http://blog.devtang.com/2015/11/14/charles-introduction/\")。\n\n### Postman\n\n这是Mac上Chrome的一个网络调试的工具插件，PC上不知道有没有，可以通过该工具来进行各种http请求。\n\n### 编码工具\n\n这是一个在线的[站长工具](http://tool.chinaz.com/tools/urlencode.aspx)，可以进行各类编码间的转换，最常用的应该就是utf-8的UrlDecode和UrlEncode。这个工具还非常贴心的提供了gb2312格式的UrlDecode和UrlEncode。\n\n### Alamofire（iOS网络库）\n\n1. Alamofire 的前身是 AFNetworking。AFNetworking 是 iOS 和 OS X 上很受欢迎的第三方HTTP网络基础库。\n2. 其实 AFNetwork 的前缀 AF 便是 Alamofire 的缩写。\n3. Swift发布后，AFNetworking的作者又用Swift语言写了个相同功能的库，这便是 Alamofire。\n4. Alamofire 本质是基于`NSURLSession`，并做了封装。使用 Alamofire 可以让我们网络请求相关代码（如获取数据，提交数据，上传文件，下载文件等）更加简洁易用。\n\n**关于Cookie:**\nAlamofire是基于NSURLRequest封装的，所以Cookie会自动保存，就和浏览器请求是一个效果。而且网站Set_cookie多久，本地的Cookie就多久，每次请求的时候都会自动带上cookie，直到过期。（所以像登陆session这些的都不用我们手动去处理）。\n\n## 基础知识\n\nPOST请求和GET请求应该就不用解释了，这里提醒一下编码格式，现在大部分服务器都是utf-8编码格式的，但不排除少量用的GB2312。所以在发现服务器响应数据乱码时要检查返回数据的编码格式。\n\n## 几个例子\n\n### 登陆1\n\n做校园APP想到的第一个功能就是查成绩查课表，于是第一个就是拿教务系统动刀。\n\n通过Charles发现，使用网页登陆教务系统的时候，其实是跳转到一个check页验证账号密码，再跳转回教务系统首页。该网页返回的就是JSON数据，所以用的`responseJSON`。\n\n``` swift\nAlamofire.request(Method.POST, SchoolBaseURL+\"login/check.shtml\"\n, parameters:[\"user\":\"*****\",\"pass\":\"*****\",\"usertype\":\"stu\"]\n, encoding: ParameterEncoding.URL\n, headers: nil).responseJSON {\n                response in\n            \n            guard response.result.isSuccess  else {\n                self.callback?.managerApiCallBackFailed(self)\n                Hud.showError(\"网络错误了\")\n                return\n            }\n            // 登陆成功\n}\n```\n\n### 登陆2\n\n想到的第二个功能就是查询校园网流量使用情况，于是瞄上了信息管理中心的校园网系统。\n\n这里请求时必须带上Content-Type和Referer。否则就会跳到登录页。这个系统就是我讲的GB2312编码的坑货系统。返回的data需要经过GB2312编码。\n\n``` swift\nAlamofire.request(Method.POST, SchoolNetWorkBaseURL\n, parameters:[\"username\":\"*****\",\"password\":\"*****\"]\n, encoding: ParameterEncoding.URL\n, headers: [\"Content-Type\":\"application/x-www-form-urlencoded\",\"Referer\":SchoolNetWorkBaseURL]).response {\n                request, response, data, error in \n                \n                // 业务处理\n                let GB2312Encoding = CFStringConvertEncodingToNSStringEncoding(0x0632)\n                let selfHTMLString:String = NSString(data: data!, encoding: GB2312Encoding)! as String\n}\n\n```\n \n弄到这里感觉还比较轻松，但是最坑爹的是，这个网站的请求参数必须是经过GB2312的URLEncode。而Alamofire只能将参数进行utf-8编码。我开始时以为将请求参数用GB2312编码后传入即可，或者利用GB2312编码的URLEncode后再传入。但是都相当于Alamofire在最外层还是用UTF-8又URLEncode了一遍。\n\n这是Alamofire的源码，这里可以由`charst=utf-8`看出它默认将数据进行utf-8编码。\n``` swift\nif let method = Method(rawValue: mutableURLRequest.HTTPMethod) where encodesParametersInURL(method) {\n    if let\n        URLComponents = NSURLComponents(URL: mutableURLRequest.URL!, resolvingAgainstBaseURL: false)\n        where !parameters.isEmpty\n    {\n        let percentEncodedQuery = (URLComponents.percentEncodedQuery.map { $0 + \"&\" } ?? \"\") + query(parameters)\n        URLComponents.percentEncodedQuery = percentEncodedQuery\n        mutableURLRequest.URL = URLComponents.URL\n    }\n} else {\n    if mutableURLRequest.valueForHTTPHeaderField(\"Content-Type\") == nil {\n        mutableURLRequest.setValue(\n            \"application/x-www-form-urlencoded; charset=utf-8\",\n            forHTTPHeaderField: \"Content-Type\"\n        )\n    }\n\n    mutableURLRequest.HTTPBody = query(parameters).dataUsingEncoding(\n        NSUTF8StringEncoding,\n        allowLossyConversion: false\n    )\n}\n```\n\n这里参考学长给的建议，将request先自己编码后再进行传输。首先封装了自定义编码request方法。\n\n``` swift\nprivate func urlRequestWithComponents(urlString:String,parameters:[String: AnyObject]) -> (URLRequestConvertible,NSData) {\n    \n    // create  url request to send\n    let mutableURLRequest = NSMutableURLRequest(URL: NSURL(string: urlString)!)\n    mutableURLRequest.HTTPMethod = Alamofire.Method.POST.rawValue\n    let contentType = \"application/x-www-form-urlencoded\"\n    mutableURLRequest.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n    mutableURLRequest.setValue(\"http://nic.ahnu.edu.cn/cgi-bin/service\", forHTTPHeaderField: \"Referer\")\n    \n    // add parameters\n    let uploadData = NSMutableData()\n    for (key,value) in parameters {\n        uploadData.appendData(\"\\(key)=\\(value)&\".dataUsingEncoding(GB2312Encoding)!)\n    }\n    \n    return (Alamofire.ParameterEncoding.URL.encode(mutableURLRequest, parameters: nil).0,uploadData)\n}\n```\n\n\n``` swift\n\nlet urlRequest = urlRequestWithComponents(SchoolNetWorkBaseURL\n, parameters:[\"username\":\"****\",\"credential\":self.credential,\"logtbl\":\"int201607\",\"echo\":\"查询\",\"func\":\"计费网关\"])\n \nAlamofire.upload(urlRequest.0, data: urlRequest.1).response {\n    request, response, data, error in\n    \n    let htmlString:String = NSString(data: data!, encoding: GB2312Encoding)! as String\n    print(htmlString)\n}\n```\n\n\n\n","slug":"Swift模拟登陆小结","published":1,"updated":"2016-10-12T14:18:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9be0007hnh1l7semzcl","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>过完年在学校度过大学的最后一学期，期间加深学习了Python的Django和iOS开发。在学习的过程中，就想着临走前做一个校园应用。由于我们的需要的信息分散在学校各个部门的系统中，此时就需要通过模拟登陆来获取我们想要的信息。一开始是用python来模拟登陆解析数据的，后期由于我对架构设计的改变（主要是服务器资源和流量没钱买😂），我把很多解析放在手机端（暂时为iOS端）来处理，所以就应运而出本篇博文。</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>要模拟浏览器登陆，首先得分析浏览器登陆的步骤，再用代码来实现。在分析浏览器登陆之前先介绍一下使用到的工具。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Charles\"><a href=\"#Charles\" class=\"headerlink\" title=\"Charles\"></a>Charles</h3><p>这是一款常用的网络封包截取工具，在做开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Mac和PC都可以使用。今天好像发布了新版了。这个还可以作为iPhone的http代理，来抓包手机的网络包。关于此软件的使用详情，可以阅读<a href=\"&quot;http://blog.devtang.com/2015/11/14/charles-introduction/&quot;\">唐巧老师的博客</a>。</p>\n<h3 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a>Postman</h3><p>这是Mac上Chrome的一个网络调试的工具插件，PC上不知道有没有，可以通过该工具来进行各种http请求。</p>\n<h3 id=\"编码工具\"><a href=\"#编码工具\" class=\"headerlink\" title=\"编码工具\"></a>编码工具</h3><p>这是一个在线的<a href=\"http://tool.chinaz.com/tools/urlencode.aspx\" target=\"_blank\" rel=\"external\">站长工具</a>，可以进行各类编码间的转换，最常用的应该就是utf-8的UrlDecode和UrlEncode。这个工具还非常贴心的提供了gb2312格式的UrlDecode和UrlEncode。</p>\n<h3 id=\"Alamofire（iOS网络库）\"><a href=\"#Alamofire（iOS网络库）\" class=\"headerlink\" title=\"Alamofire（iOS网络库）\"></a>Alamofire（iOS网络库）</h3><ol>\n<li>Alamofire 的前身是 AFNetworking。AFNetworking 是 iOS 和 OS X 上很受欢迎的第三方HTTP网络基础库。</li>\n<li>其实 AFNetwork 的前缀 AF 便是 Alamofire 的缩写。</li>\n<li>Swift发布后，AFNetworking的作者又用Swift语言写了个相同功能的库，这便是 Alamofire。</li>\n<li>Alamofire 本质是基于<code>NSURLSession</code>，并做了封装。使用 Alamofire 可以让我们网络请求相关代码（如获取数据，提交数据，上传文件，下载文件等）更加简洁易用。</li>\n</ol>\n<p><strong>关于Cookie:</strong><br>Alamofire是基于NSURLRequest封装的，所以Cookie会自动保存，就和浏览器请求是一个效果。而且网站Set_cookie多久，本地的Cookie就多久，每次请求的时候都会自动带上cookie，直到过期。（所以像登陆session这些的都不用我们手动去处理）。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>POST请求和GET请求应该就不用解释了，这里提醒一下编码格式，现在大部分服务器都是utf-8编码格式的，但不排除少量用的GB2312。所以在发现服务器响应数据乱码时要检查返回数据的编码格式。</p>\n<h2 id=\"几个例子\"><a href=\"#几个例子\" class=\"headerlink\" title=\"几个例子\"></a>几个例子</h2><h3 id=\"登陆1\"><a href=\"#登陆1\" class=\"headerlink\" title=\"登陆1\"></a>登陆1</h3><p>做校园APP想到的第一个功能就是查成绩查课表，于是第一个就是拿教务系统动刀。</p>\n<p>通过Charles发现，使用网页登陆教务系统的时候，其实是跳转到一个check页验证账号密码，再跳转回教务系统首页。该网页返回的就是JSON数据，所以用的<code>responseJSON</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Alamofire</span>.request(<span class=\"type\">Method</span>.<span class=\"type\">POST</span>, <span class=\"type\">SchoolBaseURL</span>+<span class=\"string\">\"login/check.shtml\"</span></div><div class=\"line\">, parameters:[<span class=\"string\">\"user\"</span>:<span class=\"string\">\"*****\"</span>,<span class=\"string\">\"pass\"</span>:<span class=\"string\">\"*****\"</span>,<span class=\"string\">\"usertype\"</span>:<span class=\"string\">\"stu\"</span>]</div><div class=\"line\">, encoding: <span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span></div><div class=\"line\">, headers: <span class=\"literal\">nil</span>).responseJSON &#123;</div><div class=\"line\">                response <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">guard</span> response.result.isSuccess  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">self</span>.callback?.managerApiCallBackFailed(<span class=\"keyword\">self</span>)</div><div class=\"line\">                <span class=\"type\">Hud</span>.showError(<span class=\"string\">\"网络错误了\"</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 登陆成功</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"登陆2\"><a href=\"#登陆2\" class=\"headerlink\" title=\"登陆2\"></a>登陆2</h3><p>想到的第二个功能就是查询校园网流量使用情况，于是瞄上了信息管理中心的校园网系统。</p>\n<p>这里请求时必须带上Content-Type和Referer。否则就会跳到登录页。这个系统就是我讲的GB2312编码的坑货系统。返回的data需要经过GB2312编码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Alamofire</span>.request(<span class=\"type\">Method</span>.<span class=\"type\">POST</span>, <span class=\"type\">SchoolNetWorkBaseURL</span></div><div class=\"line\">, parameters:[<span class=\"string\">\"username\"</span>:<span class=\"string\">\"*****\"</span>,<span class=\"string\">\"password\"</span>:<span class=\"string\">\"*****\"</span>]</div><div class=\"line\">, encoding: <span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span></div><div class=\"line\">, headers: [<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/x-www-form-urlencoded\"</span>,<span class=\"string\">\"Referer\"</span>:<span class=\"type\">SchoolNetWorkBaseURL</span>]).response &#123;</div><div class=\"line\">                request, response, data, error <span class=\"keyword\">in</span> </div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 业务处理</span></div><div class=\"line\">                <span class=\"keyword\">let</span> <span class=\"type\">GB2312Encoding</span> = <span class=\"type\">CFStringConvertEncodingToNSStringEncoding</span>(<span class=\"number\">0x0632</span>)</div><div class=\"line\">                <span class=\"keyword\">let</span> selfHTMLString:<span class=\"type\">String</span> = <span class=\"type\">NSString</span>(data: data!, encoding: <span class=\"type\">GB2312Encoding</span>)! <span class=\"keyword\">as</span> <span class=\"type\">String</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>弄到这里感觉还比较轻松，但是最坑爹的是，这个网站的请求参数必须是经过GB2312的URLEncode。而Alamofire只能将参数进行utf-8编码。我开始时以为将请求参数用GB2312编码后传入即可，或者利用GB2312编码的URLEncode后再传入。但是都相当于Alamofire在最外层还是用UTF-8又URLEncode了一遍。</p>\n<p>这是Alamofire的源码，这里可以由<code>charst=utf-8</code>看出它默认将数据进行utf-8编码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> method = <span class=\"type\">Method</span>(rawValue: mutableURLRequest.<span class=\"type\">HTTPMethod</span>) <span class=\"keyword\">where</span> encodesParametersInURL(method) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span></div><div class=\"line\">        <span class=\"type\">URLComponents</span> = <span class=\"type\">NSURLComponents</span>(<span class=\"type\">URL</span>: mutableURLRequest.<span class=\"type\">URL</span>!, resolvingAgainstBaseURL: <span class=\"literal\">false</span>)</div><div class=\"line\">        <span class=\"keyword\">where</span> !parameters.isEmpty</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> percentEncodedQuery = (<span class=\"type\">URLComponents</span>.percentEncodedQuery.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> + <span class=\"string\">\"&amp;\"</span> &#125; ?? <span class=\"string\">\"\"</span>) + query(parameters)</div><div class=\"line\">        <span class=\"type\">URLComponents</span>.percentEncodedQuery = percentEncodedQuery</div><div class=\"line\">        mutableURLRequest.<span class=\"type\">URL</span> = <span class=\"type\">URLComponents</span>.<span class=\"type\">URL</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> mutableURLRequest.valueForHTTPHeaderField(<span class=\"string\">\"Content-Type\"</span>) == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        mutableURLRequest.setValue(</div><div class=\"line\">            <span class=\"string\">\"application/x-www-form-urlencoded; charset=utf-8\"</span>,</div><div class=\"line\">            forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mutableURLRequest.<span class=\"type\">HTTPBody</span> = query(parameters).dataUsingEncoding(</div><div class=\"line\">        <span class=\"type\">NSUTF8StringEncoding</span>,</div><div class=\"line\">        allowLossyConversion: <span class=\"literal\">false</span></div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里参考学长给的建议，将request先自己编码后再进行传输。首先封装了自定义编码request方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlRequestWithComponents</span><span class=\"params\">(urlString:String,parameters:[String: AnyObject])</span></span> -&gt; (<span class=\"type\">URLRequestConvertible</span>,<span class=\"type\">NSData</span>) &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// create  url request to send</span></div><div class=\"line\">    <span class=\"keyword\">let</span> mutableURLRequest = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"type\">NSURL</span>(string: urlString)!)</div><div class=\"line\">    mutableURLRequest.<span class=\"type\">HTTPMethod</span> = <span class=\"type\">Alamofire</span>.<span class=\"type\">Method</span>.<span class=\"type\">POST</span>.rawValue</div><div class=\"line\">    <span class=\"keyword\">let</span> contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></div><div class=\"line\">    mutableURLRequest.setValue(contentType, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">    mutableURLRequest.setValue(<span class=\"string\">\"http://nic.ahnu.edu.cn/cgi-bin/service\"</span>, forHTTPHeaderField: <span class=\"string\">\"Referer\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add parameters</span></div><div class=\"line\">    <span class=\"keyword\">let</span> uploadData = <span class=\"type\">NSMutableData</span>()</div><div class=\"line\">    <span class=\"keyword\">for</span> (key,value) <span class=\"keyword\">in</span> parameters &#123;</div><div class=\"line\">        uploadData.appendData(<span class=\"string\">\"<span class=\"subst\">\\(key)</span>=<span class=\"subst\">\\(value)</span>&amp;\"</span>.dataUsingEncoding(<span class=\"type\">GB2312Encoding</span>)!)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">Alamofire</span>.<span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span>.encode(mutableURLRequest, parameters: <span class=\"literal\">nil</span>).<span class=\"number\">0</span>,uploadData)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> urlRequest = urlRequestWithComponents(<span class=\"type\">SchoolNetWorkBaseURL</span></div><div class=\"line\">, parameters:[<span class=\"string\">\"username\"</span>:<span class=\"string\">\"****\"</span>,<span class=\"string\">\"credential\"</span>:<span class=\"keyword\">self</span>.credential,<span class=\"string\">\"logtbl\"</span>:<span class=\"string\">\"int201607\"</span>,<span class=\"string\">\"echo\"</span>:<span class=\"string\">\"查询\"</span>,<span class=\"string\">\"func\"</span>:<span class=\"string\">\"计费网关\"</span>])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"type\">Alamofire</span>.upload(urlRequest.<span class=\"number\">0</span>, data: urlRequest.<span class=\"number\">1</span>).response &#123;</div><div class=\"line\">    request, response, data, error <span class=\"keyword\">in</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> htmlString:<span class=\"type\">String</span> = <span class=\"type\">NSString</span>(data: data!, encoding: <span class=\"type\">GB2312Encoding</span>)! <span class=\"keyword\">as</span> <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(htmlString)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>过完年在学校度过大学的最后一学期，期间加深学习了Python的Django和iOS开发。在学习的过程中，就想着临走前做一个校园应用。由于我们的需要的信息分散在学校各个部门的系统中，此时就需要通过模拟登陆来获取我们想要的信息。一开始是用python来模拟登陆解析数据的，后期由于我对架构设计的改变（主要是服务器资源和流量没钱买😂），我把很多解析放在手机端（暂时为iOS端）来处理，所以就应运而出本篇博文。</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>要模拟浏览器登陆，首先得分析浏览器登陆的步骤，再用代码来实现。在分析浏览器登陆之前先介绍一下使用到的工具。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"Charles\"><a href=\"#Charles\" class=\"headerlink\" title=\"Charles\"></a>Charles</h3><p>这是一款常用的网络封包截取工具，在做开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Mac和PC都可以使用。今天好像发布了新版了。这个还可以作为iPhone的http代理，来抓包手机的网络包。关于此软件的使用详情，可以阅读<a href=\"&quot;http://blog.devtang.com/2015/11/14/charles-introduction/&quot;\">唐巧老师的博客</a>。</p>\n<h3 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a>Postman</h3><p>这是Mac上Chrome的一个网络调试的工具插件，PC上不知道有没有，可以通过该工具来进行各种http请求。</p>\n<h3 id=\"编码工具\"><a href=\"#编码工具\" class=\"headerlink\" title=\"编码工具\"></a>编码工具</h3><p>这是一个在线的<a href=\"http://tool.chinaz.com/tools/urlencode.aspx\">站长工具</a>，可以进行各类编码间的转换，最常用的应该就是utf-8的UrlDecode和UrlEncode。这个工具还非常贴心的提供了gb2312格式的UrlDecode和UrlEncode。</p>\n<h3 id=\"Alamofire（iOS网络库）\"><a href=\"#Alamofire（iOS网络库）\" class=\"headerlink\" title=\"Alamofire（iOS网络库）\"></a>Alamofire（iOS网络库）</h3><ol>\n<li>Alamofire 的前身是 AFNetworking。AFNetworking 是 iOS 和 OS X 上很受欢迎的第三方HTTP网络基础库。</li>\n<li>其实 AFNetwork 的前缀 AF 便是 Alamofire 的缩写。</li>\n<li>Swift发布后，AFNetworking的作者又用Swift语言写了个相同功能的库，这便是 Alamofire。</li>\n<li>Alamofire 本质是基于<code>NSURLSession</code>，并做了封装。使用 Alamofire 可以让我们网络请求相关代码（如获取数据，提交数据，上传文件，下载文件等）更加简洁易用。</li>\n</ol>\n<p><strong>关于Cookie:</strong><br>Alamofire是基于NSURLRequest封装的，所以Cookie会自动保存，就和浏览器请求是一个效果。而且网站Set_cookie多久，本地的Cookie就多久，每次请求的时候都会自动带上cookie，直到过期。（所以像登陆session这些的都不用我们手动去处理）。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>POST请求和GET请求应该就不用解释了，这里提醒一下编码格式，现在大部分服务器都是utf-8编码格式的，但不排除少量用的GB2312。所以在发现服务器响应数据乱码时要检查返回数据的编码格式。</p>\n<h2 id=\"几个例子\"><a href=\"#几个例子\" class=\"headerlink\" title=\"几个例子\"></a>几个例子</h2><h3 id=\"登陆1\"><a href=\"#登陆1\" class=\"headerlink\" title=\"登陆1\"></a>登陆1</h3><p>做校园APP想到的第一个功能就是查成绩查课表，于是第一个就是拿教务系统动刀。</p>\n<p>通过Charles发现，使用网页登陆教务系统的时候，其实是跳转到一个check页验证账号密码，再跳转回教务系统首页。该网页返回的就是JSON数据，所以用的<code>responseJSON</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Alamofire</span>.request(<span class=\"type\">Method</span>.<span class=\"type\">POST</span>, <span class=\"type\">SchoolBaseURL</span>+<span class=\"string\">\"login/check.shtml\"</span></div><div class=\"line\">, parameters:[<span class=\"string\">\"user\"</span>:<span class=\"string\">\"*****\"</span>,<span class=\"string\">\"pass\"</span>:<span class=\"string\">\"*****\"</span>,<span class=\"string\">\"usertype\"</span>:<span class=\"string\">\"stu\"</span>]</div><div class=\"line\">, encoding: <span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span></div><div class=\"line\">, headers: <span class=\"literal\">nil</span>).responseJSON &#123;</div><div class=\"line\">                response <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">guard</span> response.result.isSuccess  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">self</span>.callback?.managerApiCallBackFailed(<span class=\"keyword\">self</span>)</div><div class=\"line\">                <span class=\"type\">Hud</span>.showError(<span class=\"string\">\"网络错误了\"</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 登陆成功</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"登陆2\"><a href=\"#登陆2\" class=\"headerlink\" title=\"登陆2\"></a>登陆2</h3><p>想到的第二个功能就是查询校园网流量使用情况，于是瞄上了信息管理中心的校园网系统。</p>\n<p>这里请求时必须带上Content-Type和Referer。否则就会跳到登录页。这个系统就是我讲的GB2312编码的坑货系统。返回的data需要经过GB2312编码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Alamofire</span>.request(<span class=\"type\">Method</span>.<span class=\"type\">POST</span>, <span class=\"type\">SchoolNetWorkBaseURL</span></div><div class=\"line\">, parameters:[<span class=\"string\">\"username\"</span>:<span class=\"string\">\"*****\"</span>,<span class=\"string\">\"password\"</span>:<span class=\"string\">\"*****\"</span>]</div><div class=\"line\">, encoding: <span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span></div><div class=\"line\">, headers: [<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/x-www-form-urlencoded\"</span>,<span class=\"string\">\"Referer\"</span>:<span class=\"type\">SchoolNetWorkBaseURL</span>]).response &#123;</div><div class=\"line\">                request, response, data, error <span class=\"keyword\">in</span> </div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 业务处理</span></div><div class=\"line\">                <span class=\"keyword\">let</span> <span class=\"type\">GB2312Encoding</span> = <span class=\"type\">CFStringConvertEncodingToNSStringEncoding</span>(<span class=\"number\">0x0632</span>)</div><div class=\"line\">                <span class=\"keyword\">let</span> selfHTMLString:<span class=\"type\">String</span> = <span class=\"type\">NSString</span>(data: data!, encoding: <span class=\"type\">GB2312Encoding</span>)! <span class=\"keyword\">as</span> <span class=\"type\">String</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>弄到这里感觉还比较轻松，但是最坑爹的是，这个网站的请求参数必须是经过GB2312的URLEncode。而Alamofire只能将参数进行utf-8编码。我开始时以为将请求参数用GB2312编码后传入即可，或者利用GB2312编码的URLEncode后再传入。但是都相当于Alamofire在最外层还是用UTF-8又URLEncode了一遍。</p>\n<p>这是Alamofire的源码，这里可以由<code>charst=utf-8</code>看出它默认将数据进行utf-8编码。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> method = <span class=\"type\">Method</span>(rawValue: mutableURLRequest.<span class=\"type\">HTTPMethod</span>) <span class=\"keyword\">where</span> encodesParametersInURL(method) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span></div><div class=\"line\">        <span class=\"type\">URLComponents</span> = <span class=\"type\">NSURLComponents</span>(<span class=\"type\">URL</span>: mutableURLRequest.<span class=\"type\">URL</span>!, resolvingAgainstBaseURL: <span class=\"literal\">false</span>)</div><div class=\"line\">        <span class=\"keyword\">where</span> !parameters.isEmpty</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> percentEncodedQuery = (<span class=\"type\">URLComponents</span>.percentEncodedQuery.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> + <span class=\"string\">\"&amp;\"</span> &#125; ?? <span class=\"string\">\"\"</span>) + query(parameters)</div><div class=\"line\">        <span class=\"type\">URLComponents</span>.percentEncodedQuery = percentEncodedQuery</div><div class=\"line\">        mutableURLRequest.<span class=\"type\">URL</span> = <span class=\"type\">URLComponents</span>.<span class=\"type\">URL</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> mutableURLRequest.valueForHTTPHeaderField(<span class=\"string\">\"Content-Type\"</span>) == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        mutableURLRequest.setValue(</div><div class=\"line\">            <span class=\"string\">\"application/x-www-form-urlencoded; charset=utf-8\"</span>,</div><div class=\"line\">            forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mutableURLRequest.<span class=\"type\">HTTPBody</span> = query(parameters).dataUsingEncoding(</div><div class=\"line\">        <span class=\"type\">NSUTF8StringEncoding</span>,</div><div class=\"line\">        allowLossyConversion: <span class=\"literal\">false</span></div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里参考学长给的建议，将request先自己编码后再进行传输。首先封装了自定义编码request方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlRequestWithComponents</span><span class=\"params\">(urlString:String,parameters:[String: AnyObject])</span></span> -&gt; (<span class=\"type\">URLRequestConvertible</span>,<span class=\"type\">NSData</span>) &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// create  url request to send</span></div><div class=\"line\">    <span class=\"keyword\">let</span> mutableURLRequest = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"type\">NSURL</span>(string: urlString)!)</div><div class=\"line\">    mutableURLRequest.<span class=\"type\">HTTPMethod</span> = <span class=\"type\">Alamofire</span>.<span class=\"type\">Method</span>.<span class=\"type\">POST</span>.rawValue</div><div class=\"line\">    <span class=\"keyword\">let</span> contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></div><div class=\"line\">    mutableURLRequest.setValue(contentType, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">    mutableURLRequest.setValue(<span class=\"string\">\"http://nic.ahnu.edu.cn/cgi-bin/service\"</span>, forHTTPHeaderField: <span class=\"string\">\"Referer\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add parameters</span></div><div class=\"line\">    <span class=\"keyword\">let</span> uploadData = <span class=\"type\">NSMutableData</span>()</div><div class=\"line\">    <span class=\"keyword\">for</span> (key,value) <span class=\"keyword\">in</span> parameters &#123;</div><div class=\"line\">        uploadData.appendData(<span class=\"string\">\"<span class=\"subst\">\\(key)</span>=<span class=\"subst\">\\(value)</span>&amp;\"</span>.dataUsingEncoding(<span class=\"type\">GB2312Encoding</span>)!)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">Alamofire</span>.<span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span>.encode(mutableURLRequest, parameters: <span class=\"literal\">nil</span>).<span class=\"number\">0</span>,uploadData)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> urlRequest = urlRequestWithComponents(<span class=\"type\">SchoolNetWorkBaseURL</span></div><div class=\"line\">, parameters:[<span class=\"string\">\"username\"</span>:<span class=\"string\">\"****\"</span>,<span class=\"string\">\"credential\"</span>:<span class=\"keyword\">self</span>.credential,<span class=\"string\">\"logtbl\"</span>:<span class=\"string\">\"int201607\"</span>,<span class=\"string\">\"echo\"</span>:<span class=\"string\">\"查询\"</span>,<span class=\"string\">\"func\"</span>:<span class=\"string\">\"计费网关\"</span>])</div><div class=\"line\"> </div><div class=\"line\"><span class=\"type\">Alamofire</span>.upload(urlRequest.<span class=\"number\">0</span>, data: urlRequest.<span class=\"number\">1</span>).response &#123;</div><div class=\"line\">    request, response, data, error <span class=\"keyword\">in</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> htmlString:<span class=\"type\">String</span> = <span class=\"type\">NSString</span>(data: data!, encoding: <span class=\"type\">GB2312Encoding</span>)! <span class=\"keyword\">as</span> <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(htmlString)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"iOS:webApp客户端开发小记","date":"2015-11-05T09:00:15.000Z","_content":"\n>这篇文章，现在是我写的第二遍，因为就在我刚才准备commit的时候，手贱点了sync，结果白写了一个小时。\n\n## 前言\n暑期以来我一直在一家物联网公司实习，刚来的时候开发了一款物联网云服务的iOS客户端，也许你会问为啥一个实习生刚来就开发产品，主要原因是我能力超强，还有一个很小的原因是全公司就我用Mac，并且会点点Swift，哈哈。\n\n刚来是开发一款物联网应用的iOS客户端（[1.0版本](https://itunes.apple.com/us/app/iotcloud/id1045360550?l=zh&ls=1&mt=8)现在已上线），后期开发了一段时间这个产品的后台，主要是MongoDB和Java Web。之后，我又被叫去开发另一款云教育应用的iOS客户端和Android客户端。这篇文章主要介绍的是开发这两款iOS应用的总结，后期会总结一下在Android上实现同样功能的经验。\n\n我们公司的产品都是前端是采用HTML5的，这样每个平台的客户端只要套个UIWebView的壳子就好。但是问题不是全部网页都是从服务器端加载的，因为不能保证网络一直畅通，以及服务器没有错，要是网络不通，那整个应用就是一片空白，这样的体验太差了。\n\n所以我们的想法是欢迎页、登陆页都是本地的资源，这样应用打开，不管服务器啥情况，用户都是可以看见东西的。\n\n***\n\n## 应用逻辑\n\n1. 打开应用，首先加载welcome.htm(原本是jsp文件，在Android平台上可以加载，但是Safari不行，所以直接改了后缀)，welcome.htm的js会从sqlite中取出用户名和密码，若不为空，则直接表单提交登录；如为空，则跳转到本地login.htm界面进行登录\n\n2. 用户在login.htm进行登录，若登录成功，则其中的js文件会将用户名、密码存入sqlite中\n\n3. 应用中有二维码扫描功能，若点击该按钮，则跳转回本地，使用相机进行二维码扫描，然后将结果又返回给网页应用\n\n4. 应用中有退出功能，若点击该按钮，则跳转回本地login.htm界面，其中的js会清空sqlite中数据\n\n***\n\n## 遇到的问题以及解决方法\n\n1. Xcode7导入本地资源\n之前用的是Xcode6，项目下面有一个Supporting Files文件夹，将本地资源导入后都在此文件夹中，升级到Xcode7后，没有这个文件夹了，可以直接将本地资源直接导入项目中。\n\n2. iOS9网络连接问题\n刚开始用Xcode6开发第一项目的时候，UIWebView联网是没有问题的，第二个项目使用的是Xcode7和iOS9，就连打开baidu都无法实现，控制台会报错:\n当时在Stack Overflow找到原因了:\n\n\t```swift\n\tApplication Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.\n\t```\n\n\t**在iOS9 beta1中，苹果将原http协议改成了https协议，使用 TLS1.2 SSL加密请求数据。**\n解决方法就是：在info.plist中添加\n\n\t```swift\n\t<key>NSAppTransportSecurity</key>\n\t<dict><key>NSAllowsArbitraryLoads</key><true/></dict>\n\t```\n\t后来在[《微信在适配iOS9上遇到的问题和解决方案》](http://www.infoq.com/cn/articles/wechat-ios9-adaptation)也看到了该问题的解决方法。\n\n3. UIWebView加载本地资源\n\n\t我做的项目中，主要是UIWebView加载本地的网页，代码如下：\n\t\n\t```swift\n\tlet path = NSBundle.mainBundle().pathForResource(\"index\", ofType: \"htm\")\n\tlet urlobj = NSURL.fileURLWithPath(path!)\n\tlet request = NSURLRequest(URL: urlobj)\n\tmyWebView.loadRequest(request)\n\t```\n\n4. 从网页跳转回本地\n\n\t前面说到项目的两个功能：一是网页调用本地二维码；二是在网页里退出，本地能清除登录数据。\n\n\t我的解决思路是：web应用中，需要跳转本地的功能，都把链接写成固定格式的\n\n\t```html\n\t<a href=\"m://erweima.com/\" class=\"link_btn link_btn_t\">二维码扫描</a>\n\t```\n\tUIWebView中有一个方法，可以在链接地址改变时触发，我就是利用该方法，判断UIWebView即将要跳转的链接地址，如果是事先确定的，则执行本地相关操作，如上所述的二维码操作：\n\n    ```swift\nfunc webView(webView: UIWebView,shouldStartLoadWithRequest request: NSURLRequest,navigationType: UIWebViewNavigationType) -> Bool {\n    let rurl = request.URL\n    if(rurl!.scheme == \"m\" && rurl!.host == \"erweima.com\") { \n    //启动二维码扫描\n    tiaozhuan()\n    }\n    //返回true就会跳转新地址\n}\n```\n\n5. 二维码扫描功能\n\n\t这里用到一个用Swift2和AVFoundation写的二维码扫描的类[github](https://github.com/Recursion0210/QRCode)，类里用的是UIStoryBoard进行跳转的，我稍微改动了一下，用方法调用的：\n\n    ```swift\nfunc tiaozhuan() {\n    let scannerVC:ScannerViewController = ScannerViewController()\n    scannerVC.delegate = self\n    self.presentViewController(scannerVC, animated: false, completion: nil)\n}\n```\n\n    ViewController继承了`ScannerViewControllerDelegate`协议，实现了：\n    \n    ```swift\nfunc barcodeObtained(viewController:ScannerViewController, data: String) {\n    //打印二维码扫描的结果\n    print(data)\n}\n```\n\n***\n项目本来已经做完了，经理又加了一些功能，因此又来补充了。\n\n今天周三，是光棍节，周一做的是Android和iOS的判断网络状态的功能，周二和今天上午做的是Android的即时通讯和实时音视频功能，今天下午做的是iOS的即时通讯功能，由于SDK用的是OC，而我用的是Swift，所以到现在也没搞出来啥，还好项目不急，所以来更新一下博客。\n\n2015-11-11 17:55\n\n***\n\n6. 判断网络状态\n\n   ##### 问题：\n\n   是这样的，由于产品登陆完之后，全部内容都在UIWebView中，要是网络突然断了，就会显示无法连接界面，这样用户体验不好，如果后面能联网了，又不能返回到断网之前的界面。\n\n   ##### 需求：\n\n   在尽量不改后台的情况下，解决上面的问题\n\n   ##### 解决思路：\n\n   在每次需要跳转之前，先判断一下网络状态，若是可以联网则不处理；若不能联网，则存储当前链接，并跳转到本地一个不能联网的界面，该界面上有刷新按钮，通过不断点击刷新按钮来重复跳转该界面，然后可以判断网络情况，若可以联网了，则加载之前存储的链接。\n\n   上面的逻辑代码就不贴了，没有参考意义，反正就是在上面第四点的webView方法中进行处理。这里我放一个判断网络状态的项目地址[Reachability.swift-github](https://github.com/ashleymills/Reachability.swift)\n\n7. 即时通讯\n\n   ##### 问题：\n\n   由于我们的项目是做教育类的，需要用户之间可以进行类似于微信那样的通信功能，并且可以进行实时音、视频通话功能。\n\n   ##### 需求：\n\n   实现上述功能，还要尽可能的保证服务质量\n\n   ##### 解决思路：\n\n   我想到的方法是集成第三方的服务，目前用的是[容联云服务](http://www.yuntongxun.com/)。还没做完，未完待续。  \n\n\n","source":"_posts/iOS-webApp客户端开发小记.md","raw":"---\ntitle: iOS:webApp客户端开发小记\ndate: 2015-11-05 17:00:15\ntags:\n- iOS\n- Swift\n- UIWebView\n- 二维码扫描\ncategories:\n- 开发\n- iOS\n---\n\n>这篇文章，现在是我写的第二遍，因为就在我刚才准备commit的时候，手贱点了sync，结果白写了一个小时。\n\n## 前言\n暑期以来我一直在一家物联网公司实习，刚来的时候开发了一款物联网云服务的iOS客户端，也许你会问为啥一个实习生刚来就开发产品，主要原因是我能力超强，还有一个很小的原因是全公司就我用Mac，并且会点点Swift，哈哈。\n\n刚来是开发一款物联网应用的iOS客户端（[1.0版本](https://itunes.apple.com/us/app/iotcloud/id1045360550?l=zh&ls=1&mt=8)现在已上线），后期开发了一段时间这个产品的后台，主要是MongoDB和Java Web。之后，我又被叫去开发另一款云教育应用的iOS客户端和Android客户端。这篇文章主要介绍的是开发这两款iOS应用的总结，后期会总结一下在Android上实现同样功能的经验。\n\n我们公司的产品都是前端是采用HTML5的，这样每个平台的客户端只要套个UIWebView的壳子就好。但是问题不是全部网页都是从服务器端加载的，因为不能保证网络一直畅通，以及服务器没有错，要是网络不通，那整个应用就是一片空白，这样的体验太差了。\n\n所以我们的想法是欢迎页、登陆页都是本地的资源，这样应用打开，不管服务器啥情况，用户都是可以看见东西的。\n\n***\n\n## 应用逻辑\n\n1. 打开应用，首先加载welcome.htm(原本是jsp文件，在Android平台上可以加载，但是Safari不行，所以直接改了后缀)，welcome.htm的js会从sqlite中取出用户名和密码，若不为空，则直接表单提交登录；如为空，则跳转到本地login.htm界面进行登录\n\n2. 用户在login.htm进行登录，若登录成功，则其中的js文件会将用户名、密码存入sqlite中\n\n3. 应用中有二维码扫描功能，若点击该按钮，则跳转回本地，使用相机进行二维码扫描，然后将结果又返回给网页应用\n\n4. 应用中有退出功能，若点击该按钮，则跳转回本地login.htm界面，其中的js会清空sqlite中数据\n\n***\n\n## 遇到的问题以及解决方法\n\n1. Xcode7导入本地资源\n之前用的是Xcode6，项目下面有一个Supporting Files文件夹，将本地资源导入后都在此文件夹中，升级到Xcode7后，没有这个文件夹了，可以直接将本地资源直接导入项目中。\n\n2. iOS9网络连接问题\n刚开始用Xcode6开发第一项目的时候，UIWebView联网是没有问题的，第二个项目使用的是Xcode7和iOS9，就连打开baidu都无法实现，控制台会报错:\n当时在Stack Overflow找到原因了:\n\n\t```swift\n\tApplication Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.\n\t```\n\n\t**在iOS9 beta1中，苹果将原http协议改成了https协议，使用 TLS1.2 SSL加密请求数据。**\n解决方法就是：在info.plist中添加\n\n\t```swift\n\t<key>NSAppTransportSecurity</key>\n\t<dict><key>NSAllowsArbitraryLoads</key><true/></dict>\n\t```\n\t后来在[《微信在适配iOS9上遇到的问题和解决方案》](http://www.infoq.com/cn/articles/wechat-ios9-adaptation)也看到了该问题的解决方法。\n\n3. UIWebView加载本地资源\n\n\t我做的项目中，主要是UIWebView加载本地的网页，代码如下：\n\t\n\t```swift\n\tlet path = NSBundle.mainBundle().pathForResource(\"index\", ofType: \"htm\")\n\tlet urlobj = NSURL.fileURLWithPath(path!)\n\tlet request = NSURLRequest(URL: urlobj)\n\tmyWebView.loadRequest(request)\n\t```\n\n4. 从网页跳转回本地\n\n\t前面说到项目的两个功能：一是网页调用本地二维码；二是在网页里退出，本地能清除登录数据。\n\n\t我的解决思路是：web应用中，需要跳转本地的功能，都把链接写成固定格式的\n\n\t```html\n\t<a href=\"m://erweima.com/\" class=\"link_btn link_btn_t\">二维码扫描</a>\n\t```\n\tUIWebView中有一个方法，可以在链接地址改变时触发，我就是利用该方法，判断UIWebView即将要跳转的链接地址，如果是事先确定的，则执行本地相关操作，如上所述的二维码操作：\n\n    ```swift\nfunc webView(webView: UIWebView,shouldStartLoadWithRequest request: NSURLRequest,navigationType: UIWebViewNavigationType) -> Bool {\n    let rurl = request.URL\n    if(rurl!.scheme == \"m\" && rurl!.host == \"erweima.com\") { \n    //启动二维码扫描\n    tiaozhuan()\n    }\n    //返回true就会跳转新地址\n}\n```\n\n5. 二维码扫描功能\n\n\t这里用到一个用Swift2和AVFoundation写的二维码扫描的类[github](https://github.com/Recursion0210/QRCode)，类里用的是UIStoryBoard进行跳转的，我稍微改动了一下，用方法调用的：\n\n    ```swift\nfunc tiaozhuan() {\n    let scannerVC:ScannerViewController = ScannerViewController()\n    scannerVC.delegate = self\n    self.presentViewController(scannerVC, animated: false, completion: nil)\n}\n```\n\n    ViewController继承了`ScannerViewControllerDelegate`协议，实现了：\n    \n    ```swift\nfunc barcodeObtained(viewController:ScannerViewController, data: String) {\n    //打印二维码扫描的结果\n    print(data)\n}\n```\n\n***\n项目本来已经做完了，经理又加了一些功能，因此又来补充了。\n\n今天周三，是光棍节，周一做的是Android和iOS的判断网络状态的功能，周二和今天上午做的是Android的即时通讯和实时音视频功能，今天下午做的是iOS的即时通讯功能，由于SDK用的是OC，而我用的是Swift，所以到现在也没搞出来啥，还好项目不急，所以来更新一下博客。\n\n2015-11-11 17:55\n\n***\n\n6. 判断网络状态\n\n   ##### 问题：\n\n   是这样的，由于产品登陆完之后，全部内容都在UIWebView中，要是网络突然断了，就会显示无法连接界面，这样用户体验不好，如果后面能联网了，又不能返回到断网之前的界面。\n\n   ##### 需求：\n\n   在尽量不改后台的情况下，解决上面的问题\n\n   ##### 解决思路：\n\n   在每次需要跳转之前，先判断一下网络状态，若是可以联网则不处理；若不能联网，则存储当前链接，并跳转到本地一个不能联网的界面，该界面上有刷新按钮，通过不断点击刷新按钮来重复跳转该界面，然后可以判断网络情况，若可以联网了，则加载之前存储的链接。\n\n   上面的逻辑代码就不贴了，没有参考意义，反正就是在上面第四点的webView方法中进行处理。这里我放一个判断网络状态的项目地址[Reachability.swift-github](https://github.com/ashleymills/Reachability.swift)\n\n7. 即时通讯\n\n   ##### 问题：\n\n   由于我们的项目是做教育类的，需要用户之间可以进行类似于微信那样的通信功能，并且可以进行实时音、视频通话功能。\n\n   ##### 需求：\n\n   实现上述功能，还要尽可能的保证服务质量\n\n   ##### 解决思路：\n\n   我想到的方法是集成第三方的服务，目前用的是[容联云服务](http://www.yuntongxun.com/)。还没做完，未完待续。  \n\n\n","slug":"iOS-webApp客户端开发小记","published":1,"updated":"2016-08-09T08:39:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bg0008hnh1077wmhu8","content":"<blockquote>\n<p>这篇文章，现在是我写的第二遍，因为就在我刚才准备commit的时候，手贱点了sync，结果白写了一个小时。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>暑期以来我一直在一家物联网公司实习，刚来的时候开发了一款物联网云服务的iOS客户端，也许你会问为啥一个实习生刚来就开发产品，主要原因是我能力超强，还有一个很小的原因是全公司就我用Mac，并且会点点Swift，哈哈。</p>\n<p>刚来是开发一款物联网应用的iOS客户端（<a href=\"https://itunes.apple.com/us/app/iotcloud/id1045360550?l=zh&amp;ls=1&amp;mt=8\" target=\"_blank\" rel=\"external\">1.0版本</a>现在已上线），后期开发了一段时间这个产品的后台，主要是MongoDB和Java Web。之后，我又被叫去开发另一款云教育应用的iOS客户端和Android客户端。这篇文章主要介绍的是开发这两款iOS应用的总结，后期会总结一下在Android上实现同样功能的经验。</p>\n<p>我们公司的产品都是前端是采用HTML5的，这样每个平台的客户端只要套个UIWebView的壳子就好。但是问题不是全部网页都是从服务器端加载的，因为不能保证网络一直畅通，以及服务器没有错，要是网络不通，那整个应用就是一片空白，这样的体验太差了。</p>\n<p>所以我们的想法是欢迎页、登陆页都是本地的资源，这样应用打开，不管服务器啥情况，用户都是可以看见东西的。</p>\n<hr>\n<h2 id=\"应用逻辑\"><a href=\"#应用逻辑\" class=\"headerlink\" title=\"应用逻辑\"></a>应用逻辑</h2><ol>\n<li><p>打开应用，首先加载welcome.htm(原本是jsp文件，在Android平台上可以加载，但是Safari不行，所以直接改了后缀)，welcome.htm的js会从sqlite中取出用户名和密码，若不为空，则直接表单提交登录；如为空，则跳转到本地login.htm界面进行登录</p>\n</li>\n<li><p>用户在login.htm进行登录，若登录成功，则其中的js文件会将用户名、密码存入sqlite中</p>\n</li>\n<li><p>应用中有二维码扫描功能，若点击该按钮，则跳转回本地，使用相机进行二维码扫描，然后将结果又返回给网页应用</p>\n</li>\n<li><p>应用中有退出功能，若点击该按钮，则跳转回本地login.htm界面，其中的js会清空sqlite中数据</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"遇到的问题以及解决方法\"><a href=\"#遇到的问题以及解决方法\" class=\"headerlink\" title=\"遇到的问题以及解决方法\"></a>遇到的问题以及解决方法</h2><ol>\n<li><p>Xcode7导入本地资源<br>之前用的是Xcode6，项目下面有一个Supporting Files文件夹，将本地资源导入后都在此文件夹中，升级到Xcode7后，没有这个文件夹了，可以直接将本地资源直接导入项目中。</p>\n</li>\n<li><p>iOS9网络连接问题<br>刚开始用Xcode6开发第一项目的时候，UIWebView联网是没有问题的，第二个项目使用的是Xcode7和iOS9，就连打开baidu都无法实现，控制台会报错:<br>当时在Stack Overflow找到原因了:</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Application</span> <span class=\"type\">Transport</span> <span class=\"type\">Security</span> has blocked a cleartext <span class=\"type\">HTTP</span> (http:<span class=\"comment\">//) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.</span></div></pre></td></tr></table></figure>\n<p> <strong>在iOS9 beta1中，苹果将原http协议改成了https协议，使用 TLS1.2 SSL加密请求数据。</strong><br>解决方法就是：在info.plist中添加</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;<span class=\"type\">NSAppTransportSecurity</span>&lt;/key&gt;</div><div class=\"line\">&lt;dict&gt;&lt;key&gt;<span class=\"type\">NSAllowsArbitraryLoads</span>&lt;/key&gt;&lt;<span class=\"literal\">true</span>/&gt;&lt;/dict&gt;</div></pre></td></tr></table></figure>\n<p> 后来在<a href=\"http://www.infoq.com/cn/articles/wechat-ios9-adaptation\" target=\"_blank\" rel=\"external\">《微信在适配iOS9上遇到的问题和解决方案》</a>也看到了该问题的解决方法。</p>\n</li>\n<li><p>UIWebView加载本地资源</p>\n<p> 我做的项目中，主要是UIWebView加载本地的网页，代码如下：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(<span class=\"string\">\"index\"</span>, ofType: <span class=\"string\">\"htm\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> urlobj = <span class=\"type\">NSURL</span>.fileURLWithPath(path!)</div><div class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: urlobj)</div><div class=\"line\">myWebView.loadRequest(request)</div></pre></td></tr></table></figure>\n</li>\n<li><p>从网页跳转回本地</p>\n<p> 前面说到项目的两个功能：一是网页调用本地二维码；二是在网页里退出，本地能清除登录数据。</p>\n<p> 我的解决思路是：web应用中，需要跳转本地的功能，都把链接写成固定格式的</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"m://erweima.com/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link_btn link_btn_t\"</span>&gt;</span>二维码扫描<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> UIWebView中有一个方法，可以在链接地址改变时触发，我就是利用该方法，判断UIWebView即将要跳转的链接地址，如果是事先确定的，则执行本地相关操作，如上所述的二维码操作：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">webView</span><span class=\"params\">(webView: UIWebView,shouldStartLoadWithRequest request: NSURLRequest,navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> rurl = request.<span class=\"type\">URL</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(rurl!.scheme == <span class=\"string\">\"m\"</span> &amp;&amp; rurl!.host == <span class=\"string\">\"erweima.com\"</span>) &#123; </div><div class=\"line\">    <span class=\"comment\">//启动二维码扫描</span></div><div class=\"line\">    tiaozhuan()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//返回true就会跳转新地址</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>二维码扫描功能</p>\n<p> 这里用到一个用Swift2和AVFoundation写的二维码扫描的类<a href=\"https://github.com/Recursion0210/QRCode\" target=\"_blank\" rel=\"external\">github</a>，类里用的是UIStoryBoard进行跳转的，我稍微改动了一下，用方法调用的：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tiaozhuan</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> scannerVC:<span class=\"type\">ScannerViewController</span> = <span class=\"type\">ScannerViewController</span>()</div><div class=\"line\">    scannerVC.delegate = <span class=\"keyword\">self</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.presentViewController(scannerVC, animated: <span class=\"literal\">false</span>, completion: <span class=\"literal\">nil</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> ViewController继承了<code>ScannerViewControllerDelegate</code>协议，实现了：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">barcodeObtained</span><span class=\"params\">(viewController:ScannerViewController, data: String)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//打印二维码扫描的结果</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(data)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>项目本来已经做完了，经理又加了一些功能，因此又来补充了。</p>\n<p>今天周三，是光棍节，周一做的是Android和iOS的判断网络状态的功能，周二和今天上午做的是Android的即时通讯和实时音视频功能，今天下午做的是iOS的即时通讯功能，由于SDK用的是OC，而我用的是Swift，所以到现在也没搞出来啥，还好项目不急，所以来更新一下博客。</p>\n<p>2015-11-11 17:55</p>\n<hr>\n<ol>\n<li><p>判断网络状态</p>\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>是这样的，由于产品登陆完之后，全部内容都在UIWebView中，要是网络突然断了，就会显示无法连接界面，这样用户体验不好，如果后面能联网了，又不能返回到断网之前的界面。</p>\n<h5 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h5><p>在尽量不改后台的情况下，解决上面的问题</p>\n<h5 id=\"解决思路：\"><a href=\"#解决思路：\" class=\"headerlink\" title=\"解决思路：\"></a>解决思路：</h5><p>在每次需要跳转之前，先判断一下网络状态，若是可以联网则不处理；若不能联网，则存储当前链接，并跳转到本地一个不能联网的界面，该界面上有刷新按钮，通过不断点击刷新按钮来重复跳转该界面，然后可以判断网络情况，若可以联网了，则加载之前存储的链接。</p>\n<p>上面的逻辑代码就不贴了，没有参考意义，反正就是在上面第四点的webView方法中进行处理。这里我放一个判断网络状态的项目地址<a href=\"https://github.com/ashleymills/Reachability.swift\" target=\"_blank\" rel=\"external\">Reachability.swift-github</a></p>\n</li>\n<li><p>即时通讯</p>\n<h5 id=\"问题：-1\"><a href=\"#问题：-1\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>由于我们的项目是做教育类的，需要用户之间可以进行类似于微信那样的通信功能，并且可以进行实时音、视频通话功能。</p>\n<h5 id=\"需求：-1\"><a href=\"#需求：-1\" class=\"headerlink\" title=\"需求：\"></a>需求：</h5><p>实现上述功能，还要尽可能的保证服务质量</p>\n<h5 id=\"解决思路：-1\"><a href=\"#解决思路：-1\" class=\"headerlink\" title=\"解决思路：\"></a>解决思路：</h5><p>我想到的方法是集成第三方的服务，目前用的是<a href=\"http://www.yuntongxun.com/\" target=\"_blank\" rel=\"external\">容联云服务</a>。还没做完，未完待续。  </p>\n</li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>这篇文章，现在是我写的第二遍，因为就在我刚才准备commit的时候，手贱点了sync，结果白写了一个小时。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>暑期以来我一直在一家物联网公司实习，刚来的时候开发了一款物联网云服务的iOS客户端，也许你会问为啥一个实习生刚来就开发产品，主要原因是我能力超强，还有一个很小的原因是全公司就我用Mac，并且会点点Swift，哈哈。</p>\n<p>刚来是开发一款物联网应用的iOS客户端（<a href=\"https://itunes.apple.com/us/app/iotcloud/id1045360550?l=zh&amp;ls=1&amp;mt=8\">1.0版本</a>现在已上线），后期开发了一段时间这个产品的后台，主要是MongoDB和Java Web。之后，我又被叫去开发另一款云教育应用的iOS客户端和Android客户端。这篇文章主要介绍的是开发这两款iOS应用的总结，后期会总结一下在Android上实现同样功能的经验。</p>\n<p>我们公司的产品都是前端是采用HTML5的，这样每个平台的客户端只要套个UIWebView的壳子就好。但是问题不是全部网页都是从服务器端加载的，因为不能保证网络一直畅通，以及服务器没有错，要是网络不通，那整个应用就是一片空白，这样的体验太差了。</p>\n<p>所以我们的想法是欢迎页、登陆页都是本地的资源，这样应用打开，不管服务器啥情况，用户都是可以看见东西的。</p>\n<hr>\n<h2 id=\"应用逻辑\"><a href=\"#应用逻辑\" class=\"headerlink\" title=\"应用逻辑\"></a>应用逻辑</h2><ol>\n<li><p>打开应用，首先加载welcome.htm(原本是jsp文件，在Android平台上可以加载，但是Safari不行，所以直接改了后缀)，welcome.htm的js会从sqlite中取出用户名和密码，若不为空，则直接表单提交登录；如为空，则跳转到本地login.htm界面进行登录</p>\n</li>\n<li><p>用户在login.htm进行登录，若登录成功，则其中的js文件会将用户名、密码存入sqlite中</p>\n</li>\n<li><p>应用中有二维码扫描功能，若点击该按钮，则跳转回本地，使用相机进行二维码扫描，然后将结果又返回给网页应用</p>\n</li>\n<li><p>应用中有退出功能，若点击该按钮，则跳转回本地login.htm界面，其中的js会清空sqlite中数据</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"遇到的问题以及解决方法\"><a href=\"#遇到的问题以及解决方法\" class=\"headerlink\" title=\"遇到的问题以及解决方法\"></a>遇到的问题以及解决方法</h2><ol>\n<li><p>Xcode7导入本地资源<br>之前用的是Xcode6，项目下面有一个Supporting Files文件夹，将本地资源导入后都在此文件夹中，升级到Xcode7后，没有这个文件夹了，可以直接将本地资源直接导入项目中。</p>\n</li>\n<li><p>iOS9网络连接问题<br>刚开始用Xcode6开发第一项目的时候，UIWebView联网是没有问题的，第二个项目使用的是Xcode7和iOS9，就连打开baidu都无法实现，控制台会报错:<br>当时在Stack Overflow找到原因了:</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Application</span> <span class=\"type\">Transport</span> <span class=\"type\">Security</span> has blocked a cleartext <span class=\"type\">HTTP</span> (http:<span class=\"comment\">//) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.</span></div></pre></td></tr></table></figure>\n<p> <strong>在iOS9 beta1中，苹果将原http协议改成了https协议，使用 TLS1.2 SSL加密请求数据。</strong><br>解决方法就是：在info.plist中添加</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;<span class=\"type\">NSAppTransportSecurity</span>&lt;/key&gt;</div><div class=\"line\">&lt;dict&gt;&lt;key&gt;<span class=\"type\">NSAllowsArbitraryLoads</span>&lt;/key&gt;&lt;<span class=\"literal\">true</span>/&gt;&lt;/dict&gt;</div></pre></td></tr></table></figure>\n<p> 后来在<a href=\"http://www.infoq.com/cn/articles/wechat-ios9-adaptation\">《微信在适配iOS9上遇到的问题和解决方案》</a>也看到了该问题的解决方法。</p>\n</li>\n<li><p>UIWebView加载本地资源</p>\n<p> 我做的项目中，主要是UIWebView加载本地的网页，代码如下：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(<span class=\"string\">\"index\"</span>, ofType: <span class=\"string\">\"htm\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> urlobj = <span class=\"type\">NSURL</span>.fileURLWithPath(path!)</div><div class=\"line\"><span class=\"keyword\">let</span> request = <span class=\"type\">NSURLRequest</span>(<span class=\"type\">URL</span>: urlobj)</div><div class=\"line\">myWebView.loadRequest(request)</div></pre></td></tr></table></figure>\n</li>\n<li><p>从网页跳转回本地</p>\n<p> 前面说到项目的两个功能：一是网页调用本地二维码；二是在网页里退出，本地能清除登录数据。</p>\n<p> 我的解决思路是：web应用中，需要跳转本地的功能，都把链接写成固定格式的</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"m://erweima.com/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link_btn link_btn_t\"</span>&gt;</span>二维码扫描<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> UIWebView中有一个方法，可以在链接地址改变时触发，我就是利用该方法，判断UIWebView即将要跳转的链接地址，如果是事先确定的，则执行本地相关操作，如上所述的二维码操作：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">webView</span><span class=\"params\">(webView: UIWebView,shouldStartLoadWithRequest request: NSURLRequest,navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> rurl = request.<span class=\"type\">URL</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(rurl!.scheme == <span class=\"string\">\"m\"</span> &amp;&amp; rurl!.host == <span class=\"string\">\"erweima.com\"</span>) &#123; </div><div class=\"line\">    <span class=\"comment\">//启动二维码扫描</span></div><div class=\"line\">    tiaozhuan()</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//返回true就会跳转新地址</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>二维码扫描功能</p>\n<p> 这里用到一个用Swift2和AVFoundation写的二维码扫描的类<a href=\"https://github.com/Recursion0210/QRCode\">github</a>，类里用的是UIStoryBoard进行跳转的，我稍微改动了一下，用方法调用的：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tiaozhuan</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> scannerVC:<span class=\"type\">ScannerViewController</span> = <span class=\"type\">ScannerViewController</span>()</div><div class=\"line\">    scannerVC.delegate = <span class=\"keyword\">self</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.presentViewController(scannerVC, animated: <span class=\"literal\">false</span>, completion: <span class=\"literal\">nil</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> ViewController继承了<code>ScannerViewControllerDelegate</code>协议，实现了：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">barcodeObtained</span><span class=\"params\">(viewController:ScannerViewController, data: String)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//打印二维码扫描的结果</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(data)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>项目本来已经做完了，经理又加了一些功能，因此又来补充了。</p>\n<p>今天周三，是光棍节，周一做的是Android和iOS的判断网络状态的功能，周二和今天上午做的是Android的即时通讯和实时音视频功能，今天下午做的是iOS的即时通讯功能，由于SDK用的是OC，而我用的是Swift，所以到现在也没搞出来啥，还好项目不急，所以来更新一下博客。</p>\n<p>2015-11-11 17:55</p>\n<hr>\n<ol>\n<li><p>判断网络状态</p>\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>是这样的，由于产品登陆完之后，全部内容都在UIWebView中，要是网络突然断了，就会显示无法连接界面，这样用户体验不好，如果后面能联网了，又不能返回到断网之前的界面。</p>\n<h5 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h5><p>在尽量不改后台的情况下，解决上面的问题</p>\n<h5 id=\"解决思路：\"><a href=\"#解决思路：\" class=\"headerlink\" title=\"解决思路：\"></a>解决思路：</h5><p>在每次需要跳转之前，先判断一下网络状态，若是可以联网则不处理；若不能联网，则存储当前链接，并跳转到本地一个不能联网的界面，该界面上有刷新按钮，通过不断点击刷新按钮来重复跳转该界面，然后可以判断网络情况，若可以联网了，则加载之前存储的链接。</p>\n<p>上面的逻辑代码就不贴了，没有参考意义，反正就是在上面第四点的webView方法中进行处理。这里我放一个判断网络状态的项目地址<a href=\"https://github.com/ashleymills/Reachability.swift\">Reachability.swift-github</a></p>\n</li>\n<li><p>即时通讯</p>\n<h5 id=\"问题：-1\"><a href=\"#问题：-1\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>由于我们的项目是做教育类的，需要用户之间可以进行类似于微信那样的通信功能，并且可以进行实时音、视频通话功能。</p>\n<h5 id=\"需求：-1\"><a href=\"#需求：-1\" class=\"headerlink\" title=\"需求：\"></a>需求：</h5><p>实现上述功能，还要尽可能的保证服务质量</p>\n<h5 id=\"解决思路：-1\"><a href=\"#解决思路：-1\" class=\"headerlink\" title=\"解决思路：\"></a>解决思路：</h5><p>我想到的方法是集成第三方的服务，目前用的是<a href=\"http://www.yuntongxun.com/\">容联云服务</a>。还没做完，未完待续。  </p>\n</li>\n</ol>\n"},{"title":"iOS Swift Xcode7 的 APNS 使用","date":"2015-12-02T12:55:15.000Z","_content":"# iOS9-Swift2-Xcode7的APNS使用\n\n## 前言\n\n最近在开发基于阿里百川的即时通信功能，其中对于iOS平台的消息推送是要使用苹果的APNS服务的，对于这个服务不太了解的同学，可以看[apple开发者文档](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html?spm=0.0.0.0.EUOBVe)学习一下。\n\n## 总结一下使用APNS推送的步骤：\n\n1.iOS应用需要向APNS系统申请DeviceToken\n\n2.应用需要向应用服务器上传DeviceToken\n\n3.服务器通过DeviceToken向APNS系统推送消息\n\n4.APNS系统往用户的手机推送消息\n\n## 实现步骤：\n\n### 1.申请DeviceToken\n\n在AppDelegate.swift中的application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool中添加以下函数向系统申请DeviceToken\n\n```swift\nUIApplication.sharedApplication().registerUserNotificationSettings(UIUserNotificationSettings(forTypes: [UIUserNotificationType.Sound , UIUserNotificationType.Alert , UIUserNotificationType.Badge], categories: nil))\nUIApplication.sharedApplication().registerForRemoteNotifications()\n```\n\n### 2.获取DeviceToken\n\n在AppDelegate.swift中添加下面这个回调函数，用于获取DeviceToken\n\n```swift\nfunc application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\n    let token:String = deviceToken.description.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: \"<>\"))\n    print(\"token==\\(token)\")\n    //将token发送到服务器\n}\n```\n\n使用阿里百川的SDK不需要将DeviceToken发送到服务器，IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK\n\n### 3.获取APNS推送证书\n\n在iOSAppIDs你的应用里的证书里，点击edit，打开Push Notifications功能，然后会生成两个证书。Production SSL Certificate和Development SSL Certificate。前面是生产环境推送证书，后面是沙箱环境推送证书。将其下载下来，并安装到钥匙串中。\n\n在钥匙串应用找到这两个证书，右键点击导出，生产p12格式（阿里百川需要p12格式)，在将其上传到阿里百川的控制台。\n\n### 4.测试消息推送\n使用[该工具](http://pan.baidu.com/s/1ntngmcL),使用你上传的证书，向设备控制台打印出的DeviceToken，发送一条Push，确认是否可以收到Push。\n\n需要注意的是：项目的证书要和推送证书的类型一致，若是Disturbution证书就得使用Production SSL Certificate，若是Developer证书就得使用Development SSL Certificate。\n\n\n","source":"_posts/iOS9-Swift2-Xcode7的APNS使用.md","raw":"---\ntitle: iOS Swift Xcode7 的 APNS 使用\ndate: 2015-12-02 20:55:15\ntags:\n- iOS\n- Swift\n- APNS推送\ncategories:\n- 开发\n- iOS\n---\n# iOS9-Swift2-Xcode7的APNS使用\n\n## 前言\n\n最近在开发基于阿里百川的即时通信功能，其中对于iOS平台的消息推送是要使用苹果的APNS服务的，对于这个服务不太了解的同学，可以看[apple开发者文档](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html?spm=0.0.0.0.EUOBVe)学习一下。\n\n## 总结一下使用APNS推送的步骤：\n\n1.iOS应用需要向APNS系统申请DeviceToken\n\n2.应用需要向应用服务器上传DeviceToken\n\n3.服务器通过DeviceToken向APNS系统推送消息\n\n4.APNS系统往用户的手机推送消息\n\n## 实现步骤：\n\n### 1.申请DeviceToken\n\n在AppDelegate.swift中的application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool中添加以下函数向系统申请DeviceToken\n\n```swift\nUIApplication.sharedApplication().registerUserNotificationSettings(UIUserNotificationSettings(forTypes: [UIUserNotificationType.Sound , UIUserNotificationType.Alert , UIUserNotificationType.Badge], categories: nil))\nUIApplication.sharedApplication().registerForRemoteNotifications()\n```\n\n### 2.获取DeviceToken\n\n在AppDelegate.swift中添加下面这个回调函数，用于获取DeviceToken\n\n```swift\nfunc application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\n    let token:String = deviceToken.description.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: \"<>\"))\n    print(\"token==\\(token)\")\n    //将token发送到服务器\n}\n```\n\n使用阿里百川的SDK不需要将DeviceToken发送到服务器，IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK\n\n### 3.获取APNS推送证书\n\n在iOSAppIDs你的应用里的证书里，点击edit，打开Push Notifications功能，然后会生成两个证书。Production SSL Certificate和Development SSL Certificate。前面是生产环境推送证书，后面是沙箱环境推送证书。将其下载下来，并安装到钥匙串中。\n\n在钥匙串应用找到这两个证书，右键点击导出，生产p12格式（阿里百川需要p12格式)，在将其上传到阿里百川的控制台。\n\n### 4.测试消息推送\n使用[该工具](http://pan.baidu.com/s/1ntngmcL),使用你上传的证书，向设备控制台打印出的DeviceToken，发送一条Push，确认是否可以收到Push。\n\n需要注意的是：项目的证书要和推送证书的类型一致，若是Disturbution证书就得使用Production SSL Certificate，若是Developer证书就得使用Development SSL Certificate。\n\n\n","slug":"iOS9-Swift2-Xcode7的APNS使用","published":1,"updated":"2016-10-12T14:19:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bk000ahnh1vnavpzlz","content":"<h1 id=\"iOS9-Swift2-Xcode7的APNS使用\"><a href=\"#iOS9-Swift2-Xcode7的APNS使用\" class=\"headerlink\" title=\"iOS9-Swift2-Xcode7的APNS使用\"></a>iOS9-Swift2-Xcode7的APNS使用</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在开发基于阿里百川的即时通信功能，其中对于iOS平台的消息推送是要使用苹果的APNS服务的，对于这个服务不太了解的同学，可以看<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html?spm=0.0.0.0.EUOBVe\" target=\"_blank\" rel=\"external\">apple开发者文档</a>学习一下。</p>\n<h2 id=\"总结一下使用APNS推送的步骤：\"><a href=\"#总结一下使用APNS推送的步骤：\" class=\"headerlink\" title=\"总结一下使用APNS推送的步骤：\"></a>总结一下使用APNS推送的步骤：</h2><p>1.iOS应用需要向APNS系统申请DeviceToken</p>\n<p>2.应用需要向应用服务器上传DeviceToken</p>\n<p>3.服务器通过DeviceToken向APNS系统推送消息</p>\n<p>4.APNS系统往用户的手机推送消息</p>\n<h2 id=\"实现步骤：\"><a href=\"#实现步骤：\" class=\"headerlink\" title=\"实现步骤：\"></a>实现步骤：</h2><h3 id=\"1-申请DeviceToken\"><a href=\"#1-申请DeviceToken\" class=\"headerlink\" title=\"1.申请DeviceToken\"></a>1.申请DeviceToken</h3><p>在AppDelegate.swift中的application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool中添加以下函数向系统申请DeviceToken</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerUserNotificationSettings(<span class=\"type\">UIUserNotificationSettings</span>(forTypes: [<span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Sound</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Alert</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Badge</span>], categories: <span class=\"literal\">nil</span>))</div><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerForRemoteNotifications()</div></pre></td></tr></table></figure>\n<h3 id=\"2-获取DeviceToken\"><a href=\"#2-获取DeviceToken\" class=\"headerlink\" title=\"2.获取DeviceToken\"></a>2.获取DeviceToken</h3><p>在AppDelegate.swift中添加下面这个回调函数，用于获取DeviceToken</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">application</span><span class=\"params\">(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> token:<span class=\"type\">String</span> = deviceToken.description.stringByTrimmingCharactersInSet(<span class=\"type\">NSCharacterSet</span>(charactersInString: <span class=\"string\">\"&lt;&gt;\"</span>))</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"token==<span class=\"subst\">\\(token)</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//将token发送到服务器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用阿里百川的SDK不需要将DeviceToken发送到服务器，IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK</p>\n<h3 id=\"3-获取APNS推送证书\"><a href=\"#3-获取APNS推送证书\" class=\"headerlink\" title=\"3.获取APNS推送证书\"></a>3.获取APNS推送证书</h3><p>在iOSAppIDs你的应用里的证书里，点击edit，打开Push Notifications功能，然后会生成两个证书。Production SSL Certificate和Development SSL Certificate。前面是生产环境推送证书，后面是沙箱环境推送证书。将其下载下来，并安装到钥匙串中。</p>\n<p>在钥匙串应用找到这两个证书，右键点击导出，生产p12格式（阿里百川需要p12格式)，在将其上传到阿里百川的控制台。</p>\n<h3 id=\"4-测试消息推送\"><a href=\"#4-测试消息推送\" class=\"headerlink\" title=\"4.测试消息推送\"></a>4.测试消息推送</h3><p>使用<a href=\"http://pan.baidu.com/s/1ntngmcL\" target=\"_blank\" rel=\"external\">该工具</a>,使用你上传的证书，向设备控制台打印出的DeviceToken，发送一条Push，确认是否可以收到Push。</p>\n<p>需要注意的是：项目的证书要和推送证书的类型一致，若是Disturbution证书就得使用Production SSL Certificate，若是Developer证书就得使用Development SSL Certificate。</p>\n","excerpt":"","more":"<h1 id=\"iOS9-Swift2-Xcode7的APNS使用\"><a href=\"#iOS9-Swift2-Xcode7的APNS使用\" class=\"headerlink\" title=\"iOS9-Swift2-Xcode7的APNS使用\"></a>iOS9-Swift2-Xcode7的APNS使用</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在开发基于阿里百川的即时通信功能，其中对于iOS平台的消息推送是要使用苹果的APNS服务的，对于这个服务不太了解的同学，可以看<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html?spm=0.0.0.0.EUOBVe\">apple开发者文档</a>学习一下。</p>\n<h2 id=\"总结一下使用APNS推送的步骤：\"><a href=\"#总结一下使用APNS推送的步骤：\" class=\"headerlink\" title=\"总结一下使用APNS推送的步骤：\"></a>总结一下使用APNS推送的步骤：</h2><p>1.iOS应用需要向APNS系统申请DeviceToken</p>\n<p>2.应用需要向应用服务器上传DeviceToken</p>\n<p>3.服务器通过DeviceToken向APNS系统推送消息</p>\n<p>4.APNS系统往用户的手机推送消息</p>\n<h2 id=\"实现步骤：\"><a href=\"#实现步骤：\" class=\"headerlink\" title=\"实现步骤：\"></a>实现步骤：</h2><h3 id=\"1-申请DeviceToken\"><a href=\"#1-申请DeviceToken\" class=\"headerlink\" title=\"1.申请DeviceToken\"></a>1.申请DeviceToken</h3><p>在AppDelegate.swift中的application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool中添加以下函数向系统申请DeviceToken</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerUserNotificationSettings(<span class=\"type\">UIUserNotificationSettings</span>(forTypes: [<span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Sound</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Alert</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Badge</span>], categories: <span class=\"literal\">nil</span>))</div><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerForRemoteNotifications()</div></pre></td></tr></table></figure>\n<h3 id=\"2-获取DeviceToken\"><a href=\"#2-获取DeviceToken\" class=\"headerlink\" title=\"2.获取DeviceToken\"></a>2.获取DeviceToken</h3><p>在AppDelegate.swift中添加下面这个回调函数，用于获取DeviceToken</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">application</span><span class=\"params\">(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> token:<span class=\"type\">String</span> = deviceToken.description.stringByTrimmingCharactersInSet(<span class=\"type\">NSCharacterSet</span>(charactersInString: <span class=\"string\">\"&lt;&gt;\"</span>))</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"token==<span class=\"subst\">\\(token)</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//将token发送到服务器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用阿里百川的SDK不需要将DeviceToken发送到服务器，IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK</p>\n<h3 id=\"3-获取APNS推送证书\"><a href=\"#3-获取APNS推送证书\" class=\"headerlink\" title=\"3.获取APNS推送证书\"></a>3.获取APNS推送证书</h3><p>在iOSAppIDs你的应用里的证书里，点击edit，打开Push Notifications功能，然后会生成两个证书。Production SSL Certificate和Development SSL Certificate。前面是生产环境推送证书，后面是沙箱环境推送证书。将其下载下来，并安装到钥匙串中。</p>\n<p>在钥匙串应用找到这两个证书，右键点击导出，生产p12格式（阿里百川需要p12格式)，在将其上传到阿里百川的控制台。</p>\n<h3 id=\"4-测试消息推送\"><a href=\"#4-测试消息推送\" class=\"headerlink\" title=\"4.测试消息推送\"></a>4.测试消息推送</h3><p>使用<a href=\"http://pan.baidu.com/s/1ntngmcL\">该工具</a>,使用你上传的证书，向设备控制台打印出的DeviceToken，发送一条Push，确认是否可以收到Push。</p>\n<p>需要注意的是：项目的证书要和推送证书的类型一致，若是Disturbution证书就得使用Production SSL Certificate，若是Developer证书就得使用Development SSL Certificate。</p>\n"},{"title":"iOS10 Today Extension 开发小结 ","date":"2016-10-11T09:30:20.000Z","_content":"\n## 背景\n\n9.15号中秋节那天发布了[师大助手App](https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&ls=1&mt=8)后，就在想还加点什么功能。后来想到了可以在 Today Widgets 里面加一个今日课程，于是就开始动手做了。先给大家看一下最终效果：\n![最终效果](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_1)\n一开始开发的时候，还是 Xcode7 和 Swift2 ，等到准备上架审核的时候，Xcode8 正式版发布了，然后就做了 Swift3 迁移和 iOS10 适配。\n\n## 步骤\n\n### Part1 基本搭建 \n\n1. 新建 iOS Project ，这就不用说了哈\n2. 新建一个 Target ，选择 Today-Extension ，Target名字就设置为 TodayWidget\n3. 在 MainInterface.storyboard 画 UI ，然后运行就可以看到效果了，由于我是显示课程，就在里面添加了一个 UITableView ，并且增加了两个 Prototype Cell 用于自定义Cell\n\n\n### Part2 依赖项目引入\n\n1. 在 Podfile 项目中新建一个target，并加入需要引入的项目，代码如下：\n    ``` swift\n    target 'TodayWidget' do\n      pod 'YYModel'\n    end\n    ```\n2. 在 TodayWidget Target 下面新建一个桥接头文件，这里为省去设置的头文件的方法，可以直接新建oc文件，xcode会问你要不要自动添加一个桥接头文件，建好之后删除oc文件即可\n3. 接下来在测试过程中，我们就可以愉快的通过 Cocoapods 使用第三方库了，但是提交代码到AppStore就会报如下的错误了：\n    ![上传报错](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_2)\n4. 解决targets不能使用Cocoapods的方法是：在TodayWidget -> Build Phases -> New Run Script Phase ，再添加如下代码\n    ``` swift\n    cd \"${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/\"\n    if [[ -d \"Frameworks\" ]]; then\n    rm -fr Frameworks\n    fi\n    ```\n5. 这样就可以顺利提交到AppStore了\n\n### Part3 TodayExtension Target 和 main Target 之间数据共享\n\n在讲如何具体实现数据共享之前，需要先打开两个Target -> Capabilities -> App Groups，只有在同一个Groups内的target才能共同读写数据。\n![设置Group](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_3.png)\n有两种解决方式：UserDefaults 和 FileManager \n\n#### Solution1  UserDefaults方式\n\nUserDefaults Apple 官方文档：\n> The NSUserDefaults class provides a programmatic interface for interacting with the defaults system. The defaults system allows an application to customize its behavior to match a user’s preferences. For example, you can allow users to determine what units of measurement your application displays or how often documents are automatically saved. Applications record such preferences by assigning values to a set of parameters in a user’s defaults database. The parameters are referred to as defaults since they’re commonly used to determine an application’s default state at startup or the way it acts by default.\n\n在本App中，我需要将当前是第几教学周在 targets 间传递，数据量很小，于是采用了 UserDefaults 方法，代码如下：\n    ``` swift\n    // 写入\n    UserDefaults.init(suiteName: \"group.com.huangshuai.xxx\")?.set(week, forKey: \"currentWeek\")\n    // 读取\n    let currentWeek = UserDefaults.init(suiteName: \"group.com.huangshuai.xxx\")?.object(forKey: \"currentWeek\") as? Int ?? 1\n    ```\n注：这里是 group 间的 UserDefaults 数据共享，而不是平常的单一target下面的 UserDefaults 使用：\n    ``` swift \n    // 写入\n    UserDefaults.standard.set(false, forKey: \"isFirstLaunch\")\n    // 读取\n    let isFirstLaunch = UserDefaults.standard.object(forKey: \"isFirstLaunch\") as? Bool ?? true\n    ```\n\n#### Solution2  FileManager方式\n\nFileManager Apple 官方文档：\n> An FileManager object lets you examine the contents of the file system and make changes to it. The FileManager class provides convenient access to a shared file manager object that is suitable for most types of file-related manipulations. A file manager object is typically your primary mode of interaction with the file system. You use it to locate, create, copy, and move files and directories. You also use it to get information about a file or directory or change some of its attributes.\n\n在本App中，我需要将所有的课表数据在 targets 间传递，数据量较大，于是采用了 FileManager 方法，代码如下：\n\n``` swift\nlet name = \"course.plist\"\nlet groupPath = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \"group.com.huangshuai.xxx\")\nlet groupPathString = groupPath!.absoluteString.replacingOccurrences(of:\"file:///private\", with: \"\").replacingOccurrences(of:\"file:///\", with: \"\")\ndestPath = (groupPathString as NSString).appendingPathComponent(name).characters.split{$0 == \".\"}.map(String.init).first!\n// 写入\nlet dic = [:] as NSDictionary\ndic.write(toFile: destPath, atomically: true)\n// 读取\nlet dict = NSDictionary(contentsOfFile: destPath) \n```\n    \n### Part4 适配 iOS10 Widgets 新特性\n\n#### 处理 Widgets 展开/折叠的情况\n在 iOS10 之前，Widgets 的高度可以自定义设置，但是在 iOS10 中，Widgets 的 activeDisplayMode 有两种状态：.expanded 和 .compact。 需要根据当前用户的选择来处理 Widgets 的高度，代码如下：\n\n``` swift \n@available(iOSApplicationExtension 10.0, *)\nfunc widgetActiveDisplayModeDidChange(_ activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize) {\n    if activeDisplayMode == .compact {\n        self.preferredContentSize = maxSize\n    } else {\n        self.preferredContentSize = self.tableView.contentSize\n    }\n}\n```\n\n这里有个Bug：就是在 .compact 下无法设置尺寸，不管怎么设置都是 maxsize。还有待解决。\n\n#### 处理 Widgets 在 iOS9 和 iOS10 下的显示 Bug\n在 iOS10 中，Widgets 的背景是白色的，于是字体颜色设置为黑色的，但是在 iOS9 中，背景是黑色的，App 在iOS9中运行就会看不见字。感觉这是iOS10适配的Bug，为了解决这个问题，只能通过判断系统版本来设置字体颜色了，代码如下：\n\n``` swift \nif #available(iOSApplicationExtension 10.0, *) {\n    mainTextColor = UIColor.black\n} else {\n    mainTextColor = UIColor.white\n}\n```\n\n#### Bug:\n在 iOS10 下，Widgets 的 displayBundleName 设置也不起作用了，不管怎么设置只跟 mainTarget 的displayBundleName 一致，还未找到解决方法。\n\n## 番外篇\n\n女票说她们学校课程很多，每天看课表不方便，在国庆节陪她过生日的时候，现场撸了一个App只供她使用，她每次不用解锁直接下拉Widgets就可以看到今日课程，她开心的不得了还发了朋友圈炫耀一番。哈哈，女票是第一生产力☺️\n\n说到这，本文也就结束了，以上提到的Bug，我会在解决之后再来更新代码。\n\n","source":"_posts/iOS10-Today-Extension-开发小结.md","raw":"---\ntitle: 'iOS10 Today Extension 开发小结 '\ndate: 2016-10-11 17:30:20\ntags: \n- Swift \n- Alamofire \n- Today-Extension\ncategories:\n- 开发\n- iOS\n---\n\n## 背景\n\n9.15号中秋节那天发布了[师大助手App](https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&ls=1&mt=8)后，就在想还加点什么功能。后来想到了可以在 Today Widgets 里面加一个今日课程，于是就开始动手做了。先给大家看一下最终效果：\n![最终效果](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_1)\n一开始开发的时候，还是 Xcode7 和 Swift2 ，等到准备上架审核的时候，Xcode8 正式版发布了，然后就做了 Swift3 迁移和 iOS10 适配。\n\n## 步骤\n\n### Part1 基本搭建 \n\n1. 新建 iOS Project ，这就不用说了哈\n2. 新建一个 Target ，选择 Today-Extension ，Target名字就设置为 TodayWidget\n3. 在 MainInterface.storyboard 画 UI ，然后运行就可以看到效果了，由于我是显示课程，就在里面添加了一个 UITableView ，并且增加了两个 Prototype Cell 用于自定义Cell\n\n\n### Part2 依赖项目引入\n\n1. 在 Podfile 项目中新建一个target，并加入需要引入的项目，代码如下：\n    ``` swift\n    target 'TodayWidget' do\n      pod 'YYModel'\n    end\n    ```\n2. 在 TodayWidget Target 下面新建一个桥接头文件，这里为省去设置的头文件的方法，可以直接新建oc文件，xcode会问你要不要自动添加一个桥接头文件，建好之后删除oc文件即可\n3. 接下来在测试过程中，我们就可以愉快的通过 Cocoapods 使用第三方库了，但是提交代码到AppStore就会报如下的错误了：\n    ![上传报错](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_2)\n4. 解决targets不能使用Cocoapods的方法是：在TodayWidget -> Build Phases -> New Run Script Phase ，再添加如下代码\n    ``` swift\n    cd \"${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/\"\n    if [[ -d \"Frameworks\" ]]; then\n    rm -fr Frameworks\n    fi\n    ```\n5. 这样就可以顺利提交到AppStore了\n\n### Part3 TodayExtension Target 和 main Target 之间数据共享\n\n在讲如何具体实现数据共享之前，需要先打开两个Target -> Capabilities -> App Groups，只有在同一个Groups内的target才能共同读写数据。\n![设置Group](http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_3.png)\n有两种解决方式：UserDefaults 和 FileManager \n\n#### Solution1  UserDefaults方式\n\nUserDefaults Apple 官方文档：\n> The NSUserDefaults class provides a programmatic interface for interacting with the defaults system. The defaults system allows an application to customize its behavior to match a user’s preferences. For example, you can allow users to determine what units of measurement your application displays or how often documents are automatically saved. Applications record such preferences by assigning values to a set of parameters in a user’s defaults database. The parameters are referred to as defaults since they’re commonly used to determine an application’s default state at startup or the way it acts by default.\n\n在本App中，我需要将当前是第几教学周在 targets 间传递，数据量很小，于是采用了 UserDefaults 方法，代码如下：\n    ``` swift\n    // 写入\n    UserDefaults.init(suiteName: \"group.com.huangshuai.xxx\")?.set(week, forKey: \"currentWeek\")\n    // 读取\n    let currentWeek = UserDefaults.init(suiteName: \"group.com.huangshuai.xxx\")?.object(forKey: \"currentWeek\") as? Int ?? 1\n    ```\n注：这里是 group 间的 UserDefaults 数据共享，而不是平常的单一target下面的 UserDefaults 使用：\n    ``` swift \n    // 写入\n    UserDefaults.standard.set(false, forKey: \"isFirstLaunch\")\n    // 读取\n    let isFirstLaunch = UserDefaults.standard.object(forKey: \"isFirstLaunch\") as? Bool ?? true\n    ```\n\n#### Solution2  FileManager方式\n\nFileManager Apple 官方文档：\n> An FileManager object lets you examine the contents of the file system and make changes to it. The FileManager class provides convenient access to a shared file manager object that is suitable for most types of file-related manipulations. A file manager object is typically your primary mode of interaction with the file system. You use it to locate, create, copy, and move files and directories. You also use it to get information about a file or directory or change some of its attributes.\n\n在本App中，我需要将所有的课表数据在 targets 间传递，数据量较大，于是采用了 FileManager 方法，代码如下：\n\n``` swift\nlet name = \"course.plist\"\nlet groupPath = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \"group.com.huangshuai.xxx\")\nlet groupPathString = groupPath!.absoluteString.replacingOccurrences(of:\"file:///private\", with: \"\").replacingOccurrences(of:\"file:///\", with: \"\")\ndestPath = (groupPathString as NSString).appendingPathComponent(name).characters.split{$0 == \".\"}.map(String.init).first!\n// 写入\nlet dic = [:] as NSDictionary\ndic.write(toFile: destPath, atomically: true)\n// 读取\nlet dict = NSDictionary(contentsOfFile: destPath) \n```\n    \n### Part4 适配 iOS10 Widgets 新特性\n\n#### 处理 Widgets 展开/折叠的情况\n在 iOS10 之前，Widgets 的高度可以自定义设置，但是在 iOS10 中，Widgets 的 activeDisplayMode 有两种状态：.expanded 和 .compact。 需要根据当前用户的选择来处理 Widgets 的高度，代码如下：\n\n``` swift \n@available(iOSApplicationExtension 10.0, *)\nfunc widgetActiveDisplayModeDidChange(_ activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize) {\n    if activeDisplayMode == .compact {\n        self.preferredContentSize = maxSize\n    } else {\n        self.preferredContentSize = self.tableView.contentSize\n    }\n}\n```\n\n这里有个Bug：就是在 .compact 下无法设置尺寸，不管怎么设置都是 maxsize。还有待解决。\n\n#### 处理 Widgets 在 iOS9 和 iOS10 下的显示 Bug\n在 iOS10 中，Widgets 的背景是白色的，于是字体颜色设置为黑色的，但是在 iOS9 中，背景是黑色的，App 在iOS9中运行就会看不见字。感觉这是iOS10适配的Bug，为了解决这个问题，只能通过判断系统版本来设置字体颜色了，代码如下：\n\n``` swift \nif #available(iOSApplicationExtension 10.0, *) {\n    mainTextColor = UIColor.black\n} else {\n    mainTextColor = UIColor.white\n}\n```\n\n#### Bug:\n在 iOS10 下，Widgets 的 displayBundleName 设置也不起作用了，不管怎么设置只跟 mainTarget 的displayBundleName 一致，还未找到解决方法。\n\n## 番外篇\n\n女票说她们学校课程很多，每天看课表不方便，在国庆节陪她过生日的时候，现场撸了一个App只供她使用，她每次不用解锁直接下拉Widgets就可以看到今日课程，她开心的不得了还发了朋友圈炫耀一番。哈哈，女票是第一生产力☺️\n\n说到这，本文也就结束了，以上提到的Bug，我会在解决之后再来更新代码。\n\n","slug":"iOS10-Today-Extension-开发小结","published":1,"updated":"2016-12-29T11:44:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bn000chnh1ae5ay2on","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>9.15号中秋节那天发布了<a href=\"https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&amp;ls=1&amp;mt=8\" target=\"_blank\" rel=\"external\">师大助手App</a>后，就在想还加点什么功能。后来想到了可以在 Today Widgets 里面加一个今日课程，于是就开始动手做了。先给大家看一下最终效果：<br><img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_1\" alt=\"最终效果\"><br>一开始开发的时候，还是 Xcode7 和 Swift2 ，等到准备上架审核的时候，Xcode8 正式版发布了，然后就做了 Swift3 迁移和 iOS10 适配。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Part1-基本搭建\"><a href=\"#Part1-基本搭建\" class=\"headerlink\" title=\"Part1 基本搭建\"></a>Part1 基本搭建</h3><ol>\n<li>新建 iOS Project ，这就不用说了哈</li>\n<li>新建一个 Target ，选择 Today-Extension ，Target名字就设置为 TodayWidget</li>\n<li>在 MainInterface.storyboard 画 UI ，然后运行就可以看到效果了，由于我是显示课程，就在里面添加了一个 UITableView ，并且增加了两个 Prototype Cell 用于自定义Cell</li>\n</ol>\n<h3 id=\"Part2-依赖项目引入\"><a href=\"#Part2-依赖项目引入\" class=\"headerlink\" title=\"Part2 依赖项目引入\"></a>Part2 依赖项目引入</h3><ol>\n<li><p>在 Podfile 项目中新建一个target，并加入需要引入的项目，代码如下：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">target '<span class=\"type\">TodayWidget'</span> <span class=\"keyword\">do</span></div><div class=\"line\">  pod '<span class=\"type\">YYModel'</span></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 TodayWidget Target 下面新建一个桥接头文件，这里为省去设置的头文件的方法，可以直接新建oc文件，xcode会问你要不要自动添加一个桥接头文件，建好之后删除oc文件即可</p>\n</li>\n<li>接下来在测试过程中，我们就可以愉快的通过 Cocoapods 使用第三方库了，但是提交代码到AppStore就会报如下的错误了：<br> <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_2\" alt=\"上传报错\"></li>\n<li><p>解决targets不能使用Cocoapods的方法是：在TodayWidget -&gt; Build Phases -&gt; New Run Script Phase ，再添加如下代码</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"string\">\"$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> [[ -d <span class=\"string\">\"Frameworks\"</span> ]]; then</div><div class=\"line\">rm -fr <span class=\"type\">Frameworks</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n</li>\n<li><p>这样就可以顺利提交到AppStore了</p>\n</li>\n</ol>\n<h3 id=\"Part3-TodayExtension-Target-和-main-Target-之间数据共享\"><a href=\"#Part3-TodayExtension-Target-和-main-Target-之间数据共享\" class=\"headerlink\" title=\"Part3 TodayExtension Target 和 main Target 之间数据共享\"></a>Part3 TodayExtension Target 和 main Target 之间数据共享</h3><p>在讲如何具体实现数据共享之前，需要先打开两个Target -&gt; Capabilities -&gt; App Groups，只有在同一个Groups内的target才能共同读写数据。<br><img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_3.png\" alt=\"设置Group\"><br>有两种解决方式：UserDefaults 和 FileManager </p>\n<h4 id=\"Solution1-UserDefaults方式\"><a href=\"#Solution1-UserDefaults方式\" class=\"headerlink\" title=\"Solution1  UserDefaults方式\"></a>Solution1  UserDefaults方式</h4><p>UserDefaults Apple 官方文档：</p>\n<blockquote>\n<p>The NSUserDefaults class provides a programmatic interface for interacting with the defaults system. The defaults system allows an application to customize its behavior to match a user’s preferences. For example, you can allow users to determine what units of measurement your application displays or how often documents are automatically saved. Applications record such preferences by assigning values to a set of parameters in a user’s defaults database. The parameters are referred to as defaults since they’re commonly used to determine an application’s default state at startup or the way it acts by default.</p>\n</blockquote>\n<p>在本App中，我需要将当前是第几教学周在 targets 间传递，数据量很小，于是采用了 UserDefaults 方法，代码如下：<br>    <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入</span></div><div class=\"line\"><span class=\"type\">UserDefaults</span>.<span class=\"keyword\">init</span>(suiteName: <span class=\"string\">\"group.com.huangshuai.xxx\"</span>)?.<span class=\"keyword\">set</span>(week, forKey: <span class=\"string\">\"currentWeek\"</span>)</div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\"><span class=\"keyword\">let</span> currentWeek = <span class=\"type\">UserDefaults</span>.<span class=\"keyword\">init</span>(suiteName: <span class=\"string\">\"group.com.huangshuai.xxx\"</span>)?.object(forKey: <span class=\"string\">\"currentWeek\"</span>) <span class=\"keyword\">as</span>? <span class=\"type\">Int</span> ?? <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>注：这里是 group 间的 UserDefaults 数据共享，而不是平常的单一target下面的 UserDefaults 使用：<br>    <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入</span></div><div class=\"line\"><span class=\"type\">UserDefaults</span>.standard.<span class=\"keyword\">set</span>(<span class=\"literal\">false</span>, forKey: <span class=\"string\">\"isFirstLaunch\"</span>)</div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\"><span class=\"keyword\">let</span> isFirstLaunch = <span class=\"type\">UserDefaults</span>.standard.object(forKey: <span class=\"string\">\"isFirstLaunch\"</span>) <span class=\"keyword\">as</span>? <span class=\"type\">Bool</span> ?? <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Solution2-FileManager方式\"><a href=\"#Solution2-FileManager方式\" class=\"headerlink\" title=\"Solution2  FileManager方式\"></a>Solution2  FileManager方式</h4><p>FileManager Apple 官方文档：</p>\n<blockquote>\n<p>An FileManager object lets you examine the contents of the file system and make changes to it. The FileManager class provides convenient access to a shared file manager object that is suitable for most types of file-related manipulations. A file manager object is typically your primary mode of interaction with the file system. You use it to locate, create, copy, and move files and directories. You also use it to get information about a file or directory or change some of its attributes.</p>\n</blockquote>\n<p>在本App中，我需要将所有的课表数据在 targets 间传递，数据量较大，于是采用了 FileManager 方法，代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"course.plist\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> groupPath = <span class=\"type\">FileManager</span>.<span class=\"keyword\">default</span>.containerURL(forSecurityApplicationGroupIdentifier: <span class=\"string\">\"group.com.huangshuai.xxx\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> groupPathString = groupPath!.absoluteString.replacingOccurrences(of:<span class=\"string\">\"file:///private\"</span>, with: <span class=\"string\">\"\"</span>).replacingOccurrences(of:<span class=\"string\">\"file:///\"</span>, with: <span class=\"string\">\"\"</span>)</div><div class=\"line\">destPath = (groupPathString <span class=\"keyword\">as</span> <span class=\"type\">NSString</span>).appendingPathComponent(name).characters.<span class=\"built_in\">split</span>&#123;$<span class=\"number\">0</span> == <span class=\"string\">\".\"</span>&#125;.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>).first!</div><div class=\"line\"><span class=\"comment\">// 写入</span></div><div class=\"line\"><span class=\"keyword\">let</span> dic = [:] <span class=\"keyword\">as</span> <span class=\"type\">NSDictionary</span></div><div class=\"line\">dic.write(toFile: destPath, atomically: <span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\"><span class=\"keyword\">let</span> dict = <span class=\"type\">NSDictionary</span>(contentsOfFile: destPath)</div></pre></td></tr></table></figure>\n<h3 id=\"Part4-适配-iOS10-Widgets-新特性\"><a href=\"#Part4-适配-iOS10-Widgets-新特性\" class=\"headerlink\" title=\"Part4 适配 iOS10 Widgets 新特性\"></a>Part4 适配 iOS10 Widgets 新特性</h3><h4 id=\"处理-Widgets-展开-折叠的情况\"><a href=\"#处理-Widgets-展开-折叠的情况\" class=\"headerlink\" title=\"处理 Widgets 展开/折叠的情况\"></a>处理 Widgets 展开/折叠的情况</h4><p>在 iOS10 之前，Widgets 的高度可以自定义设置，但是在 iOS10 中，Widgets 的 activeDisplayMode 有两种状态：.expanded 和 .compact。 需要根据当前用户的选择来处理 Widgets 的高度，代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@available</span>(iOSApplicationExtension <span class=\"number\">10.0</span>, *)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">widgetActiveDisplayModeDidChange</span><span class=\"params\">(<span class=\"number\">_</span> activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> activeDisplayMode == .compact &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.preferredContentSize = maxSize</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.preferredContentSize = <span class=\"keyword\">self</span>.tableView.contentSize</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有个Bug：就是在 .compact 下无法设置尺寸，不管怎么设置都是 maxsize。还有待解决。</p>\n<h4 id=\"处理-Widgets-在-iOS9-和-iOS10-下的显示-Bug\"><a href=\"#处理-Widgets-在-iOS9-和-iOS10-下的显示-Bug\" class=\"headerlink\" title=\"处理 Widgets 在 iOS9 和 iOS10 下的显示 Bug\"></a>处理 Widgets 在 iOS9 和 iOS10 下的显示 Bug</h4><p>在 iOS10 中，Widgets 的背景是白色的，于是字体颜色设置为黑色的，但是在 iOS9 中，背景是黑色的，App 在iOS9中运行就会看不见字。感觉这是iOS10适配的Bug，为了解决这个问题，只能通过判断系统版本来设置字体颜色了，代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> #available(iOSApplicationExtension <span class=\"number\">10.0</span>, *) &#123;</div><div class=\"line\">    mainTextColor = <span class=\"type\">UIColor</span>.black</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    mainTextColor = <span class=\"type\">UIColor</span>.white</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Bug\"><a href=\"#Bug\" class=\"headerlink\" title=\"Bug:\"></a>Bug:</h4><p>在 iOS10 下，Widgets 的 displayBundleName 设置也不起作用了，不管怎么设置只跟 mainTarget 的displayBundleName 一致，还未找到解决方法。</p>\n<h2 id=\"番外篇\"><a href=\"#番外篇\" class=\"headerlink\" title=\"番外篇\"></a>番外篇</h2><p>女票说她们学校课程很多，每天看课表不方便，在国庆节陪她过生日的时候，现场撸了一个App只供她使用，她每次不用解锁直接下拉Widgets就可以看到今日课程，她开心的不得了还发了朋友圈炫耀一番。哈哈，女票是第一生产力☺️</p>\n<p>说到这，本文也就结束了，以上提到的Bug，我会在解决之后再来更新代码。</p>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>9.15号中秋节那天发布了<a href=\"https://itunes.apple.com/us/app/shi-da-zhu-shou-hui-shi-fan/id1150983683?l=zh&amp;ls=1&amp;mt=8\">师大助手App</a>后，就在想还加点什么功能。后来想到了可以在 Today Widgets 里面加一个今日课程，于是就开始动手做了。先给大家看一下最终效果：<br><img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_1\" alt=\"最终效果\"><br>一开始开发的时候，还是 Xcode7 和 Swift2 ，等到准备上架审核的时候，Xcode8 正式版发布了，然后就做了 Swift3 迁移和 iOS10 适配。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Part1-基本搭建\"><a href=\"#Part1-基本搭建\" class=\"headerlink\" title=\"Part1 基本搭建\"></a>Part1 基本搭建</h3><ol>\n<li>新建 iOS Project ，这就不用说了哈</li>\n<li>新建一个 Target ，选择 Today-Extension ，Target名字就设置为 TodayWidget</li>\n<li>在 MainInterface.storyboard 画 UI ，然后运行就可以看到效果了，由于我是显示课程，就在里面添加了一个 UITableView ，并且增加了两个 Prototype Cell 用于自定义Cell</li>\n</ol>\n<h3 id=\"Part2-依赖项目引入\"><a href=\"#Part2-依赖项目引入\" class=\"headerlink\" title=\"Part2 依赖项目引入\"></a>Part2 依赖项目引入</h3><ol>\n<li><p>在 Podfile 项目中新建一个target，并加入需要引入的项目，代码如下：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">target '<span class=\"type\">TodayWidget'</span> <span class=\"keyword\">do</span></div><div class=\"line\">  pod '<span class=\"type\">YYModel'</span></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 TodayWidget Target 下面新建一个桥接头文件，这里为省去设置的头文件的方法，可以直接新建oc文件，xcode会问你要不要自动添加一个桥接头文件，建好之后删除oc文件即可</p>\n</li>\n<li>接下来在测试过程中，我们就可以愉快的通过 Cocoapods 使用第三方库了，但是提交代码到AppStore就会报如下的错误了：<br> <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_2\" alt=\"上传报错\"></li>\n<li><p>解决targets不能使用Cocoapods的方法是：在TodayWidget -&gt; Build Phases -&gt; New Run Script Phase ，再添加如下代码</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"string\">\"$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> [[ -d <span class=\"string\">\"Frameworks\"</span> ]]; then</div><div class=\"line\">rm -fr <span class=\"type\">Frameworks</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n</li>\n<li><p>这样就可以顺利提交到AppStore了</p>\n</li>\n</ol>\n<h3 id=\"Part3-TodayExtension-Target-和-main-Target-之间数据共享\"><a href=\"#Part3-TodayExtension-Target-和-main-Target-之间数据共享\" class=\"headerlink\" title=\"Part3 TodayExtension Target 和 main Target 之间数据共享\"></a>Part3 TodayExtension Target 和 main Target 之间数据共享</h3><p>在讲如何具体实现数据共享之前，需要先打开两个Target -&gt; Capabilities -&gt; App Groups，只有在同一个Groups内的target才能共同读写数据。<br><img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Widgets_3.png\" alt=\"设置Group\"><br>有两种解决方式：UserDefaults 和 FileManager </p>\n<h4 id=\"Solution1-UserDefaults方式\"><a href=\"#Solution1-UserDefaults方式\" class=\"headerlink\" title=\"Solution1  UserDefaults方式\"></a>Solution1  UserDefaults方式</h4><p>UserDefaults Apple 官方文档：</p>\n<blockquote>\n<p>The NSUserDefaults class provides a programmatic interface for interacting with the defaults system. The defaults system allows an application to customize its behavior to match a user’s preferences. For example, you can allow users to determine what units of measurement your application displays or how often documents are automatically saved. Applications record such preferences by assigning values to a set of parameters in a user’s defaults database. The parameters are referred to as defaults since they’re commonly used to determine an application’s default state at startup or the way it acts by default.</p>\n</blockquote>\n<p>在本App中，我需要将当前是第几教学周在 targets 间传递，数据量很小，于是采用了 UserDefaults 方法，代码如下：<br>    <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入</span></div><div class=\"line\"><span class=\"type\">UserDefaults</span>.<span class=\"keyword\">init</span>(suiteName: <span class=\"string\">\"group.com.huangshuai.xxx\"</span>)?.<span class=\"keyword\">set</span>(week, forKey: <span class=\"string\">\"currentWeek\"</span>)</div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\"><span class=\"keyword\">let</span> currentWeek = <span class=\"type\">UserDefaults</span>.<span class=\"keyword\">init</span>(suiteName: <span class=\"string\">\"group.com.huangshuai.xxx\"</span>)?.object(forKey: <span class=\"string\">\"currentWeek\"</span>) <span class=\"keyword\">as</span>? <span class=\"type\">Int</span> ?? <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>注：这里是 group 间的 UserDefaults 数据共享，而不是平常的单一target下面的 UserDefaults 使用：<br>    <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入</span></div><div class=\"line\"><span class=\"type\">UserDefaults</span>.standard.<span class=\"keyword\">set</span>(<span class=\"literal\">false</span>, forKey: <span class=\"string\">\"isFirstLaunch\"</span>)</div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\"><span class=\"keyword\">let</span> isFirstLaunch = <span class=\"type\">UserDefaults</span>.standard.object(forKey: <span class=\"string\">\"isFirstLaunch\"</span>) <span class=\"keyword\">as</span>? <span class=\"type\">Bool</span> ?? <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Solution2-FileManager方式\"><a href=\"#Solution2-FileManager方式\" class=\"headerlink\" title=\"Solution2  FileManager方式\"></a>Solution2  FileManager方式</h4><p>FileManager Apple 官方文档：</p>\n<blockquote>\n<p>An FileManager object lets you examine the contents of the file system and make changes to it. The FileManager class provides convenient access to a shared file manager object that is suitable for most types of file-related manipulations. A file manager object is typically your primary mode of interaction with the file system. You use it to locate, create, copy, and move files and directories. You also use it to get information about a file or directory or change some of its attributes.</p>\n</blockquote>\n<p>在本App中，我需要将所有的课表数据在 targets 间传递，数据量较大，于是采用了 FileManager 方法，代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"course.plist\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> groupPath = <span class=\"type\">FileManager</span>.<span class=\"keyword\">default</span>.containerURL(forSecurityApplicationGroupIdentifier: <span class=\"string\">\"group.com.huangshuai.xxx\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> groupPathString = groupPath!.absoluteString.replacingOccurrences(of:<span class=\"string\">\"file:///private\"</span>, with: <span class=\"string\">\"\"</span>).replacingOccurrences(of:<span class=\"string\">\"file:///\"</span>, with: <span class=\"string\">\"\"</span>)</div><div class=\"line\">destPath = (groupPathString <span class=\"keyword\">as</span> <span class=\"type\">NSString</span>).appendingPathComponent(name).characters.<span class=\"built_in\">split</span>&#123;$<span class=\"number\">0</span> == <span class=\"string\">\".\"</span>&#125;.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>).first!</div><div class=\"line\"><span class=\"comment\">// 写入</span></div><div class=\"line\"><span class=\"keyword\">let</span> dic = [:] <span class=\"keyword\">as</span> <span class=\"type\">NSDictionary</span></div><div class=\"line\">dic.write(toFile: destPath, atomically: <span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"comment\">// 读取</span></div><div class=\"line\"><span class=\"keyword\">let</span> dict = <span class=\"type\">NSDictionary</span>(contentsOfFile: destPath)</div></pre></td></tr></table></figure>\n<h3 id=\"Part4-适配-iOS10-Widgets-新特性\"><a href=\"#Part4-适配-iOS10-Widgets-新特性\" class=\"headerlink\" title=\"Part4 适配 iOS10 Widgets 新特性\"></a>Part4 适配 iOS10 Widgets 新特性</h3><h4 id=\"处理-Widgets-展开-折叠的情况\"><a href=\"#处理-Widgets-展开-折叠的情况\" class=\"headerlink\" title=\"处理 Widgets 展开/折叠的情况\"></a>处理 Widgets 展开/折叠的情况</h4><p>在 iOS10 之前，Widgets 的高度可以自定义设置，但是在 iOS10 中，Widgets 的 activeDisplayMode 有两种状态：.expanded 和 .compact。 需要根据当前用户的选择来处理 Widgets 的高度，代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@available</span>(iOSApplicationExtension <span class=\"number\">10.0</span>, *)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">widgetActiveDisplayModeDidChange</span><span class=\"params\">(<span class=\"number\">_</span> activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> activeDisplayMode == .compact &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.preferredContentSize = maxSize</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.preferredContentSize = <span class=\"keyword\">self</span>.tableView.contentSize</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有个Bug：就是在 .compact 下无法设置尺寸，不管怎么设置都是 maxsize。还有待解决。</p>\n<h4 id=\"处理-Widgets-在-iOS9-和-iOS10-下的显示-Bug\"><a href=\"#处理-Widgets-在-iOS9-和-iOS10-下的显示-Bug\" class=\"headerlink\" title=\"处理 Widgets 在 iOS9 和 iOS10 下的显示 Bug\"></a>处理 Widgets 在 iOS9 和 iOS10 下的显示 Bug</h4><p>在 iOS10 中，Widgets 的背景是白色的，于是字体颜色设置为黑色的，但是在 iOS9 中，背景是黑色的，App 在iOS9中运行就会看不见字。感觉这是iOS10适配的Bug，为了解决这个问题，只能通过判断系统版本来设置字体颜色了，代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> #available(iOSApplicationExtension <span class=\"number\">10.0</span>, *) &#123;</div><div class=\"line\">    mainTextColor = <span class=\"type\">UIColor</span>.black</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    mainTextColor = <span class=\"type\">UIColor</span>.white</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Bug\"><a href=\"#Bug\" class=\"headerlink\" title=\"Bug:\"></a>Bug:</h4><p>在 iOS10 下，Widgets 的 displayBundleName 设置也不起作用了，不管怎么设置只跟 mainTarget 的displayBundleName 一致，还未找到解决方法。</p>\n<h2 id=\"番外篇\"><a href=\"#番外篇\" class=\"headerlink\" title=\"番外篇\"></a>番外篇</h2><p>女票说她们学校课程很多，每天看课表不方便，在国庆节陪她过生日的时候，现场撸了一个App只供她使用，她每次不用解锁直接下拉Widgets就可以看到今日课程，她开心的不得了还发了朋友圈炫耀一番。哈哈，女票是第一生产力☺️</p>\n<p>说到这，本文也就结束了，以上提到的Bug，我会在解决之后再来更新代码。</p>\n"},{"title":"iOS 一个 UITextView 的小 Bug","date":"2016-07-28T06:55:25.000Z","_content":"\n# 起因\n\n今天上午测试提了一个很神奇的Bug，在输入框输入某些iOS自带的表情，删除后会有残留物。例如：💺💺💺看到这个Bug，我的内心是觉得不可能啊。然后亲自试了一下，发现真会这样。至此，我发自内心佩服了我司的测试，这种问题都能发现。\n\n我想，这仅仅就是一个UITextView，应该不会我写的是个例，于是，我找了微信试了一下,这是微信的个人签名框，在输入完表情后，再删除，可以看到，后面留了一串残留物。\n![微信上Bug复现](/uploads/blog/1-1.jpg)\n我本来想直接关了这个Bug，毕竟微信这种大厂的App都能允许这个Bug。后来一想，也许是他们的测试没有我们的牛逼。\n\n# 解决方法\n\n微信的这个Bug复现，在保存后再进去，就会发现残留物没有了。所以解决思路是，在UITextView一边输入，一边给它赋值。于是实现了`UITextViewDelegate`的`textViewDidChange`方法。\n\n``` swift\nextension FMPersonEditSignVC : UITextViewDelegate {\n    \n    func textViewDidChange(textView:UITextView) {\n        self.textView.text = textView.text\n    } \n}\n```\n\n# 番外篇\n\n说到`UITextViewDelegate`，我又想起来之前提的一个Bug。我们的baseVC中都加了点击空白页隐藏键盘的功能，但是在某些小屏幕机型中，比如iPhone5上，如果UITextView的高度设置的比较高，用户就点击不到空白页（我当时给测试演示，用鼠标点击的，我说这很好点啊，哈哈哈哈），进而就隐藏不了键盘。\n\n这里如果去重新画UI设置约束，我感觉劳动量太大了，于是就想着用户在输入完回车键可以隐藏键盘。另外，iOS的键盘的回车键是可以自定义设置的，我将Return Key设置显示为“Done”，更便于用户理解。\n\n检测用户输入回车的代码如下：\n\n``` swift \nextension FMPersonEditSignVC : UITextViewDelegate {\n    \n    func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {\n        if text == \"\\n\" {\n            textView.resignFirstResponder()\n            return false\n        }\n        return true\n    }\n}\n\n```\n\n","source":"_posts/一个UITextView的小Bug.md","raw":"---\ntitle: iOS 一个 UITextView 的小 Bug\ndate: 2016-07-28 14:55:25\ntags:\n- iOS\n- UITextView\ncategories:\n- 开发\n- iOS\n---\n\n# 起因\n\n今天上午测试提了一个很神奇的Bug，在输入框输入某些iOS自带的表情，删除后会有残留物。例如：💺💺💺看到这个Bug，我的内心是觉得不可能啊。然后亲自试了一下，发现真会这样。至此，我发自内心佩服了我司的测试，这种问题都能发现。\n\n我想，这仅仅就是一个UITextView，应该不会我写的是个例，于是，我找了微信试了一下,这是微信的个人签名框，在输入完表情后，再删除，可以看到，后面留了一串残留物。\n![微信上Bug复现](/uploads/blog/1-1.jpg)\n我本来想直接关了这个Bug，毕竟微信这种大厂的App都能允许这个Bug。后来一想，也许是他们的测试没有我们的牛逼。\n\n# 解决方法\n\n微信的这个Bug复现，在保存后再进去，就会发现残留物没有了。所以解决思路是，在UITextView一边输入，一边给它赋值。于是实现了`UITextViewDelegate`的`textViewDidChange`方法。\n\n``` swift\nextension FMPersonEditSignVC : UITextViewDelegate {\n    \n    func textViewDidChange(textView:UITextView) {\n        self.textView.text = textView.text\n    } \n}\n```\n\n# 番外篇\n\n说到`UITextViewDelegate`，我又想起来之前提的一个Bug。我们的baseVC中都加了点击空白页隐藏键盘的功能，但是在某些小屏幕机型中，比如iPhone5上，如果UITextView的高度设置的比较高，用户就点击不到空白页（我当时给测试演示，用鼠标点击的，我说这很好点啊，哈哈哈哈），进而就隐藏不了键盘。\n\n这里如果去重新画UI设置约束，我感觉劳动量太大了，于是就想着用户在输入完回车键可以隐藏键盘。另外，iOS的键盘的回车键是可以自定义设置的，我将Return Key设置显示为“Done”，更便于用户理解。\n\n检测用户输入回车的代码如下：\n\n``` swift \nextension FMPersonEditSignVC : UITextViewDelegate {\n    \n    func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {\n        if text == \"\\n\" {\n            textView.resignFirstResponder()\n            return false\n        }\n        return true\n    }\n}\n\n```\n\n","slug":"一个UITextView的小Bug","published":1,"updated":"2016-10-12T14:18:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bq000dhnh17yzx3ujp","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>今天上午测试提了一个很神奇的Bug，在输入框输入某些iOS自带的表情，删除后会有残留物。例如：💺💺💺看到这个Bug，我的内心是觉得不可能啊。然后亲自试了一下，发现真会这样。至此，我发自内心佩服了我司的测试，这种问题都能发现。</p>\n<p>我想，这仅仅就是一个UITextView，应该不会我写的是个例，于是，我找了微信试了一下,这是微信的个人签名框，在输入完表情后，再删除，可以看到，后面留了一串残留物。<br><img src=\"/uploads/blog/1-1.jpg\" alt=\"微信上Bug复现\"><br>我本来想直接关了这个Bug，毕竟微信这种大厂的App都能允许这个Bug。后来一想，也许是他们的测试没有我们的牛逼。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>微信的这个Bug复现，在保存后再进去，就会发现残留物没有了。所以解决思路是，在UITextView一边输入，一边给它赋值。于是实现了<code>UITextViewDelegate</code>的<code>textViewDidChange</code>方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FMPersonEditSignVC</span> : <span class=\"title\">UITextViewDelegate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">textViewDidChange</span><span class=\"params\">(textView:UITextView)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.textView.text = textView.text</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"番外篇\"><a href=\"#番外篇\" class=\"headerlink\" title=\"番外篇\"></a>番外篇</h1><p>说到<code>UITextViewDelegate</code>，我又想起来之前提的一个Bug。我们的baseVC中都加了点击空白页隐藏键盘的功能，但是在某些小屏幕机型中，比如iPhone5上，如果UITextView的高度设置的比较高，用户就点击不到空白页（我当时给测试演示，用鼠标点击的，我说这很好点啊，哈哈哈哈），进而就隐藏不了键盘。</p>\n<p>这里如果去重新画UI设置约束，我感觉劳动量太大了，于是就想着用户在输入完回车键可以隐藏键盘。另外，iOS的键盘的回车键是可以自定义设置的，我将Return Key设置显示为“Done”，更便于用户理解。</p>\n<p>检测用户输入回车的代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FMPersonEditSignVC</span> : <span class=\"title\">UITextViewDelegate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">textView</span><span class=\"params\">(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> text == <span class=\"string\">\"\\n\"</span> &#123;</div><div class=\"line\">            textView.resignFirstResponder()</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>今天上午测试提了一个很神奇的Bug，在输入框输入某些iOS自带的表情，删除后会有残留物。例如：💺💺💺看到这个Bug，我的内心是觉得不可能啊。然后亲自试了一下，发现真会这样。至此，我发自内心佩服了我司的测试，这种问题都能发现。</p>\n<p>我想，这仅仅就是一个UITextView，应该不会我写的是个例，于是，我找了微信试了一下,这是微信的个人签名框，在输入完表情后，再删除，可以看到，后面留了一串残留物。<br><img src=\"/uploads/blog/1-1.jpg\" alt=\"微信上Bug复现\"><br>我本来想直接关了这个Bug，毕竟微信这种大厂的App都能允许这个Bug。后来一想，也许是他们的测试没有我们的牛逼。</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>微信的这个Bug复现，在保存后再进去，就会发现残留物没有了。所以解决思路是，在UITextView一边输入，一边给它赋值。于是实现了<code>UITextViewDelegate</code>的<code>textViewDidChange</code>方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FMPersonEditSignVC</span> : <span class=\"title\">UITextViewDelegate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">textViewDidChange</span><span class=\"params\">(textView:UITextView)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.textView.text = textView.text</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"番外篇\"><a href=\"#番外篇\" class=\"headerlink\" title=\"番外篇\"></a>番外篇</h1><p>说到<code>UITextViewDelegate</code>，我又想起来之前提的一个Bug。我们的baseVC中都加了点击空白页隐藏键盘的功能，但是在某些小屏幕机型中，比如iPhone5上，如果UITextView的高度设置的比较高，用户就点击不到空白页（我当时给测试演示，用鼠标点击的，我说这很好点啊，哈哈哈哈），进而就隐藏不了键盘。</p>\n<p>这里如果去重新画UI设置约束，我感觉劳动量太大了，于是就想着用户在输入完回车键可以隐藏键盘。另外，iOS的键盘的回车键是可以自定义设置的，我将Return Key设置显示为“Done”，更便于用户理解。</p>\n<p>检测用户输入回车的代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FMPersonEditSignVC</span> : <span class=\"title\">UITextViewDelegate</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">textView</span><span class=\"params\">(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> text == <span class=\"string\">\"\\n\"</span> &#123;</div><div class=\"line\">            textView.resignFirstResponder()</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Swift 使用 Alamofire 实现 GB2312 编码的网络请求","date":"2016-08-02T06:04:58.000Z","_content":"\n# 背景\n\n最近在做一个校园工具，其中有个功能是查看自己校园网账户的剩余流量。学校的网络管理中心没有开放接口，于是只能利用Alamofire来模拟登录解析数据。一开始通过GET请求获取用户账户余额都是没有问题的，但是通过POST请求的话，就无法正确访问数据。\n\n# 原因\n\n之前知道该网站是GB2312编码的，于是在解析data为HTML的时候就用GB2312解码的。但在POST数据时，也需要GB2312编码。我开始时将post的string参数用GB2312编码，发现不行。于是就查看了Alamofire的源码，发现其默认的参数编码是UTF-8，而且只有这一个选择😂。\n\n``` swift\nif mutableURLRequest.valueForHTTPHeaderField(\"Content-Type\") == nil {\n    mutableURLRequest.setValue(\"application/x-www-form-urlencoded; charset=utf-8\",forHTTPHeaderField: \"Content-Type\")\n}\n```\n\n这样就很尴尬了。在Google搜了半天，也没找到类似的问题。于是问了我一个经常抓包的哥们，他说GB2312编码的服务器遇到的次数非常少。再加上本来用swift模拟请求的场景就不多了，难怪没同样的问题呢。试了很久，我都准备鸣金收兵了。\n\n# 解决\n\n后来问了学长这个问题，他说可以自定义Alamofire的request，在request中进行参数的GB2312编码或许可以。于是带着最后一丝希望去试了一下，发现学长真行🤗。\n\n自定义Alamofire的request代码如下：\n```swift\nlet GB2312Encoding = CFStringConvertEncodingToNSStringEncoding(0x0632)\nprivate func urlRequestWithComponents(urlString:String,parameters:[String: AnyObject]) ->(URLRequestConvertible,NSData) {\n        \n    // create  url request to send\n    let mutableURLRequest = NSMutableURLRequest(URL: NSURL(string: urlString)!)\n    mutableURLRequest.HTTPMethod = Alamofire.Method.POST.rawValue\n    let contentType = \"application/x-www-form-urlencoded\"\n    mutableURLRequest.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n    mutableURLRequest.setValue(\"*******\", forHTTPHeaderField: \"Referer\")\n        \n    // add parameters\n    let uploadData = NSMutableData()\n    for (key,value) in parameters {\n        uploadData.appendData(\"\\(key)=\\(value)&\".dataUsingEncoding(GB2312Encoding)!)\n    }\n        \n    return (Alamofire.ParameterEncoding.URL.encode(mutableURLRequest, parameters: nil).0,uploadData)\n}\n```\n\n调用该自定义Request的方法如下：\n\n``` swift\nlet urlRequest = urlRequestWithComponents(SchoolNetWorkBaseURL, parameters: parameters)\nAlamofire.upload(urlRequest.0, data: urlRequest.1).response {\n    request, response, data, error in\n}\n```\n\n通过这个，就可以实现使用Alamofire实现GB2312编码的请求了。\n\n# 番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\n\n在解决上面的问题时，我一度偏失了方向，以为是参数没有压缩的问题。下面记录一下gzip压缩的参数问题。\n\n下面是对ParameterEncoding的扩展，Alamofire在请求的request的encoding中，选择ParameterEncoding.gzipped即可。\n\n``` swift\n//\n//  ParameterEncoding-Extension.swift\n//  AHNUer\n//\n//  Created by 黄帅 on 16/7/28.\n//  Copyright © 2016年 帅帅. All rights reserved.\n//\n\nimport Foundation\nimport Alamofire\n\n// Actual gzipping from https://github.com/1024jp/NSData-GZIP\n\n// Example: ParameterEncoding.JSON.gzipped\n\ninfix operator • { associativity left }\nfunc • <A, B, C>(f: B -> C, g: A -> B) -> A -> C {\n    return { x in f(g(x)) }\n}\n\nextension ParameterEncoding {\n    \n    var gzipped:ParameterEncoding {\n        \n        return gzip(self)\n    }\n    \n    private func gzip(encoding:ParameterEncoding) -> ParameterEncoding {\n        \n        let gzipEncoding = self.gzipOrError • encoding.encode\n        \n        return ParameterEncoding.Custom(gzipEncoding)\n    }\n    \n    private func gzipOrError(request:NSURLRequest, error:NSError?) -> (NSMutableURLRequest, NSError?) {\n        \n        let mutableRequest = request.mutableCopy() as! NSMutableURLRequest\n        \n        if error != nil {\n            return (mutableRequest, error)\n        }\n        \n        var gzipEncodingError: NSError? = nil\n        \n        do {\n            let gzippedData = try mutableRequest.HTTPBody?.gzippedData()\n            mutableRequest.HTTPBody = gzippedData\n            \n            if mutableRequest.HTTPBody != nil {\n                mutableRequest.setValue(\"gzip\", forHTTPHeaderField: \"Content-Encoding\")\n            }\n        } catch {\n            gzipEncodingError = error as NSError\n        }\n        \n        return (mutableRequest, gzipEncodingError)\n    }\n}\n\n```\n\n# 参考\n\n* [Swift - 使用gzip压缩NSData数据](http://www.hangge.com/blog/cache/detail_1032.html)\n* [blender/ParameterEncodingExt](https://gist.github.com/blender/923f1c1de2f00514ed12)\n\n\n","source":"_posts/使用Alamofire实现GB2312编码的网络请求.md","raw":"---\ntitle: Swift 使用 Alamofire 实现 GB2312 编码的网络请求\ndate: 2016-08-02 14:04:58\ntags:\n- iOS\n- Swift\n- Alamofire\n- GB2312编码\ncategories:\n- 开发\n- iOS\n---\n\n# 背景\n\n最近在做一个校园工具，其中有个功能是查看自己校园网账户的剩余流量。学校的网络管理中心没有开放接口，于是只能利用Alamofire来模拟登录解析数据。一开始通过GET请求获取用户账户余额都是没有问题的，但是通过POST请求的话，就无法正确访问数据。\n\n# 原因\n\n之前知道该网站是GB2312编码的，于是在解析data为HTML的时候就用GB2312解码的。但在POST数据时，也需要GB2312编码。我开始时将post的string参数用GB2312编码，发现不行。于是就查看了Alamofire的源码，发现其默认的参数编码是UTF-8，而且只有这一个选择😂。\n\n``` swift\nif mutableURLRequest.valueForHTTPHeaderField(\"Content-Type\") == nil {\n    mutableURLRequest.setValue(\"application/x-www-form-urlencoded; charset=utf-8\",forHTTPHeaderField: \"Content-Type\")\n}\n```\n\n这样就很尴尬了。在Google搜了半天，也没找到类似的问题。于是问了我一个经常抓包的哥们，他说GB2312编码的服务器遇到的次数非常少。再加上本来用swift模拟请求的场景就不多了，难怪没同样的问题呢。试了很久，我都准备鸣金收兵了。\n\n# 解决\n\n后来问了学长这个问题，他说可以自定义Alamofire的request，在request中进行参数的GB2312编码或许可以。于是带着最后一丝希望去试了一下，发现学长真行🤗。\n\n自定义Alamofire的request代码如下：\n```swift\nlet GB2312Encoding = CFStringConvertEncodingToNSStringEncoding(0x0632)\nprivate func urlRequestWithComponents(urlString:String,parameters:[String: AnyObject]) ->(URLRequestConvertible,NSData) {\n        \n    // create  url request to send\n    let mutableURLRequest = NSMutableURLRequest(URL: NSURL(string: urlString)!)\n    mutableURLRequest.HTTPMethod = Alamofire.Method.POST.rawValue\n    let contentType = \"application/x-www-form-urlencoded\"\n    mutableURLRequest.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n    mutableURLRequest.setValue(\"*******\", forHTTPHeaderField: \"Referer\")\n        \n    // add parameters\n    let uploadData = NSMutableData()\n    for (key,value) in parameters {\n        uploadData.appendData(\"\\(key)=\\(value)&\".dataUsingEncoding(GB2312Encoding)!)\n    }\n        \n    return (Alamofire.ParameterEncoding.URL.encode(mutableURLRequest, parameters: nil).0,uploadData)\n}\n```\n\n调用该自定义Request的方法如下：\n\n``` swift\nlet urlRequest = urlRequestWithComponents(SchoolNetWorkBaseURL, parameters: parameters)\nAlamofire.upload(urlRequest.0, data: urlRequest.1).response {\n    request, response, data, error in\n}\n```\n\n通过这个，就可以实现使用Alamofire实现GB2312编码的请求了。\n\n# 番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\n\n在解决上面的问题时，我一度偏失了方向，以为是参数没有压缩的问题。下面记录一下gzip压缩的参数问题。\n\n下面是对ParameterEncoding的扩展，Alamofire在请求的request的encoding中，选择ParameterEncoding.gzipped即可。\n\n``` swift\n//\n//  ParameterEncoding-Extension.swift\n//  AHNUer\n//\n//  Created by 黄帅 on 16/7/28.\n//  Copyright © 2016年 帅帅. All rights reserved.\n//\n\nimport Foundation\nimport Alamofire\n\n// Actual gzipping from https://github.com/1024jp/NSData-GZIP\n\n// Example: ParameterEncoding.JSON.gzipped\n\ninfix operator • { associativity left }\nfunc • <A, B, C>(f: B -> C, g: A -> B) -> A -> C {\n    return { x in f(g(x)) }\n}\n\nextension ParameterEncoding {\n    \n    var gzipped:ParameterEncoding {\n        \n        return gzip(self)\n    }\n    \n    private func gzip(encoding:ParameterEncoding) -> ParameterEncoding {\n        \n        let gzipEncoding = self.gzipOrError • encoding.encode\n        \n        return ParameterEncoding.Custom(gzipEncoding)\n    }\n    \n    private func gzipOrError(request:NSURLRequest, error:NSError?) -> (NSMutableURLRequest, NSError?) {\n        \n        let mutableRequest = request.mutableCopy() as! NSMutableURLRequest\n        \n        if error != nil {\n            return (mutableRequest, error)\n        }\n        \n        var gzipEncodingError: NSError? = nil\n        \n        do {\n            let gzippedData = try mutableRequest.HTTPBody?.gzippedData()\n            mutableRequest.HTTPBody = gzippedData\n            \n            if mutableRequest.HTTPBody != nil {\n                mutableRequest.setValue(\"gzip\", forHTTPHeaderField: \"Content-Encoding\")\n            }\n        } catch {\n            gzipEncodingError = error as NSError\n        }\n        \n        return (mutableRequest, gzipEncodingError)\n    }\n}\n\n```\n\n# 参考\n\n* [Swift - 使用gzip压缩NSData数据](http://www.hangge.com/blog/cache/detail_1032.html)\n* [blender/ParameterEncodingExt](https://gist.github.com/blender/923f1c1de2f00514ed12)\n\n\n","slug":"使用Alamofire实现GB2312编码的网络请求","published":1,"updated":"2016-10-12T14:19:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bs000ghnh1uqdgwp10","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在做一个校园工具，其中有个功能是查看自己校园网账户的剩余流量。学校的网络管理中心没有开放接口，于是只能利用Alamofire来模拟登录解析数据。一开始通过GET请求获取用户账户余额都是没有问题的，但是通过POST请求的话，就无法正确访问数据。</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>之前知道该网站是GB2312编码的，于是在解析data为HTML的时候就用GB2312解码的。但在POST数据时，也需要GB2312编码。我开始时将post的string参数用GB2312编码，发现不行。于是就查看了Alamofire的源码，发现其默认的参数编码是UTF-8，而且只有这一个选择😂。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> mutableURLRequest.valueForHTTPHeaderField(<span class=\"string\">\"Content-Type\"</span>) == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    mutableURLRequest.setValue(<span class=\"string\">\"application/x-www-form-urlencoded; charset=utf-8\"</span>,forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就很尴尬了。在Google搜了半天，也没找到类似的问题。于是问了我一个经常抓包的哥们，他说GB2312编码的服务器遇到的次数非常少。再加上本来用swift模拟请求的场景就不多了，难怪没同样的问题呢。试了很久，我都准备鸣金收兵了。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>后来问了学长这个问题，他说可以自定义Alamofire的request，在request中进行参数的GB2312编码或许可以。于是带着最后一丝希望去试了一下，发现学长真行🤗。</p>\n<p>自定义Alamofire的request代码如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">GB2312Encoding</span> = <span class=\"type\">CFStringConvertEncodingToNSStringEncoding</span>(<span class=\"number\">0x0632</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlRequestWithComponents</span><span class=\"params\">(urlString:String,parameters:[String: AnyObject])</span></span> -&gt;(<span class=\"type\">URLRequestConvertible</span>,<span class=\"type\">NSData</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\">// create  url request to send</span></div><div class=\"line\">    <span class=\"keyword\">let</span> mutableURLRequest = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"type\">NSURL</span>(string: urlString)!)</div><div class=\"line\">    mutableURLRequest.<span class=\"type\">HTTPMethod</span> = <span class=\"type\">Alamofire</span>.<span class=\"type\">Method</span>.<span class=\"type\">POST</span>.rawValue</div><div class=\"line\">    <span class=\"keyword\">let</span> contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></div><div class=\"line\">    mutableURLRequest.setValue(contentType, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">    mutableURLRequest.setValue(<span class=\"string\">\"*******\"</span>, forHTTPHeaderField: <span class=\"string\">\"Referer\"</span>)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\">// add parameters</span></div><div class=\"line\">    <span class=\"keyword\">let</span> uploadData = <span class=\"type\">NSMutableData</span>()</div><div class=\"line\">    <span class=\"keyword\">for</span> (key,value) <span class=\"keyword\">in</span> parameters &#123;</div><div class=\"line\">        uploadData.appendData(<span class=\"string\">\"<span class=\"subst\">\\(key)</span>=<span class=\"subst\">\\(value)</span>&amp;\"</span>.dataUsingEncoding(<span class=\"type\">GB2312Encoding</span>)!)</div><div class=\"line\">    &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">Alamofire</span>.<span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span>.encode(mutableURLRequest, parameters: <span class=\"literal\">nil</span>).<span class=\"number\">0</span>,uploadData)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用该自定义Request的方法如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlRequest = urlRequestWithComponents(<span class=\"type\">SchoolNetWorkBaseURL</span>, parameters: parameters)</div><div class=\"line\"><span class=\"type\">Alamofire</span>.upload(urlRequest.<span class=\"number\">0</span>, data: urlRequest.<span class=\"number\">1</span>).response &#123;</div><div class=\"line\">    request, response, data, error <span class=\"keyword\">in</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过这个，就可以实现使用Alamofire实现GB2312编码的请求了。</p>\n<h1 id=\"番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\"><a href=\"#番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\" class=\"headerlink\" title=\"番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\"></a>番外篇：关于使用Alamofire实现gzip压缩参数的网络请求</h1><p>在解决上面的问题时，我一度偏失了方向，以为是参数没有压缩的问题。下面记录一下gzip压缩的参数问题。</p>\n<p>下面是对ParameterEncoding的扩展，Alamofire在请求的request的encoding中，选择ParameterEncoding.gzipped即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ParameterEncoding-Extension.swift</span></div><div class=\"line\"><span class=\"comment\">//  AHNUer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by 黄帅 on 16/7/28.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright © 2016年 帅帅. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"><span class=\"keyword\">import</span> Alamofire</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Actual gzipping from https://github.com/1024jp/NSData-GZIP</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example: ParameterEncoding.JSON.gzipped</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> • &#123; <span class=\"keyword\">associativity</span> <span class=\"keyword\">left</span> &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> • &lt;A, B, C&gt;<span class=\"params\">(f: B -&gt; C, g: A -&gt; B)</span></span> -&gt; <span class=\"type\">A</span> -&gt; <span class=\"type\">C</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; x <span class=\"keyword\">in</span> f(g(x)) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ParameterEncoding</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> gzipped:<span class=\"type\">ParameterEncoding</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> gzip(<span class=\"keyword\">self</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gzip</span><span class=\"params\">(encoding:ParameterEncoding)</span></span> -&gt; <span class=\"type\">ParameterEncoding</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">let</span> gzipEncoding = <span class=\"keyword\">self</span>.gzipOrError • encoding.encode</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">ParameterEncoding</span>.<span class=\"type\">Custom</span>(gzipEncoding)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gzipOrError</span><span class=\"params\">(request:NSURLRequest, error:NSError?)</span></span> -&gt; (<span class=\"type\">NSMutableURLRequest</span>, <span class=\"type\">NSError</span>?) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">let</span> mutableRequest = request.mutableCopy() <span class=\"keyword\">as</span>! <span class=\"type\">NSMutableURLRequest</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (mutableRequest, error)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">var</span> gzipEncodingError: <span class=\"type\">NSError</span>? = <span class=\"literal\">nil</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> gzippedData = <span class=\"keyword\">try</span> mutableRequest.<span class=\"type\">HTTPBody</span>?.gzippedData()</div><div class=\"line\">            mutableRequest.<span class=\"type\">HTTPBody</span> = gzippedData</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> mutableRequest.<span class=\"type\">HTTPBody</span> != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                mutableRequest.setValue(<span class=\"string\">\"gzip\"</span>, forHTTPHeaderField: <span class=\"string\">\"Content-Encoding\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> &#123;</div><div class=\"line\">            gzipEncodingError = error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (mutableRequest, gzipEncodingError)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.hangge.com/blog/cache/detail_1032.html\" target=\"_blank\" rel=\"external\">Swift - 使用gzip压缩NSData数据</a></li>\n<li><a href=\"https://gist.github.com/blender/923f1c1de2f00514ed12\" target=\"_blank\" rel=\"external\">blender/ParameterEncodingExt</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在做一个校园工具，其中有个功能是查看自己校园网账户的剩余流量。学校的网络管理中心没有开放接口，于是只能利用Alamofire来模拟登录解析数据。一开始通过GET请求获取用户账户余额都是没有问题的，但是通过POST请求的话，就无法正确访问数据。</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>之前知道该网站是GB2312编码的，于是在解析data为HTML的时候就用GB2312解码的。但在POST数据时，也需要GB2312编码。我开始时将post的string参数用GB2312编码，发现不行。于是就查看了Alamofire的源码，发现其默认的参数编码是UTF-8，而且只有这一个选择😂。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> mutableURLRequest.valueForHTTPHeaderField(<span class=\"string\">\"Content-Type\"</span>) == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    mutableURLRequest.setValue(<span class=\"string\">\"application/x-www-form-urlencoded; charset=utf-8\"</span>,forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就很尴尬了。在Google搜了半天，也没找到类似的问题。于是问了我一个经常抓包的哥们，他说GB2312编码的服务器遇到的次数非常少。再加上本来用swift模拟请求的场景就不多了，难怪没同样的问题呢。试了很久，我都准备鸣金收兵了。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>后来问了学长这个问题，他说可以自定义Alamofire的request，在request中进行参数的GB2312编码或许可以。于是带着最后一丝希望去试了一下，发现学长真行🤗。</p>\n<p>自定义Alamofire的request代码如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">GB2312Encoding</span> = <span class=\"type\">CFStringConvertEncodingToNSStringEncoding</span>(<span class=\"number\">0x0632</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlRequestWithComponents</span><span class=\"params\">(urlString:String,parameters:[String: AnyObject])</span></span> -&gt;(<span class=\"type\">URLRequestConvertible</span>,<span class=\"type\">NSData</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\">// create  url request to send</span></div><div class=\"line\">    <span class=\"keyword\">let</span> mutableURLRequest = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: <span class=\"type\">NSURL</span>(string: urlString)!)</div><div class=\"line\">    mutableURLRequest.<span class=\"type\">HTTPMethod</span> = <span class=\"type\">Alamofire</span>.<span class=\"type\">Method</span>.<span class=\"type\">POST</span>.rawValue</div><div class=\"line\">    <span class=\"keyword\">let</span> contentType = <span class=\"string\">\"application/x-www-form-urlencoded\"</span></div><div class=\"line\">    mutableURLRequest.setValue(contentType, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</div><div class=\"line\">    mutableURLRequest.setValue(<span class=\"string\">\"*******\"</span>, forHTTPHeaderField: <span class=\"string\">\"Referer\"</span>)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\">// add parameters</span></div><div class=\"line\">    <span class=\"keyword\">let</span> uploadData = <span class=\"type\">NSMutableData</span>()</div><div class=\"line\">    <span class=\"keyword\">for</span> (key,value) <span class=\"keyword\">in</span> parameters &#123;</div><div class=\"line\">        uploadData.appendData(<span class=\"string\">\"<span class=\"subst\">\\(key)</span>=<span class=\"subst\">\\(value)</span>&amp;\"</span>.dataUsingEncoding(<span class=\"type\">GB2312Encoding</span>)!)</div><div class=\"line\">    &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">Alamofire</span>.<span class=\"type\">ParameterEncoding</span>.<span class=\"type\">URL</span>.encode(mutableURLRequest, parameters: <span class=\"literal\">nil</span>).<span class=\"number\">0</span>,uploadData)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用该自定义Request的方法如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlRequest = urlRequestWithComponents(<span class=\"type\">SchoolNetWorkBaseURL</span>, parameters: parameters)</div><div class=\"line\"><span class=\"type\">Alamofire</span>.upload(urlRequest.<span class=\"number\">0</span>, data: urlRequest.<span class=\"number\">1</span>).response &#123;</div><div class=\"line\">    request, response, data, error <span class=\"keyword\">in</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过这个，就可以实现使用Alamofire实现GB2312编码的请求了。</p>\n<h1 id=\"番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\"><a href=\"#番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\" class=\"headerlink\" title=\"番外篇：关于使用Alamofire实现gzip压缩参数的网络请求\"></a>番外篇：关于使用Alamofire实现gzip压缩参数的网络请求</h1><p>在解决上面的问题时，我一度偏失了方向，以为是参数没有压缩的问题。下面记录一下gzip压缩的参数问题。</p>\n<p>下面是对ParameterEncoding的扩展，Alamofire在请求的request的encoding中，选择ParameterEncoding.gzipped即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ParameterEncoding-Extension.swift</span></div><div class=\"line\"><span class=\"comment\">//  AHNUer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by 黄帅 on 16/7/28.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright © 2016年 帅帅. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"><span class=\"keyword\">import</span> Alamofire</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Actual gzipping from https://github.com/1024jp/NSData-GZIP</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example: ParameterEncoding.JSON.gzipped</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> • &#123; <span class=\"keyword\">associativity</span> <span class=\"keyword\">left</span> &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> • &lt;A, B, C&gt;<span class=\"params\">(f: B -&gt; C, g: A -&gt; B)</span></span> -&gt; <span class=\"type\">A</span> -&gt; <span class=\"type\">C</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; x <span class=\"keyword\">in</span> f(g(x)) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ParameterEncoding</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> gzipped:<span class=\"type\">ParameterEncoding</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> gzip(<span class=\"keyword\">self</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gzip</span><span class=\"params\">(encoding:ParameterEncoding)</span></span> -&gt; <span class=\"type\">ParameterEncoding</span> &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">let</span> gzipEncoding = <span class=\"keyword\">self</span>.gzipOrError • encoding.encode</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">ParameterEncoding</span>.<span class=\"type\">Custom</span>(gzipEncoding)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gzipOrError</span><span class=\"params\">(request:NSURLRequest, error:NSError?)</span></span> -&gt; (<span class=\"type\">NSMutableURLRequest</span>, <span class=\"type\">NSError</span>?) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">let</span> mutableRequest = request.mutableCopy() <span class=\"keyword\">as</span>! <span class=\"type\">NSMutableURLRequest</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (mutableRequest, error)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">var</span> gzipEncodingError: <span class=\"type\">NSError</span>? = <span class=\"literal\">nil</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> gzippedData = <span class=\"keyword\">try</span> mutableRequest.<span class=\"type\">HTTPBody</span>?.gzippedData()</div><div class=\"line\">            mutableRequest.<span class=\"type\">HTTPBody</span> = gzippedData</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> mutableRequest.<span class=\"type\">HTTPBody</span> != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                mutableRequest.setValue(<span class=\"string\">\"gzip\"</span>, forHTTPHeaderField: <span class=\"string\">\"Content-Encoding\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> &#123;</div><div class=\"line\">            gzipEncodingError = error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (mutableRequest, gzipEncodingError)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.hangge.com/blog/cache/detail_1032.html\">Swift - 使用gzip压缩NSData数据</a></li>\n<li><a href=\"https://gist.github.com/blender/923f1c1de2f00514ed12\">blender/ParameterEncodingExt</a></li>\n</ul>\n"},{"title":"博文的开始","date":"2015-10-19T02:38:15.000Z","_content":"\n起这个题目，是向我一个学长[致敬](http://blog.csdn.net/decting/article/details/8062457)。\n\n今天是2015年元旦，照这样说来就算是去年，我认识了这个学长。当初是请教学长安卓问题，然后由于时间问题直接到学长寝室请他帮忙调程序。说真的，看着高手调程序真的能学到太多，他们解决问题的思路和方法真的很值得我们去学习，我记得当时学会了用Log.i(\"\",\"\")来跟踪程序运行状况。\n\n   进入大学三年了，期间从网上学习了很多东西，一直以来我只是有一个互联网内容消费者，没有创造过什么。CSDN的账号创建很久了，每次看到技术牛人写的关于各类问题的解决方法以及他们自身对于问题的思考，就非常的崇拜以及感谢他们的付出。经常在看完他们的技术博客之后，在想自己是不是也能写一点什么，就像知乎说的那样，与世界分享你的知识和见解，然而一拖就拖到现在。其实，原来也真的什么都不会，没得内容来与大家分享。渐渐的我也做了一些项目，成为了学弟们的学长，我想我也应该把自己遇到问题的一些解决方法和对这些方法的思考写出来，而不是只记录在我自己的OneNote里面。\n\n   我是物联网专业学生，所开发的一些也都是软硬件结合的项目，我会在此与大家分享经验。\n\n   好了，那这第一篇文章就作为我新阶段的开始，2015年我会准备考研，因此会对相关的科目进行复习与总结，我也会在此记录我考研路上对于专业相关问题的感悟。\n   最后，从学长那抄一句：\n\n   >我们的目标是没有遗憾。\n\n   ------\n\n   以上是我在2015年1月1日在CSDN上写的第一篇博文，\n\n   当时已值大三，开博的目的是可以分享一些项目经验以及记录一下考研备战路上的点点滴滴。可惜当时准备考研，后期在写过一篇《Android-Lint使用后的错误解决》之后便停滞项目开发了，后来到了五月份，我放弃了考研，一心想着就业，于是暑期开始便一直在北京一家物联网公司实习，时间飞快，有些事情却偏偏以它奇怪的姿势改变我的轨迹，比如：我保研了。\n\n   前段时间把公司一个产品的iOS客户端写好，然后从注册开发者账号开始到最后弄上App Store，至此我也算一个iOS开发菜鸟了，哈哈。上周把MongoDB项目暂时完成了，经理儿子出世回家去了，所以这几天也没有人给我安排工作，在网上瞎逛的时候，突然想起来今年第一天给自己安排的任务，于是花了一上午学习Markdown和Github Page以及jekyll。\n\n   我想在未来的日子里，我应该做点什么了，逝者如斯夫，应该把生活过的像自己想要的那样，才对嘛。\n\n\n","source":"_posts/博文的开始.md","raw":"---\ntitle: 博文的开始\ndate: 2015-10-19 10:38:15\ntags: \n- 总结\ncategories:\n- 总结\n---\n\n起这个题目，是向我一个学长[致敬](http://blog.csdn.net/decting/article/details/8062457)。\n\n今天是2015年元旦，照这样说来就算是去年，我认识了这个学长。当初是请教学长安卓问题，然后由于时间问题直接到学长寝室请他帮忙调程序。说真的，看着高手调程序真的能学到太多，他们解决问题的思路和方法真的很值得我们去学习，我记得当时学会了用Log.i(\"\",\"\")来跟踪程序运行状况。\n\n   进入大学三年了，期间从网上学习了很多东西，一直以来我只是有一个互联网内容消费者，没有创造过什么。CSDN的账号创建很久了，每次看到技术牛人写的关于各类问题的解决方法以及他们自身对于问题的思考，就非常的崇拜以及感谢他们的付出。经常在看完他们的技术博客之后，在想自己是不是也能写一点什么，就像知乎说的那样，与世界分享你的知识和见解，然而一拖就拖到现在。其实，原来也真的什么都不会，没得内容来与大家分享。渐渐的我也做了一些项目，成为了学弟们的学长，我想我也应该把自己遇到问题的一些解决方法和对这些方法的思考写出来，而不是只记录在我自己的OneNote里面。\n\n   我是物联网专业学生，所开发的一些也都是软硬件结合的项目，我会在此与大家分享经验。\n\n   好了，那这第一篇文章就作为我新阶段的开始，2015年我会准备考研，因此会对相关的科目进行复习与总结，我也会在此记录我考研路上对于专业相关问题的感悟。\n   最后，从学长那抄一句：\n\n   >我们的目标是没有遗憾。\n\n   ------\n\n   以上是我在2015年1月1日在CSDN上写的第一篇博文，\n\n   当时已值大三，开博的目的是可以分享一些项目经验以及记录一下考研备战路上的点点滴滴。可惜当时准备考研，后期在写过一篇《Android-Lint使用后的错误解决》之后便停滞项目开发了，后来到了五月份，我放弃了考研，一心想着就业，于是暑期开始便一直在北京一家物联网公司实习，时间飞快，有些事情却偏偏以它奇怪的姿势改变我的轨迹，比如：我保研了。\n\n   前段时间把公司一个产品的iOS客户端写好，然后从注册开发者账号开始到最后弄上App Store，至此我也算一个iOS开发菜鸟了，哈哈。上周把MongoDB项目暂时完成了，经理儿子出世回家去了，所以这几天也没有人给我安排工作，在网上瞎逛的时候，突然想起来今年第一天给自己安排的任务，于是花了一上午学习Markdown和Github Page以及jekyll。\n\n   我想在未来的日子里，我应该做点什么了，逝者如斯夫，应该把生活过的像自己想要的那样，才对嘛。\n\n\n","slug":"博文的开始","published":1,"updated":"2016-08-09T08:38:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bt000hhnh1h8tzqj5e","content":"<p>起这个题目，是向我一个学长<a href=\"http://blog.csdn.net/decting/article/details/8062457\" target=\"_blank\" rel=\"external\">致敬</a>。</p>\n<p>今天是2015年元旦，照这样说来就算是去年，我认识了这个学长。当初是请教学长安卓问题，然后由于时间问题直接到学长寝室请他帮忙调程序。说真的，看着高手调程序真的能学到太多，他们解决问题的思路和方法真的很值得我们去学习，我记得当时学会了用Log.i(“”,””)来跟踪程序运行状况。</p>\n<p>   进入大学三年了，期间从网上学习了很多东西，一直以来我只是有一个互联网内容消费者，没有创造过什么。CSDN的账号创建很久了，每次看到技术牛人写的关于各类问题的解决方法以及他们自身对于问题的思考，就非常的崇拜以及感谢他们的付出。经常在看完他们的技术博客之后，在想自己是不是也能写一点什么，就像知乎说的那样，与世界分享你的知识和见解，然而一拖就拖到现在。其实，原来也真的什么都不会，没得内容来与大家分享。渐渐的我也做了一些项目，成为了学弟们的学长，我想我也应该把自己遇到问题的一些解决方法和对这些方法的思考写出来，而不是只记录在我自己的OneNote里面。</p>\n<p>   我是物联网专业学生，所开发的一些也都是软硬件结合的项目，我会在此与大家分享经验。</p>\n<p>   好了，那这第一篇文章就作为我新阶段的开始，2015年我会准备考研，因此会对相关的科目进行复习与总结，我也会在此记录我考研路上对于专业相关问题的感悟。<br>   最后，从学长那抄一句：</p>\n<blockquote>\n<p>我们的目标是没有遗憾。</p>\n</blockquote>\n<hr>\n<p>   以上是我在2015年1月1日在CSDN上写的第一篇博文，</p>\n<p>   当时已值大三，开博的目的是可以分享一些项目经验以及记录一下考研备战路上的点点滴滴。可惜当时准备考研，后期在写过一篇《Android-Lint使用后的错误解决》之后便停滞项目开发了，后来到了五月份，我放弃了考研，一心想着就业，于是暑期开始便一直在北京一家物联网公司实习，时间飞快，有些事情却偏偏以它奇怪的姿势改变我的轨迹，比如：我保研了。</p>\n<p>   前段时间把公司一个产品的iOS客户端写好，然后从注册开发者账号开始到最后弄上App Store，至此我也算一个iOS开发菜鸟了，哈哈。上周把MongoDB项目暂时完成了，经理儿子出世回家去了，所以这几天也没有人给我安排工作，在网上瞎逛的时候，突然想起来今年第一天给自己安排的任务，于是花了一上午学习Markdown和Github Page以及jekyll。</p>\n<p>   我想在未来的日子里，我应该做点什么了，逝者如斯夫，应该把生活过的像自己想要的那样，才对嘛。</p>\n","excerpt":"","more":"<p>起这个题目，是向我一个学长<a href=\"http://blog.csdn.net/decting/article/details/8062457\">致敬</a>。</p>\n<p>今天是2015年元旦，照这样说来就算是去年，我认识了这个学长。当初是请教学长安卓问题，然后由于时间问题直接到学长寝室请他帮忙调程序。说真的，看着高手调程序真的能学到太多，他们解决问题的思路和方法真的很值得我们去学习，我记得当时学会了用Log.i(“”,””)来跟踪程序运行状况。</p>\n<p>   进入大学三年了，期间从网上学习了很多东西，一直以来我只是有一个互联网内容消费者，没有创造过什么。CSDN的账号创建很久了，每次看到技术牛人写的关于各类问题的解决方法以及他们自身对于问题的思考，就非常的崇拜以及感谢他们的付出。经常在看完他们的技术博客之后，在想自己是不是也能写一点什么，就像知乎说的那样，与世界分享你的知识和见解，然而一拖就拖到现在。其实，原来也真的什么都不会，没得内容来与大家分享。渐渐的我也做了一些项目，成为了学弟们的学长，我想我也应该把自己遇到问题的一些解决方法和对这些方法的思考写出来，而不是只记录在我自己的OneNote里面。</p>\n<p>   我是物联网专业学生，所开发的一些也都是软硬件结合的项目，我会在此与大家分享经验。</p>\n<p>   好了，那这第一篇文章就作为我新阶段的开始，2015年我会准备考研，因此会对相关的科目进行复习与总结，我也会在此记录我考研路上对于专业相关问题的感悟。<br>   最后，从学长那抄一句：</p>\n<blockquote>\n<p>我们的目标是没有遗憾。</p>\n</blockquote>\n<hr>\n<p>   以上是我在2015年1月1日在CSDN上写的第一篇博文，</p>\n<p>   当时已值大三，开博的目的是可以分享一些项目经验以及记录一下考研备战路上的点点滴滴。可惜当时准备考研，后期在写过一篇《Android-Lint使用后的错误解决》之后便停滞项目开发了，后来到了五月份，我放弃了考研，一心想着就业，于是暑期开始便一直在北京一家物联网公司实习，时间飞快，有些事情却偏偏以它奇怪的姿势改变我的轨迹，比如：我保研了。</p>\n<p>   前段时间把公司一个产品的iOS客户端写好，然后从注册开发者账号开始到最后弄上App Store，至此我也算一个iOS开发菜鸟了，哈哈。上周把MongoDB项目暂时完成了，经理儿子出世回家去了，所以这几天也没有人给我安排工作，在网上瞎逛的时候，突然想起来今年第一天给自己安排的任务，于是花了一上午学习Markdown和Github Page以及jekyll。</p>\n<p>   我想在未来的日子里，我应该做点什么了，逝者如斯夫，应该把生活过的像自己想要的那样，才对嘛。</p>\n"},{"title":"Android:阿里百川、友盟推送SDK集成问题","date":"2015-12-07T07:50:15.000Z","_content":"## 前言\n\n我在安卓项目中先集成了阿里百川即时通讯的SDK，后又集成友盟的消息推送SDK，项目编译的时候就会报以下错误。\n\n```java\nMultiple dex files define Lcom/ta/utdid2/android/utils/UTDID\n```\n\n报错说的很清楚:是项目引用的JAR包有重复的地方。后发现集成阿里系的SDK（支付宝等）都会出现此错误。\n\n## 错误原因\n\n1.友盟推送SDK为了提高设备标识的唯一性，除了UMID之外，还用到了Taobao提供的一个设备标识生成库(UTDID.jar)做双向保证。当前推送SDK兼容的UDID版本是V1.1.0。\n\n2.淘宝提供的设备标识生成库(UTDID.jar)已经广泛应用在阿里系的App中了，包括支付宝。部分集成过支付宝SDK的App，在集成友盟推送SDK的时候，会存在包冲突的问题。 为此我们提供了去UTDID版本的SDK供开发者集成使用\n\n## 解决方法\n\n1.到友盟[SDK下载页](http://dev.umeng.com/push/android/sdk-download)去下载去UTDID版本的SDK，再集成到安卓项目中\n\n\n","source":"_posts/阿里百川、友盟推送SDK集成.md","raw":"---\ntitle: Android:阿里百川、友盟推送SDK集成问题\ndate: 2015-12-07 15:50:15\ntags:\n- Android\n- 阿里百川\n- 友盟推送\ncategories:\n- 开发\n- iOS\n---\n## 前言\n\n我在安卓项目中先集成了阿里百川即时通讯的SDK，后又集成友盟的消息推送SDK，项目编译的时候就会报以下错误。\n\n```java\nMultiple dex files define Lcom/ta/utdid2/android/utils/UTDID\n```\n\n报错说的很清楚:是项目引用的JAR包有重复的地方。后发现集成阿里系的SDK（支付宝等）都会出现此错误。\n\n## 错误原因\n\n1.友盟推送SDK为了提高设备标识的唯一性，除了UMID之外，还用到了Taobao提供的一个设备标识生成库(UTDID.jar)做双向保证。当前推送SDK兼容的UDID版本是V1.1.0。\n\n2.淘宝提供的设备标识生成库(UTDID.jar)已经广泛应用在阿里系的App中了，包括支付宝。部分集成过支付宝SDK的App，在集成友盟推送SDK的时候，会存在包冲突的问题。 为此我们提供了去UTDID版本的SDK供开发者集成使用\n\n## 解决方法\n\n1.到友盟[SDK下载页](http://dev.umeng.com/push/android/sdk-download)去下载去UTDID版本的SDK，再集成到安卓项目中\n\n\n","slug":"阿里百川、友盟推送SDK集成","published":1,"updated":"2016-08-09T08:39:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bw000khnh1vbnskp1a","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我在安卓项目中先集成了阿里百川即时通讯的SDK，后又集成友盟的消息推送SDK，项目编译的时候就会报以下错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Multiple dex files define Lcom/ta/utdid2/android/utils/UTDID</div></pre></td></tr></table></figure>\n<p>报错说的很清楚:是项目引用的JAR包有重复的地方。后发现集成阿里系的SDK（支付宝等）都会出现此错误。</p>\n<h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p>1.友盟推送SDK为了提高设备标识的唯一性，除了UMID之外，还用到了Taobao提供的一个设备标识生成库(UTDID.jar)做双向保证。当前推送SDK兼容的UDID版本是V1.1.0。</p>\n<p>2.淘宝提供的设备标识生成库(UTDID.jar)已经广泛应用在阿里系的App中了，包括支付宝。部分集成过支付宝SDK的App，在集成友盟推送SDK的时候，会存在包冲突的问题。 为此我们提供了去UTDID版本的SDK供开发者集成使用</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>1.到友盟<a href=\"http://dev.umeng.com/push/android/sdk-download\" target=\"_blank\" rel=\"external\">SDK下载页</a>去下载去UTDID版本的SDK，再集成到安卓项目中</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我在安卓项目中先集成了阿里百川即时通讯的SDK，后又集成友盟的消息推送SDK，项目编译的时候就会报以下错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Multiple dex files define Lcom/ta/utdid2/android/utils/UTDID</div></pre></td></tr></table></figure>\n<p>报错说的很清楚:是项目引用的JAR包有重复的地方。后发现集成阿里系的SDK（支付宝等）都会出现此错误。</p>\n<h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p>1.友盟推送SDK为了提高设备标识的唯一性，除了UMID之外，还用到了Taobao提供的一个设备标识生成库(UTDID.jar)做双向保证。当前推送SDK兼容的UDID版本是V1.1.0。</p>\n<p>2.淘宝提供的设备标识生成库(UTDID.jar)已经广泛应用在阿里系的App中了，包括支付宝。部分集成过支付宝SDK的App，在集成友盟推送SDK的时候，会存在包冲突的问题。 为此我们提供了去UTDID版本的SDK供开发者集成使用</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>1.到友盟<a href=\"http://dev.umeng.com/push/android/sdk-download\">SDK下载页</a>去下载去UTDID版本的SDK，再集成到安卓项目中</p>\n"},{"title":"iOS:阿里百川即时通讯功能","date":"2015-12-02T12:55:15.000Z","_content":"\n## 前言\n   \n在[iOS-webApp客户端开发小记](../../../../2015/11/06/iOS-webApp客户端开发-小记/) 的最后，我提到我们公司的产品需要在现有产品结构中加入即时通讯功能。经过对现有第三方即时通讯产品的试用和分析，我们最终选择了阿里百川提供的及时通讯功能。\n\n## 项目需求\n\n1.学生与老师之间要能沟通（单聊）\n\n2.在同一门课程中，老师与学生们在一个聊天群里（群聊）\n\n3.学生和老师要可以和我们公司的技术支持人员能沟通（客服）\n\n\n## 技术选型\n\n前期调研了容联云、LeanCloud、环信、Bmob、阿里百川、友盟等一些做即时通信服务的第三方服务。首先我们需要其提供iOS、Android、h5、Java的SDK，接着试用了他们的Demo，然后看他们的开发文档是否详尽（公司与公司之间的开发文档真的差距好大），最后看他们的技术实力与公司实力（总不能比我们的产品先倒闭吧，哈哈）。\n\n最后选中了阿里百川，首先其是阿里无线事业部下属的，他们的技术实力和公司实力不用怀疑。其实我第一眼看中的还是他们的开发文档，非常的完善，其次是这个项目应该开始不久，他们的技术支持非常给力，一线的开发人员在充当客服，在开发的时候还跟他们打了好几通电话，技术支持非常的棒。\n\n## 项目开发\n\n这里讲的是iOS端如何整合阿里百川的SDK。我采用的是Swift开发，而阿里百川提供的官方文档是针对Objective-C项目的，所以在此记录一下Swift项目是怎样整合的。下面主要介绍快速集成和APNS推送，相信通过这两点，就会对如何在Swift中调用IMSDK相关功能有个了解，那么其他功能调用也会容易实现。\n\n### 1.快速集成\n\n#### Step1-Step5 引入IMSDK\n按照阿里百川的即时通信服务的快速集成文档，完成Step1-Step5都是没有什么问题的。百川提供了非常好的胶水代码（将我们的App和IMSDK粘合起来的中间代码），其中包含对IMSDK主流程接口的调用代码，例如初始化、登录准备、登录、注销、打开会话列表、打开聊天页面。\n通过调用、学习胶水代码可以为我们后期自己直接操作IMSDK来定制功能提供方向。\n\n在拖入胶水代码后就是初始化IMSDK，由于胶水代码是OC文件，在Swift项目中需要建立桥接头文件，这里可以偷个懒，直接在项目中新建一个OC文件，然后会自动生成一个桥接头文件，然后再把刚才这个OC文件删除即可，这样可以省去在项目中配置桥接头文件这一步。接着，在桥接头文件中，引入胶水代码的头文件：`#import \"SPKitExample.h\"`\n\n#### Step6 初始化IMSDK\n\n在AppDelegate.swift调用基础入口胶水函数：`callThisInDidFinishLaunching`\n\n``` swift\nfunc application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n    // Override point for customization after application launch.\n    //函数中初始化IMSDK\n        SPKitExample.sharedInstance().callThisInDidFinishLaunching()\n    return true\n}\n```\n注意：要到SPKitExample.m里exampleInit登录函数这把key换成我们自己申请的AppKey\n\n#### Step7 登录IMSDK\n\n在用户登录我们自己App的账号成功后，调用基础入口胶水函数callThisAfterISVAccountLoginSuccessWithYWLoginId，使其登录IMSDK。在应用里，我用Swift稍微封装了一下登录的代码:\n\n```swift\nfunc loginBaichuan(userid:String,password:String) {\n    //应用登陆成功后，调用SDK\n        SPKitExample.sharedInstance().callThisAfterISVAccountLoginSuccessWithYWLoginId(userid, passWord:password, preloginedBlock: nil, successBlock: {() -> Void in (\nprint(\"哈哈哈，登录成功！\"))}, failedBlock: nil)\n}\n```\n\n注意：在用户退出我们的App之后，还需要使其退出IMSDK，不然App在后台，用户没有登录我们的账号体系，但是还会受到来自即时通讯功能的新消息推送。这是退出的代码：\n\n`SPKitExample.sharedInstance().callThisBeforeISVAccountLogout()`\n\n#### Step8 打开会话列表和聊天页面\n\n1. 打开会话列表\n\n\t我们app采用的是UINavigationController方式，所以打开会话列表的代码如下：\n\n\t```swift\nfunc openTalkList(){\n    let result:YWConversationListViewController = SPKitExample.sharedInstance().ywIMKit.makeConversationListViewController()\n    result.title = \"最近联系人\"\n    result.setDidSelectItemBlock { (YWConversation) -> Void in (\n        SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithConversation(YWConversation, fromNavigationController: self.navigationController))\n    }\n    self.navigationController?.navigationBarHidden = false\n    self.navigationController?.pushViewController(result, animated: true)\n}\n\t```\n\n2. 打开单聊页面\n\n\t我直接调用是胶水函数里面的`exampleOpenConversationViewControllerWithPerson`方法\n\t\n\t```swift\nfunc talk2Teacher(teacherId:String) { \n    SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithPerson(YWPerson(personId:teacherId),fromNavigationController:self.navigationController)\n}\n\t```\n\n3. 打开群聊界面\n\n    阿里百川的文档里面写的是调用胶水函数里面的`exampleOpenConversationViewControllerWithTribe`方法，但是该方法要求传入一个`YWTribe`类型的群组聊天变量。由于阿里百川即时通讯的架构是自建账号体系，所以我们的App只能从服务器处获取当前用户所在群的群ID，但是胶水函数里面没有现成的通过群ID打开群聊的功能，所以我通过看胶水代码以及IMSDK的群服务相关的头文件`IYWTribeService.h`，找到`IMCore.getTribeService().requestTribeFromServer`函数，它可以返回一个`YWTribe`类型的群变量。所以我先通过该函数根据群ID查询到群信息，并且根据YWTribe类型的群变量再调用`exampleOpenConversationViewControllerWithTribe`方法。\n \n\t```swift\nfunc talk2Group(groudId:String) { \n    SPKitExample.sharedInstance().ywIMKit.IMCore.getTribeService().requestTribeFromServer(groudId, completion: { (YWTribe, NSError) -> Void in SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithTribe(YWTribe,fromNavigationController:self.navigationController))\n}\n```\n\n\t我觉得，胶水函数里既然有根据对方的用户ID来打开单聊界面的封装函数，就应该有这样一个根据群ID来打开群聊界面的封装函数。当时，由于对IMSDK结构的不熟悉，这个功能我还花了一些时间来找接口实现。\n\n### 2.APNS推送\n\n我在另外一篇博文里介绍了在iOS9-Swift2-Xcode7环境下的APNS推送相关的内容，这里介绍一下具体的在阿里百川环境下的实现。\n\n#### Step1 制作并上传证书\n\n申请推送证书这个百度有很多教程，这里不在赘述了，反正要注意阿里百川的后台需要的生产环境的证书。\n\n#### Step2 申请DeviceToken\n\n首先需要在`AppDelegate.swift`文件的`func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool`函数里添加以下两句来向Apple的APNS服务器注册申请DeviceToken，这里可以设置新消息推送来App的展现形式，有Sound、Alert、Badge三种。\n\n```swift\nUIApplication.sharedApplication().registerUserNotificationSettings(UIUserNotificationSettings(forTypes: [UIUserNotificationType.Sound , UIUserNotificationType.Alert , UIUserNotificationType.Badge], categories: nil))\nUIApplication.sharedApplication().registerForRemoteNotifications()\n```\n\n接着添加注册申请DeviceToken成功的回调函数：\n\n\n```swift\nfunc application(application:UIApplication,didRegisterForRemoteNotificationsWithDeviceToken deviceToken:NSData) {\n    let token:String = deviceToken.description.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: \"<>\"))\n    print(\"token==\\(token)\")\n    //将token发送到服务器\n}\n```\n注意：IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK\n\n#### Step3 处理APNS消息\n\n由于初始化SDK的时候就调用了`SPKitExample.sharedInstance().callThisInDidFinishLaunching()`函数，在`callThisInDidFinishLaunching`里面已经调用了`exampleHandleAPNSPush()`,所以就不用像文档里面说的那样再在`AppDelegate didFinishLoadingWithOptions`调用`IYWPushService`的`setHandlePushBlockV3:`方法。\n\n#### Step4 Xcode设置为Distribution证书的AdHoc Provision打包\n\n由于阿里百川使用的生产环节下的推送证书，而我们又不能等到应用上线到AppStore后再测试，所以这里Provisioning Profiles使用AdHoc Provision，如何申请百度也有很多教程，这里就不在赘述。\n\n这里讲一下Xcode7设置打包环境的过程：\n\n首先设置Project下的Code Signing：\nCode Signing Identity 全部设置为Distribution证书\nProvisioning Profiles设置为申请的Distribution-AdHoc Provision证书\n\n再设置Target下的Code Signing：\nCode Signing Identity 全部设置为Automatic证书\nProvisioning Profiles设置为申请的Distribution-AdHoc Provision证书\n\n在这里我遇到很多坑，经过不断的测试才发现这样的设置可以正常使用。这里我有一个疑问，就是我在第一次使用阿里百川APNS推送时，对证书不是很了解，都没有申请Distribution-AdHoc Provision，糊里糊涂就实现了推送，但是后来不知道自己怎么改动了设置，APNS就不能推送到app了。后期我学习了苹果的证书系统，申请了Distribution-AdHoc Provision证书，才又实现了APNS推送，关于第一次是如何实现功能的，我到现在都没弄明白。\n\n#### Q&A\n\n如果App在后台收不到推送的消息，请参考我那篇博文以及百川的文档，里面有教我们如何利用APNS调试工具通过使用我们的证书，手动Push一条消息到我们的App。通过此方法检测推送证书和DeviceToken是否正确。如果手动推送可以，则说明App证书打包以及申请DeviceToken都是没有问题的，此时应该检测一下提交到阿里百川后台的证书有没有问题。\n\n## 项目总结\n\n即时通讯功能虽然只是我开发的app中的一个功能，但通过在项目中引用阿里百川即时通讯服务，让我懂了一点如何在Swift项目调用OC-SDK，这为我调用更多第三方OC语言SDK提供了基础。\n\n在这里非常感谢阿里百川-即时通讯的技术支持在我开发过程中提供的帮助！\n\n\n","source":"_posts/阿里百川即时通讯功能-iOS开发.md","raw":"---\ntitle: iOS:阿里百川即时通讯功能\ndate: 2015-12-02 20:55:15\ntags:\n- iOS\n- Swift\n- 即时通讯\n- 阿里百川\ncategories:\n- 开发\n- iOS\n---\n\n## 前言\n   \n在[iOS-webApp客户端开发小记](../../../../2015/11/06/iOS-webApp客户端开发-小记/) 的最后，我提到我们公司的产品需要在现有产品结构中加入即时通讯功能。经过对现有第三方即时通讯产品的试用和分析，我们最终选择了阿里百川提供的及时通讯功能。\n\n## 项目需求\n\n1.学生与老师之间要能沟通（单聊）\n\n2.在同一门课程中，老师与学生们在一个聊天群里（群聊）\n\n3.学生和老师要可以和我们公司的技术支持人员能沟通（客服）\n\n\n## 技术选型\n\n前期调研了容联云、LeanCloud、环信、Bmob、阿里百川、友盟等一些做即时通信服务的第三方服务。首先我们需要其提供iOS、Android、h5、Java的SDK，接着试用了他们的Demo，然后看他们的开发文档是否详尽（公司与公司之间的开发文档真的差距好大），最后看他们的技术实力与公司实力（总不能比我们的产品先倒闭吧，哈哈）。\n\n最后选中了阿里百川，首先其是阿里无线事业部下属的，他们的技术实力和公司实力不用怀疑。其实我第一眼看中的还是他们的开发文档，非常的完善，其次是这个项目应该开始不久，他们的技术支持非常给力，一线的开发人员在充当客服，在开发的时候还跟他们打了好几通电话，技术支持非常的棒。\n\n## 项目开发\n\n这里讲的是iOS端如何整合阿里百川的SDK。我采用的是Swift开发，而阿里百川提供的官方文档是针对Objective-C项目的，所以在此记录一下Swift项目是怎样整合的。下面主要介绍快速集成和APNS推送，相信通过这两点，就会对如何在Swift中调用IMSDK相关功能有个了解，那么其他功能调用也会容易实现。\n\n### 1.快速集成\n\n#### Step1-Step5 引入IMSDK\n按照阿里百川的即时通信服务的快速集成文档，完成Step1-Step5都是没有什么问题的。百川提供了非常好的胶水代码（将我们的App和IMSDK粘合起来的中间代码），其中包含对IMSDK主流程接口的调用代码，例如初始化、登录准备、登录、注销、打开会话列表、打开聊天页面。\n通过调用、学习胶水代码可以为我们后期自己直接操作IMSDK来定制功能提供方向。\n\n在拖入胶水代码后就是初始化IMSDK，由于胶水代码是OC文件，在Swift项目中需要建立桥接头文件，这里可以偷个懒，直接在项目中新建一个OC文件，然后会自动生成一个桥接头文件，然后再把刚才这个OC文件删除即可，这样可以省去在项目中配置桥接头文件这一步。接着，在桥接头文件中，引入胶水代码的头文件：`#import \"SPKitExample.h\"`\n\n#### Step6 初始化IMSDK\n\n在AppDelegate.swift调用基础入口胶水函数：`callThisInDidFinishLaunching`\n\n``` swift\nfunc application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n    // Override point for customization after application launch.\n    //函数中初始化IMSDK\n        SPKitExample.sharedInstance().callThisInDidFinishLaunching()\n    return true\n}\n```\n注意：要到SPKitExample.m里exampleInit登录函数这把key换成我们自己申请的AppKey\n\n#### Step7 登录IMSDK\n\n在用户登录我们自己App的账号成功后，调用基础入口胶水函数callThisAfterISVAccountLoginSuccessWithYWLoginId，使其登录IMSDK。在应用里，我用Swift稍微封装了一下登录的代码:\n\n```swift\nfunc loginBaichuan(userid:String,password:String) {\n    //应用登陆成功后，调用SDK\n        SPKitExample.sharedInstance().callThisAfterISVAccountLoginSuccessWithYWLoginId(userid, passWord:password, preloginedBlock: nil, successBlock: {() -> Void in (\nprint(\"哈哈哈，登录成功！\"))}, failedBlock: nil)\n}\n```\n\n注意：在用户退出我们的App之后，还需要使其退出IMSDK，不然App在后台，用户没有登录我们的账号体系，但是还会受到来自即时通讯功能的新消息推送。这是退出的代码：\n\n`SPKitExample.sharedInstance().callThisBeforeISVAccountLogout()`\n\n#### Step8 打开会话列表和聊天页面\n\n1. 打开会话列表\n\n\t我们app采用的是UINavigationController方式，所以打开会话列表的代码如下：\n\n\t```swift\nfunc openTalkList(){\n    let result:YWConversationListViewController = SPKitExample.sharedInstance().ywIMKit.makeConversationListViewController()\n    result.title = \"最近联系人\"\n    result.setDidSelectItemBlock { (YWConversation) -> Void in (\n        SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithConversation(YWConversation, fromNavigationController: self.navigationController))\n    }\n    self.navigationController?.navigationBarHidden = false\n    self.navigationController?.pushViewController(result, animated: true)\n}\n\t```\n\n2. 打开单聊页面\n\n\t我直接调用是胶水函数里面的`exampleOpenConversationViewControllerWithPerson`方法\n\t\n\t```swift\nfunc talk2Teacher(teacherId:String) { \n    SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithPerson(YWPerson(personId:teacherId),fromNavigationController:self.navigationController)\n}\n\t```\n\n3. 打开群聊界面\n\n    阿里百川的文档里面写的是调用胶水函数里面的`exampleOpenConversationViewControllerWithTribe`方法，但是该方法要求传入一个`YWTribe`类型的群组聊天变量。由于阿里百川即时通讯的架构是自建账号体系，所以我们的App只能从服务器处获取当前用户所在群的群ID，但是胶水函数里面没有现成的通过群ID打开群聊的功能，所以我通过看胶水代码以及IMSDK的群服务相关的头文件`IYWTribeService.h`，找到`IMCore.getTribeService().requestTribeFromServer`函数，它可以返回一个`YWTribe`类型的群变量。所以我先通过该函数根据群ID查询到群信息，并且根据YWTribe类型的群变量再调用`exampleOpenConversationViewControllerWithTribe`方法。\n \n\t```swift\nfunc talk2Group(groudId:String) { \n    SPKitExample.sharedInstance().ywIMKit.IMCore.getTribeService().requestTribeFromServer(groudId, completion: { (YWTribe, NSError) -> Void in SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithTribe(YWTribe,fromNavigationController:self.navigationController))\n}\n```\n\n\t我觉得，胶水函数里既然有根据对方的用户ID来打开单聊界面的封装函数，就应该有这样一个根据群ID来打开群聊界面的封装函数。当时，由于对IMSDK结构的不熟悉，这个功能我还花了一些时间来找接口实现。\n\n### 2.APNS推送\n\n我在另外一篇博文里介绍了在iOS9-Swift2-Xcode7环境下的APNS推送相关的内容，这里介绍一下具体的在阿里百川环境下的实现。\n\n#### Step1 制作并上传证书\n\n申请推送证书这个百度有很多教程，这里不在赘述了，反正要注意阿里百川的后台需要的生产环境的证书。\n\n#### Step2 申请DeviceToken\n\n首先需要在`AppDelegate.swift`文件的`func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool`函数里添加以下两句来向Apple的APNS服务器注册申请DeviceToken，这里可以设置新消息推送来App的展现形式，有Sound、Alert、Badge三种。\n\n```swift\nUIApplication.sharedApplication().registerUserNotificationSettings(UIUserNotificationSettings(forTypes: [UIUserNotificationType.Sound , UIUserNotificationType.Alert , UIUserNotificationType.Badge], categories: nil))\nUIApplication.sharedApplication().registerForRemoteNotifications()\n```\n\n接着添加注册申请DeviceToken成功的回调函数：\n\n\n```swift\nfunc application(application:UIApplication,didRegisterForRemoteNotificationsWithDeviceToken deviceToken:NSData) {\n    let token:String = deviceToken.description.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: \"<>\"))\n    print(\"token==\\(token)\")\n    //将token发送到服务器\n}\n```\n注意：IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK\n\n#### Step3 处理APNS消息\n\n由于初始化SDK的时候就调用了`SPKitExample.sharedInstance().callThisInDidFinishLaunching()`函数，在`callThisInDidFinishLaunching`里面已经调用了`exampleHandleAPNSPush()`,所以就不用像文档里面说的那样再在`AppDelegate didFinishLoadingWithOptions`调用`IYWPushService`的`setHandlePushBlockV3:`方法。\n\n#### Step4 Xcode设置为Distribution证书的AdHoc Provision打包\n\n由于阿里百川使用的生产环节下的推送证书，而我们又不能等到应用上线到AppStore后再测试，所以这里Provisioning Profiles使用AdHoc Provision，如何申请百度也有很多教程，这里就不在赘述。\n\n这里讲一下Xcode7设置打包环境的过程：\n\n首先设置Project下的Code Signing：\nCode Signing Identity 全部设置为Distribution证书\nProvisioning Profiles设置为申请的Distribution-AdHoc Provision证书\n\n再设置Target下的Code Signing：\nCode Signing Identity 全部设置为Automatic证书\nProvisioning Profiles设置为申请的Distribution-AdHoc Provision证书\n\n在这里我遇到很多坑，经过不断的测试才发现这样的设置可以正常使用。这里我有一个疑问，就是我在第一次使用阿里百川APNS推送时，对证书不是很了解，都没有申请Distribution-AdHoc Provision，糊里糊涂就实现了推送，但是后来不知道自己怎么改动了设置，APNS就不能推送到app了。后期我学习了苹果的证书系统，申请了Distribution-AdHoc Provision证书，才又实现了APNS推送，关于第一次是如何实现功能的，我到现在都没弄明白。\n\n#### Q&A\n\n如果App在后台收不到推送的消息，请参考我那篇博文以及百川的文档，里面有教我们如何利用APNS调试工具通过使用我们的证书，手动Push一条消息到我们的App。通过此方法检测推送证书和DeviceToken是否正确。如果手动推送可以，则说明App证书打包以及申请DeviceToken都是没有问题的，此时应该检测一下提交到阿里百川后台的证书有没有问题。\n\n## 项目总结\n\n即时通讯功能虽然只是我开发的app中的一个功能，但通过在项目中引用阿里百川即时通讯服务，让我懂了一点如何在Swift项目调用OC-SDK，这为我调用更多第三方OC语言SDK提供了基础。\n\n在这里非常感谢阿里百川-即时通讯的技术支持在我开发过程中提供的帮助！\n\n\n","slug":"阿里百川即时通讯功能-iOS开发","published":1,"updated":"2016-08-09T08:39:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9by000lhnh1i4uva8kn","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"../../../../2015/11/06/iOS-webApp客户端开发-小记/\">iOS-webApp客户端开发小记</a> 的最后，我提到我们公司的产品需要在现有产品结构中加入即时通讯功能。经过对现有第三方即时通讯产品的试用和分析，我们最终选择了阿里百川提供的及时通讯功能。</p>\n<h2 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h2><p>1.学生与老师之间要能沟通（单聊）</p>\n<p>2.在同一门课程中，老师与学生们在一个聊天群里（群聊）</p>\n<p>3.学生和老师要可以和我们公司的技术支持人员能沟通（客服）</p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>前期调研了容联云、LeanCloud、环信、Bmob、阿里百川、友盟等一些做即时通信服务的第三方服务。首先我们需要其提供iOS、Android、h5、Java的SDK，接着试用了他们的Demo，然后看他们的开发文档是否详尽（公司与公司之间的开发文档真的差距好大），最后看他们的技术实力与公司实力（总不能比我们的产品先倒闭吧，哈哈）。</p>\n<p>最后选中了阿里百川，首先其是阿里无线事业部下属的，他们的技术实力和公司实力不用怀疑。其实我第一眼看中的还是他们的开发文档，非常的完善，其次是这个项目应该开始不久，他们的技术支持非常给力，一线的开发人员在充当客服，在开发的时候还跟他们打了好几通电话，技术支持非常的棒。</p>\n<h2 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h2><p>这里讲的是iOS端如何整合阿里百川的SDK。我采用的是Swift开发，而阿里百川提供的官方文档是针对Objective-C项目的，所以在此记录一下Swift项目是怎样整合的。下面主要介绍快速集成和APNS推送，相信通过这两点，就会对如何在Swift中调用IMSDK相关功能有个了解，那么其他功能调用也会容易实现。</p>\n<h3 id=\"1-快速集成\"><a href=\"#1-快速集成\" class=\"headerlink\" title=\"1.快速集成\"></a>1.快速集成</h3><h4 id=\"Step1-Step5-引入IMSDK\"><a href=\"#Step1-Step5-引入IMSDK\" class=\"headerlink\" title=\"Step1-Step5 引入IMSDK\"></a>Step1-Step5 引入IMSDK</h4><p>按照阿里百川的即时通信服务的快速集成文档，完成Step1-Step5都是没有什么问题的。百川提供了非常好的胶水代码（将我们的App和IMSDK粘合起来的中间代码），其中包含对IMSDK主流程接口的调用代码，例如初始化、登录准备、登录、注销、打开会话列表、打开聊天页面。<br>通过调用、学习胶水代码可以为我们后期自己直接操作IMSDK来定制功能提供方向。</p>\n<p>在拖入胶水代码后就是初始化IMSDK，由于胶水代码是OC文件，在Swift项目中需要建立桥接头文件，这里可以偷个懒，直接在项目中新建一个OC文件，然后会自动生成一个桥接头文件，然后再把刚才这个OC文件删除即可，这样可以省去在项目中配置桥接头文件这一步。接着，在桥接头文件中，引入胶水代码的头文件：<code>#import &quot;SPKitExample.h&quot;</code></p>\n<h4 id=\"Step6-初始化IMSDK\"><a href=\"#Step6-初始化IMSDK\" class=\"headerlink\" title=\"Step6 初始化IMSDK\"></a>Step6 初始化IMSDK</h4><p>在AppDelegate.swift调用基础入口胶水函数：<code>callThisInDidFinishLaunching</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">application</span><span class=\"params\">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Override point for customization after application launch.</span></div><div class=\"line\">    <span class=\"comment\">//函数中初始化IMSDK</span></div><div class=\"line\">        <span class=\"type\">SPKitExample</span>.sharedInstance().callThisInDidFinishLaunching()</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：要到SPKitExample.m里exampleInit登录函数这把key换成我们自己申请的AppKey</p>\n<h4 id=\"Step7-登录IMSDK\"><a href=\"#Step7-登录IMSDK\" class=\"headerlink\" title=\"Step7 登录IMSDK\"></a>Step7 登录IMSDK</h4><p>在用户登录我们自己App的账号成功后，调用基础入口胶水函数callThisAfterISVAccountLoginSuccessWithYWLoginId，使其登录IMSDK。在应用里，我用Swift稍微封装了一下登录的代码:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loginBaichuan</span><span class=\"params\">(userid:String,password:String)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//应用登陆成功后，调用SDK</span></div><div class=\"line\">        <span class=\"type\">SPKitExample</span>.sharedInstance().callThisAfterISVAccountLoginSuccessWithYWLoginId(userid, passWord:password, preloginedBlock: <span class=\"literal\">nil</span>, successBlock: &#123;() -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> (</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"哈哈哈，登录成功！\"</span>))&#125;, failedBlock: <span class=\"literal\">nil</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：在用户退出我们的App之后，还需要使其退出IMSDK，不然App在后台，用户没有登录我们的账号体系，但是还会受到来自即时通讯功能的新消息推送。这是退出的代码：</p>\n<p><code>SPKitExample.sharedInstance().callThisBeforeISVAccountLogout()</code></p>\n<h4 id=\"Step8-打开会话列表和聊天页面\"><a href=\"#Step8-打开会话列表和聊天页面\" class=\"headerlink\" title=\"Step8 打开会话列表和聊天页面\"></a>Step8 打开会话列表和聊天页面</h4><ol>\n<li><p>打开会话列表</p>\n<p> 我们app采用的是UINavigationController方式，所以打开会话列表的代码如下：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">openTalkList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result:<span class=\"type\">YWConversationListViewController</span> = <span class=\"type\">SPKitExample</span>.sharedInstance().ywIMKit.makeConversationListViewController()</div><div class=\"line\">    result.title = <span class=\"string\">\"最近联系人\"</span></div><div class=\"line\">    result.setDidSelectItemBlock &#123; (<span class=\"type\">YWConversation</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> (</div><div class=\"line\">        <span class=\"type\">SPKitExample</span>.sharedInstance().exampleOpenConversationViewControllerWithConversation(<span class=\"type\">YWConversation</span>, fromNavigationController: <span class=\"keyword\">self</span>.navigationController))</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationController?.navigationBarHidden = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationController?.pushViewController(result, animated: <span class=\"literal\">true</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开单聊页面</p>\n<p> 我直接调用是胶水函数里面的<code>exampleOpenConversationViewControllerWithPerson</code>方法</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">talk2Teacher</span><span class=\"params\">(teacherId:String)</span></span> &#123; </div><div class=\"line\">    <span class=\"type\">SPKitExample</span>.sharedInstance().exampleOpenConversationViewControllerWithPerson(<span class=\"type\">YWPerson</span>(personId:teacherId),fromNavigationController:<span class=\"keyword\">self</span>.navigationController)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开群聊界面</p>\n<p> 阿里百川的文档里面写的是调用胶水函数里面的<code>exampleOpenConversationViewControllerWithTribe</code>方法，但是该方法要求传入一个<code>YWTribe</code>类型的群组聊天变量。由于阿里百川即时通讯的架构是自建账号体系，所以我们的App只能从服务器处获取当前用户所在群的群ID，但是胶水函数里面没有现成的通过群ID打开群聊的功能，所以我通过看胶水代码以及IMSDK的群服务相关的头文件<code>IYWTribeService.h</code>，找到<code>IMCore.getTribeService().requestTribeFromServer</code>函数，它可以返回一个<code>YWTribe</code>类型的群变量。所以我先通过该函数根据群ID查询到群信息，并且根据YWTribe类型的群变量再调用<code>exampleOpenConversationViewControllerWithTribe</code>方法。</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">talk2Group</span><span class=\"params\">(groudId:String)</span></span> &#123; </div><div class=\"line\">    <span class=\"type\">SPKitExample</span>.sharedInstance().ywIMKit.<span class=\"type\">IMCore</span>.getTribeService().requestTribeFromServer(groudId, completion: &#123; (<span class=\"type\">YWTribe</span>, <span class=\"type\">NSError</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> <span class=\"type\">SPKitExample</span>.sharedInstance().exampleOpenConversationViewControllerWithTribe(<span class=\"type\">YWTribe</span>,fromNavigationController:<span class=\"keyword\">self</span>.navigationController))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 我觉得，胶水函数里既然有根据对方的用户ID来打开单聊界面的封装函数，就应该有这样一个根据群ID来打开群聊界面的封装函数。当时，由于对IMSDK结构的不熟悉，这个功能我还花了一些时间来找接口实现。</p>\n</li>\n</ol>\n<h3 id=\"2-APNS推送\"><a href=\"#2-APNS推送\" class=\"headerlink\" title=\"2.APNS推送\"></a>2.APNS推送</h3><p>我在另外一篇博文里介绍了在iOS9-Swift2-Xcode7环境下的APNS推送相关的内容，这里介绍一下具体的在阿里百川环境下的实现。</p>\n<h4 id=\"Step1-制作并上传证书\"><a href=\"#Step1-制作并上传证书\" class=\"headerlink\" title=\"Step1 制作并上传证书\"></a>Step1 制作并上传证书</h4><p>申请推送证书这个百度有很多教程，这里不在赘述了，反正要注意阿里百川的后台需要的生产环境的证书。</p>\n<h4 id=\"Step2-申请DeviceToken\"><a href=\"#Step2-申请DeviceToken\" class=\"headerlink\" title=\"Step2 申请DeviceToken\"></a>Step2 申请DeviceToken</h4><p>首先需要在<code>AppDelegate.swift</code>文件的<code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool</code>函数里添加以下两句来向Apple的APNS服务器注册申请DeviceToken，这里可以设置新消息推送来App的展现形式，有Sound、Alert、Badge三种。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerUserNotificationSettings(<span class=\"type\">UIUserNotificationSettings</span>(forTypes: [<span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Sound</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Alert</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Badge</span>], categories: <span class=\"literal\">nil</span>))</div><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerForRemoteNotifications()</div></pre></td></tr></table></figure>\n<p>接着添加注册申请DeviceToken成功的回调函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">application</span><span class=\"params\">(application:UIApplication,didRegisterForRemoteNotificationsWithDeviceToken deviceToken:NSData)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> token:<span class=\"type\">String</span> = deviceToken.description.stringByTrimmingCharactersInSet(<span class=\"type\">NSCharacterSet</span>(charactersInString: <span class=\"string\">\"&lt;&gt;\"</span>))</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"token==<span class=\"subst\">\\(token)</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//将token发送到服务器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK</p>\n<h4 id=\"Step3-处理APNS消息\"><a href=\"#Step3-处理APNS消息\" class=\"headerlink\" title=\"Step3 处理APNS消息\"></a>Step3 处理APNS消息</h4><p>由于初始化SDK的时候就调用了<code>SPKitExample.sharedInstance().callThisInDidFinishLaunching()</code>函数，在<code>callThisInDidFinishLaunching</code>里面已经调用了<code>exampleHandleAPNSPush()</code>,所以就不用像文档里面说的那样再在<code>AppDelegate didFinishLoadingWithOptions</code>调用<code>IYWPushService</code>的<code>setHandlePushBlockV3:</code>方法。</p>\n<h4 id=\"Step4-Xcode设置为Distribution证书的AdHoc-Provision打包\"><a href=\"#Step4-Xcode设置为Distribution证书的AdHoc-Provision打包\" class=\"headerlink\" title=\"Step4 Xcode设置为Distribution证书的AdHoc Provision打包\"></a>Step4 Xcode设置为Distribution证书的AdHoc Provision打包</h4><p>由于阿里百川使用的生产环节下的推送证书，而我们又不能等到应用上线到AppStore后再测试，所以这里Provisioning Profiles使用AdHoc Provision，如何申请百度也有很多教程，这里就不在赘述。</p>\n<p>这里讲一下Xcode7设置打包环境的过程：</p>\n<p>首先设置Project下的Code Signing：<br>Code Signing Identity 全部设置为Distribution证书<br>Provisioning Profiles设置为申请的Distribution-AdHoc Provision证书</p>\n<p>再设置Target下的Code Signing：<br>Code Signing Identity 全部设置为Automatic证书<br>Provisioning Profiles设置为申请的Distribution-AdHoc Provision证书</p>\n<p>在这里我遇到很多坑，经过不断的测试才发现这样的设置可以正常使用。这里我有一个疑问，就是我在第一次使用阿里百川APNS推送时，对证书不是很了解，都没有申请Distribution-AdHoc Provision，糊里糊涂就实现了推送，但是后来不知道自己怎么改动了设置，APNS就不能推送到app了。后期我学习了苹果的证书系统，申请了Distribution-AdHoc Provision证书，才又实现了APNS推送，关于第一次是如何实现功能的，我到现在都没弄明白。</p>\n<h4 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h4><p>如果App在后台收不到推送的消息，请参考我那篇博文以及百川的文档，里面有教我们如何利用APNS调试工具通过使用我们的证书，手动Push一条消息到我们的App。通过此方法检测推送证书和DeviceToken是否正确。如果手动推送可以，则说明App证书打包以及申请DeviceToken都是没有问题的，此时应该检测一下提交到阿里百川后台的证书有没有问题。</p>\n<h2 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h2><p>即时通讯功能虽然只是我开发的app中的一个功能，但通过在项目中引用阿里百川即时通讯服务，让我懂了一点如何在Swift项目调用OC-SDK，这为我调用更多第三方OC语言SDK提供了基础。</p>\n<p>在这里非常感谢阿里百川-即时通讯的技术支持在我开发过程中提供的帮助！</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"../../../../2015/11/06/iOS-webApp客户端开发-小记/\">iOS-webApp客户端开发小记</a> 的最后，我提到我们公司的产品需要在现有产品结构中加入即时通讯功能。经过对现有第三方即时通讯产品的试用和分析，我们最终选择了阿里百川提供的及时通讯功能。</p>\n<h2 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h2><p>1.学生与老师之间要能沟通（单聊）</p>\n<p>2.在同一门课程中，老师与学生们在一个聊天群里（群聊）</p>\n<p>3.学生和老师要可以和我们公司的技术支持人员能沟通（客服）</p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>前期调研了容联云、LeanCloud、环信、Bmob、阿里百川、友盟等一些做即时通信服务的第三方服务。首先我们需要其提供iOS、Android、h5、Java的SDK，接着试用了他们的Demo，然后看他们的开发文档是否详尽（公司与公司之间的开发文档真的差距好大），最后看他们的技术实力与公司实力（总不能比我们的产品先倒闭吧，哈哈）。</p>\n<p>最后选中了阿里百川，首先其是阿里无线事业部下属的，他们的技术实力和公司实力不用怀疑。其实我第一眼看中的还是他们的开发文档，非常的完善，其次是这个项目应该开始不久，他们的技术支持非常给力，一线的开发人员在充当客服，在开发的时候还跟他们打了好几通电话，技术支持非常的棒。</p>\n<h2 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h2><p>这里讲的是iOS端如何整合阿里百川的SDK。我采用的是Swift开发，而阿里百川提供的官方文档是针对Objective-C项目的，所以在此记录一下Swift项目是怎样整合的。下面主要介绍快速集成和APNS推送，相信通过这两点，就会对如何在Swift中调用IMSDK相关功能有个了解，那么其他功能调用也会容易实现。</p>\n<h3 id=\"1-快速集成\"><a href=\"#1-快速集成\" class=\"headerlink\" title=\"1.快速集成\"></a>1.快速集成</h3><h4 id=\"Step1-Step5-引入IMSDK\"><a href=\"#Step1-Step5-引入IMSDK\" class=\"headerlink\" title=\"Step1-Step5 引入IMSDK\"></a>Step1-Step5 引入IMSDK</h4><p>按照阿里百川的即时通信服务的快速集成文档，完成Step1-Step5都是没有什么问题的。百川提供了非常好的胶水代码（将我们的App和IMSDK粘合起来的中间代码），其中包含对IMSDK主流程接口的调用代码，例如初始化、登录准备、登录、注销、打开会话列表、打开聊天页面。<br>通过调用、学习胶水代码可以为我们后期自己直接操作IMSDK来定制功能提供方向。</p>\n<p>在拖入胶水代码后就是初始化IMSDK，由于胶水代码是OC文件，在Swift项目中需要建立桥接头文件，这里可以偷个懒，直接在项目中新建一个OC文件，然后会自动生成一个桥接头文件，然后再把刚才这个OC文件删除即可，这样可以省去在项目中配置桥接头文件这一步。接着，在桥接头文件中，引入胶水代码的头文件：<code>#import &quot;SPKitExample.h&quot;</code></p>\n<h4 id=\"Step6-初始化IMSDK\"><a href=\"#Step6-初始化IMSDK\" class=\"headerlink\" title=\"Step6 初始化IMSDK\"></a>Step6 初始化IMSDK</h4><p>在AppDelegate.swift调用基础入口胶水函数：<code>callThisInDidFinishLaunching</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">application</span><span class=\"params\">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Override point for customization after application launch.</span></div><div class=\"line\">    <span class=\"comment\">//函数中初始化IMSDK</span></div><div class=\"line\">        <span class=\"type\">SPKitExample</span>.sharedInstance().callThisInDidFinishLaunching()</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：要到SPKitExample.m里exampleInit登录函数这把key换成我们自己申请的AppKey</p>\n<h4 id=\"Step7-登录IMSDK\"><a href=\"#Step7-登录IMSDK\" class=\"headerlink\" title=\"Step7 登录IMSDK\"></a>Step7 登录IMSDK</h4><p>在用户登录我们自己App的账号成功后，调用基础入口胶水函数callThisAfterISVAccountLoginSuccessWithYWLoginId，使其登录IMSDK。在应用里，我用Swift稍微封装了一下登录的代码:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loginBaichuan</span><span class=\"params\">(userid:String,password:String)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//应用登陆成功后，调用SDK</span></div><div class=\"line\">        <span class=\"type\">SPKitExample</span>.sharedInstance().callThisAfterISVAccountLoginSuccessWithYWLoginId(userid, passWord:password, preloginedBlock: <span class=\"literal\">nil</span>, successBlock: &#123;() -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> (</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"哈哈哈，登录成功！\"</span>))&#125;, failedBlock: <span class=\"literal\">nil</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：在用户退出我们的App之后，还需要使其退出IMSDK，不然App在后台，用户没有登录我们的账号体系，但是还会受到来自即时通讯功能的新消息推送。这是退出的代码：</p>\n<p><code>SPKitExample.sharedInstance().callThisBeforeISVAccountLogout()</code></p>\n<h4 id=\"Step8-打开会话列表和聊天页面\"><a href=\"#Step8-打开会话列表和聊天页面\" class=\"headerlink\" title=\"Step8 打开会话列表和聊天页面\"></a>Step8 打开会话列表和聊天页面</h4><ol>\n<li><p>打开会话列表</p>\n<p> 我们app采用的是UINavigationController方式，所以打开会话列表的代码如下：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">openTalkList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result:<span class=\"type\">YWConversationListViewController</span> = <span class=\"type\">SPKitExample</span>.sharedInstance().ywIMKit.makeConversationListViewController()</div><div class=\"line\">    result.title = <span class=\"string\">\"最近联系人\"</span></div><div class=\"line\">    result.setDidSelectItemBlock &#123; (<span class=\"type\">YWConversation</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> (</div><div class=\"line\">        <span class=\"type\">SPKitExample</span>.sharedInstance().exampleOpenConversationViewControllerWithConversation(<span class=\"type\">YWConversation</span>, fromNavigationController: <span class=\"keyword\">self</span>.navigationController))</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationController?.navigationBarHidden = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationController?.pushViewController(result, animated: <span class=\"literal\">true</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开单聊页面</p>\n<p> 我直接调用是胶水函数里面的<code>exampleOpenConversationViewControllerWithPerson</code>方法</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">talk2Teacher</span><span class=\"params\">(teacherId:String)</span></span> &#123; </div><div class=\"line\">    <span class=\"type\">SPKitExample</span>.sharedInstance().exampleOpenConversationViewControllerWithPerson(<span class=\"type\">YWPerson</span>(personId:teacherId),fromNavigationController:<span class=\"keyword\">self</span>.navigationController)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开群聊界面</p>\n<p> 阿里百川的文档里面写的是调用胶水函数里面的<code>exampleOpenConversationViewControllerWithTribe</code>方法，但是该方法要求传入一个<code>YWTribe</code>类型的群组聊天变量。由于阿里百川即时通讯的架构是自建账号体系，所以我们的App只能从服务器处获取当前用户所在群的群ID，但是胶水函数里面没有现成的通过群ID打开群聊的功能，所以我通过看胶水代码以及IMSDK的群服务相关的头文件<code>IYWTribeService.h</code>，找到<code>IMCore.getTribeService().requestTribeFromServer</code>函数，它可以返回一个<code>YWTribe</code>类型的群变量。所以我先通过该函数根据群ID查询到群信息，并且根据YWTribe类型的群变量再调用<code>exampleOpenConversationViewControllerWithTribe</code>方法。</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">talk2Group</span><span class=\"params\">(groudId:String)</span></span> &#123; </div><div class=\"line\">    <span class=\"type\">SPKitExample</span>.sharedInstance().ywIMKit.<span class=\"type\">IMCore</span>.getTribeService().requestTribeFromServer(groudId, completion: &#123; (<span class=\"type\">YWTribe</span>, <span class=\"type\">NSError</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> <span class=\"type\">SPKitExample</span>.sharedInstance().exampleOpenConversationViewControllerWithTribe(<span class=\"type\">YWTribe</span>,fromNavigationController:<span class=\"keyword\">self</span>.navigationController))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 我觉得，胶水函数里既然有根据对方的用户ID来打开单聊界面的封装函数，就应该有这样一个根据群ID来打开群聊界面的封装函数。当时，由于对IMSDK结构的不熟悉，这个功能我还花了一些时间来找接口实现。</p>\n</li>\n</ol>\n<h3 id=\"2-APNS推送\"><a href=\"#2-APNS推送\" class=\"headerlink\" title=\"2.APNS推送\"></a>2.APNS推送</h3><p>我在另外一篇博文里介绍了在iOS9-Swift2-Xcode7环境下的APNS推送相关的内容，这里介绍一下具体的在阿里百川环境下的实现。</p>\n<h4 id=\"Step1-制作并上传证书\"><a href=\"#Step1-制作并上传证书\" class=\"headerlink\" title=\"Step1 制作并上传证书\"></a>Step1 制作并上传证书</h4><p>申请推送证书这个百度有很多教程，这里不在赘述了，反正要注意阿里百川的后台需要的生产环境的证书。</p>\n<h4 id=\"Step2-申请DeviceToken\"><a href=\"#Step2-申请DeviceToken\" class=\"headerlink\" title=\"Step2 申请DeviceToken\"></a>Step2 申请DeviceToken</h4><p>首先需要在<code>AppDelegate.swift</code>文件的<code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool</code>函数里添加以下两句来向Apple的APNS服务器注册申请DeviceToken，这里可以设置新消息推送来App的展现形式，有Sound、Alert、Badge三种。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerUserNotificationSettings(<span class=\"type\">UIUserNotificationSettings</span>(forTypes: [<span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Sound</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Alert</span> , <span class=\"type\">UIUserNotificationType</span>.<span class=\"type\">Badge</span>], categories: <span class=\"literal\">nil</span>))</div><div class=\"line\"><span class=\"type\">UIApplication</span>.sharedApplication().registerForRemoteNotifications()</div></pre></td></tr></table></figure>\n<p>接着添加注册申请DeviceToken成功的回调函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">application</span><span class=\"params\">(application:UIApplication,didRegisterForRemoteNotificationsWithDeviceToken deviceToken:NSData)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> token:<span class=\"type\">String</span> = deviceToken.description.stringByTrimmingCharactersInSet(<span class=\"type\">NSCharacterSet</span>(charactersInString: <span class=\"string\">\"&lt;&gt;\"</span>))</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"token==<span class=\"subst\">\\(token)</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//将token发送到服务器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK</p>\n<h4 id=\"Step3-处理APNS消息\"><a href=\"#Step3-处理APNS消息\" class=\"headerlink\" title=\"Step3 处理APNS消息\"></a>Step3 处理APNS消息</h4><p>由于初始化SDK的时候就调用了<code>SPKitExample.sharedInstance().callThisInDidFinishLaunching()</code>函数，在<code>callThisInDidFinishLaunching</code>里面已经调用了<code>exampleHandleAPNSPush()</code>,所以就不用像文档里面说的那样再在<code>AppDelegate didFinishLoadingWithOptions</code>调用<code>IYWPushService</code>的<code>setHandlePushBlockV3:</code>方法。</p>\n<h4 id=\"Step4-Xcode设置为Distribution证书的AdHoc-Provision打包\"><a href=\"#Step4-Xcode设置为Distribution证书的AdHoc-Provision打包\" class=\"headerlink\" title=\"Step4 Xcode设置为Distribution证书的AdHoc Provision打包\"></a>Step4 Xcode设置为Distribution证书的AdHoc Provision打包</h4><p>由于阿里百川使用的生产环节下的推送证书，而我们又不能等到应用上线到AppStore后再测试，所以这里Provisioning Profiles使用AdHoc Provision，如何申请百度也有很多教程，这里就不在赘述。</p>\n<p>这里讲一下Xcode7设置打包环境的过程：</p>\n<p>首先设置Project下的Code Signing：<br>Code Signing Identity 全部设置为Distribution证书<br>Provisioning Profiles设置为申请的Distribution-AdHoc Provision证书</p>\n<p>再设置Target下的Code Signing：<br>Code Signing Identity 全部设置为Automatic证书<br>Provisioning Profiles设置为申请的Distribution-AdHoc Provision证书</p>\n<p>在这里我遇到很多坑，经过不断的测试才发现这样的设置可以正常使用。这里我有一个疑问，就是我在第一次使用阿里百川APNS推送时，对证书不是很了解，都没有申请Distribution-AdHoc Provision，糊里糊涂就实现了推送，但是后来不知道自己怎么改动了设置，APNS就不能推送到app了。后期我学习了苹果的证书系统，申请了Distribution-AdHoc Provision证书，才又实现了APNS推送，关于第一次是如何实现功能的，我到现在都没弄明白。</p>\n<h4 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h4><p>如果App在后台收不到推送的消息，请参考我那篇博文以及百川的文档，里面有教我们如何利用APNS调试工具通过使用我们的证书，手动Push一条消息到我们的App。通过此方法检测推送证书和DeviceToken是否正确。如果手动推送可以，则说明App证书打包以及申请DeviceToken都是没有问题的，此时应该检测一下提交到阿里百川后台的证书有没有问题。</p>\n<h2 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h2><p>即时通讯功能虽然只是我开发的app中的一个功能，但通过在项目中引用阿里百川即时通讯服务，让我懂了一点如何在Swift项目调用OC-SDK，这为我调用更多第三方OC语言SDK提供了基础。</p>\n<p>在这里非常感谢阿里百川-即时通讯的技术支持在我开发过程中提供的帮助！</p>\n"},{"title":"阿里百川用户反馈Swift开发小结","date":"2016-12-29T11:41:25.000Z","_content":"\n## 背景\n\n所有的App都需要给用户一个反馈意见的功能，这样才能让用户使用的更好更方便。不想自己写这一套组件，因此调研了几款第三方的反馈组件。\n\n### Instabug \n九月份上架的师大助手App用的就是这个反馈组件，知乎日报用的也是这个，不管在App任何界面摇一摇就可以触发，Instabug会把当前界面进行截图并且支持用户编辑，非常方便好用的组件，这个用来反馈bug我觉得非常好用，但是作为反馈意见的话，感觉还是缺少一个入口。另外，Instabug采集Bug还是非常准确的。\n\n### LeanCloud\nLeanCloud的反馈组件号称两行代码接入，非常方便，它做成一个对话框的形式，客服与用户可以进行交流，并且用户的反馈可以及时发给开发人员的LeanCloud 手机客户端，实时性非常高。\n\n### 阿里百川\n一年之前开发的app用了阿里百川（阿里巴巴无限开放平台）的即时通讯功能，当时阿里巴巴刚把友盟这些公司收购，阿里巴巴无线开放平台还没有现在这么多功能，一年过去了，现在的功能已经非常多了。今天看用户反馈功能时，看到了他们的2.0版本的反馈组件，觉得这种加入了常见反馈问题这一页特别好，用户在反馈之前，可以先自行查看相似问题的解答。并且，相似问题的解答是可以实时在后台添加修改，这极大方便了用户。\n\n于是就暂定了使用阿里百川，于是进行了接入的技术验证。先看一下效果图：\n<div id=\"tt\" style=\"display: inline-block;\">\n       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_1.PNG\" width=\"50%\" height=\"25%\" />\n       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_2.PNG\" width=\"50%\" height=\"25%\" />\n</div>\n\n## 步骤\n### Part1 阿里百川平台注册\n这里按照官方的接入流程就可以很容易完成了，就不赘述了。\n\n### Part2 用户反馈SDK导入\n我选择使用的是专业版2.0，SDK用的是Cocoapods安装方式，在Podfile添加阿里的私有源。\n\n```swift\nsource 'http://repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecs.git'\nsource 'http://repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecsMirror.git'\ntarget 'YourTargetName' do\n    pod 'YWFeedbackFMWK', '~> 2.0.3.1'\nend\n```\n\n接着使用 `pod install` 安装出现了一个问题，就是我之前用的 Alamofire 等其他很多组件安装不了，出现需要更新的问题，我这里猜测 AliBCSpecsMirror 和 CocoaPods/Specs 有一些差异，弄了一会索性直接在上面再添加 CocoaPods 的仓库，`source 'https://github.com/CocoaPods/Specs.git'`, 这样就能同时安装YWFeedbackFMWK和我之前的其他组件了，但是又会出现repo仓库有两份的warning，这个还没解决好，我考完试再找找解决方法。\n\n注意： Cocoapods集成方式不需要手动添加依赖系统库\n\n修改编译选项：\n在Target->Linking->Other Linker Flags中添加-ObjC选项。\n\niOS 10中隐私权限设置：\n如果不做设置，可能会导致崩溃、审核不通过等情况。需要在info plist中增加字段：\n``` xml\n<key>NSCameraUsageDescription</key>\n<string>访问相机</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>访问相册</string>\n```\n### Part3 初始化SDK，打开反馈页面\n1. 在桥接头文件中加入：\n\n``` swift\n#import <YWFeedbackFMWK/YWFeedbackKit.h>\n#import <YWFeedbackFMWK/YWFeedbackViewController.h>\n```\n\n2. 调用初始化方法：\n\n``` swift\nvar bcKit = BCFeedbackKit(appKey: \"自己的appkey\")\n```\n**注意：**这里需要将在阿里百川后台生成的安全图片添加进项目目录中\n\n3. 设置业务方扩展的反馈数据：\n相当于给反馈信息中加入反馈用户的个人信息，可设置任意字段，在创建反馈页面前设置，可在后台扩展信息中查看。\n\n``` swift\nbcKit.extInfo = [\"username\":\"自己app用户体系中的用户id\"]\n```\n\n4. 打开反馈页面：\n5. \n``` swift\nbcKit.makeFeedbackViewController(completionBlock: { (feedbackVC, error) in\n    if let vc = feedbackVC {\n    // 当用户关闭用户反馈，将调用该block进行dismiss或pop\n        vc.closeBlock = {(aParentController) in\n            aParentController?.navigationController?.popViewController(animated: false)\n        }\n        \n        self.navigationController?.isNavigationBarHidden = false        \n        self.navigationController?.pushViewController(vc, animated: false)\n    }\n})\n```\n\n这样就完成了在app中加入反馈页面的添加。\n\n### Part4 阿里百川控制台配置反馈组件\n在阿里百川用户反馈后台，可以在App内反馈中查看用户发送的反馈信息，还可以在Mobile客户端配置中自定义配置app中反馈页面的UI。这是我觉得的该产品的亮点所在，可以实时配置热门问题，减去了在app开发时需要考虑的动态获取生成热门问题的过程，而且整个appUI全都实时动态设置。具体操作大家用一下就很容易了解了。\n\n## 思考\n通过使用阿里百川用户反馈组件，我又一次看到了H5的用途。对于这类弱使用强度、高数据变更、低页面逻辑的页面，我觉得H5的用途大大体现了，虽然讲这样的一个反馈的原生页面以及一套后台处理系统没有什么技术实现上的困难点，但是对于大部分app开发来讲，还是需要消耗时间精力来做的，更重要的是这不是用户使用app的刚需，因此这种即插即用可服务端实时配置的H5反馈页面的出现恰到好处。\n\n## 番外篇\npush 百川 feedbackVC 的时候，因此 NavigationBar 部分会黑一下再显示。很奇怪的是我如果在 push之前 navigationController 隐藏了 NavigationBar ，这个 feedbackVC 就没有了 NavigationBar。反馈页面其实就是一个 webView，因此我没有搞懂为什么 navigationController 的NavigationBar 显示与否会影响一个 webView 里面 H5 页面的 NavigationBar 显示。这个问题我得再研究研究。\n\n\n\n","source":"_posts/阿里百川用户反馈Swift开发小结.md","raw":"---\ntitle: 阿里百川用户反馈Swift开发小结\ndate: 2016-12-29 19:41:25\ntags:\n- Swift  \n- 阿里百川\n- 用户反馈\ncategories:\n- 开发\n- iOS\n---\n\n## 背景\n\n所有的App都需要给用户一个反馈意见的功能，这样才能让用户使用的更好更方便。不想自己写这一套组件，因此调研了几款第三方的反馈组件。\n\n### Instabug \n九月份上架的师大助手App用的就是这个反馈组件，知乎日报用的也是这个，不管在App任何界面摇一摇就可以触发，Instabug会把当前界面进行截图并且支持用户编辑，非常方便好用的组件，这个用来反馈bug我觉得非常好用，但是作为反馈意见的话，感觉还是缺少一个入口。另外，Instabug采集Bug还是非常准确的。\n\n### LeanCloud\nLeanCloud的反馈组件号称两行代码接入，非常方便，它做成一个对话框的形式，客服与用户可以进行交流，并且用户的反馈可以及时发给开发人员的LeanCloud 手机客户端，实时性非常高。\n\n### 阿里百川\n一年之前开发的app用了阿里百川（阿里巴巴无限开放平台）的即时通讯功能，当时阿里巴巴刚把友盟这些公司收购，阿里巴巴无线开放平台还没有现在这么多功能，一年过去了，现在的功能已经非常多了。今天看用户反馈功能时，看到了他们的2.0版本的反馈组件，觉得这种加入了常见反馈问题这一页特别好，用户在反馈之前，可以先自行查看相似问题的解答。并且，相似问题的解答是可以实时在后台添加修改，这极大方便了用户。\n\n于是就暂定了使用阿里百川，于是进行了接入的技术验证。先看一下效果图：\n<div id=\"tt\" style=\"display: inline-block;\">\n       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_1.PNG\" width=\"50%\" height=\"25%\" />\n       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_2.PNG\" width=\"50%\" height=\"25%\" />\n</div>\n\n## 步骤\n### Part1 阿里百川平台注册\n这里按照官方的接入流程就可以很容易完成了，就不赘述了。\n\n### Part2 用户反馈SDK导入\n我选择使用的是专业版2.0，SDK用的是Cocoapods安装方式，在Podfile添加阿里的私有源。\n\n```swift\nsource 'http://repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecs.git'\nsource 'http://repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecsMirror.git'\ntarget 'YourTargetName' do\n    pod 'YWFeedbackFMWK', '~> 2.0.3.1'\nend\n```\n\n接着使用 `pod install` 安装出现了一个问题，就是我之前用的 Alamofire 等其他很多组件安装不了，出现需要更新的问题，我这里猜测 AliBCSpecsMirror 和 CocoaPods/Specs 有一些差异，弄了一会索性直接在上面再添加 CocoaPods 的仓库，`source 'https://github.com/CocoaPods/Specs.git'`, 这样就能同时安装YWFeedbackFMWK和我之前的其他组件了，但是又会出现repo仓库有两份的warning，这个还没解决好，我考完试再找找解决方法。\n\n注意： Cocoapods集成方式不需要手动添加依赖系统库\n\n修改编译选项：\n在Target->Linking->Other Linker Flags中添加-ObjC选项。\n\niOS 10中隐私权限设置：\n如果不做设置，可能会导致崩溃、审核不通过等情况。需要在info plist中增加字段：\n``` xml\n<key>NSCameraUsageDescription</key>\n<string>访问相机</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>访问相册</string>\n```\n### Part3 初始化SDK，打开反馈页面\n1. 在桥接头文件中加入：\n\n``` swift\n#import <YWFeedbackFMWK/YWFeedbackKit.h>\n#import <YWFeedbackFMWK/YWFeedbackViewController.h>\n```\n\n2. 调用初始化方法：\n\n``` swift\nvar bcKit = BCFeedbackKit(appKey: \"自己的appkey\")\n```\n**注意：**这里需要将在阿里百川后台生成的安全图片添加进项目目录中\n\n3. 设置业务方扩展的反馈数据：\n相当于给反馈信息中加入反馈用户的个人信息，可设置任意字段，在创建反馈页面前设置，可在后台扩展信息中查看。\n\n``` swift\nbcKit.extInfo = [\"username\":\"自己app用户体系中的用户id\"]\n```\n\n4. 打开反馈页面：\n5. \n``` swift\nbcKit.makeFeedbackViewController(completionBlock: { (feedbackVC, error) in\n    if let vc = feedbackVC {\n    // 当用户关闭用户反馈，将调用该block进行dismiss或pop\n        vc.closeBlock = {(aParentController) in\n            aParentController?.navigationController?.popViewController(animated: false)\n        }\n        \n        self.navigationController?.isNavigationBarHidden = false        \n        self.navigationController?.pushViewController(vc, animated: false)\n    }\n})\n```\n\n这样就完成了在app中加入反馈页面的添加。\n\n### Part4 阿里百川控制台配置反馈组件\n在阿里百川用户反馈后台，可以在App内反馈中查看用户发送的反馈信息，还可以在Mobile客户端配置中自定义配置app中反馈页面的UI。这是我觉得的该产品的亮点所在，可以实时配置热门问题，减去了在app开发时需要考虑的动态获取生成热门问题的过程，而且整个appUI全都实时动态设置。具体操作大家用一下就很容易了解了。\n\n## 思考\n通过使用阿里百川用户反馈组件，我又一次看到了H5的用途。对于这类弱使用强度、高数据变更、低页面逻辑的页面，我觉得H5的用途大大体现了，虽然讲这样的一个反馈的原生页面以及一套后台处理系统没有什么技术实现上的困难点，但是对于大部分app开发来讲，还是需要消耗时间精力来做的，更重要的是这不是用户使用app的刚需，因此这种即插即用可服务端实时配置的H5反馈页面的出现恰到好处。\n\n## 番外篇\npush 百川 feedbackVC 的时候，因此 NavigationBar 部分会黑一下再显示。很奇怪的是我如果在 push之前 navigationController 隐藏了 NavigationBar ，这个 feedbackVC 就没有了 NavigationBar。反馈页面其实就是一个 webView，因此我没有搞懂为什么 navigationController 的NavigationBar 显示与否会影响一个 webView 里面 H5 页面的 NavigationBar 显示。这个问题我得再研究研究。\n\n\n\n","slug":"阿里百川用户反馈Swift开发小结","published":1,"updated":"2016-12-29T14:07:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1m7t9bz000ohnh1a01ns8fk","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>所有的App都需要给用户一个反馈意见的功能，这样才能让用户使用的更好更方便。不想自己写这一套组件，因此调研了几款第三方的反馈组件。</p>\n<h3 id=\"Instabug\"><a href=\"#Instabug\" class=\"headerlink\" title=\"Instabug\"></a>Instabug</h3><p>九月份上架的师大助手App用的就是这个反馈组件，知乎日报用的也是这个，不管在App任何界面摇一摇就可以触发，Instabug会把当前界面进行截图并且支持用户编辑，非常方便好用的组件，这个用来反馈bug我觉得非常好用，但是作为反馈意见的话，感觉还是缺少一个入口。另外，Instabug采集Bug还是非常准确的。</p>\n<h3 id=\"LeanCloud\"><a href=\"#LeanCloud\" class=\"headerlink\" title=\"LeanCloud\"></a>LeanCloud</h3><p>LeanCloud的反馈组件号称两行代码接入，非常方便，它做成一个对话框的形式，客服与用户可以进行交流，并且用户的反馈可以及时发给开发人员的LeanCloud 手机客户端，实时性非常高。</p>\n<h3 id=\"阿里百川\"><a href=\"#阿里百川\" class=\"headerlink\" title=\"阿里百川\"></a>阿里百川</h3><p>一年之前开发的app用了阿里百川（阿里巴巴无限开放平台）的即时通讯功能，当时阿里巴巴刚把友盟这些公司收购，阿里巴巴无线开放平台还没有现在这么多功能，一年过去了，现在的功能已经非常多了。今天看用户反馈功能时，看到了他们的2.0版本的反馈组件，觉得这种加入了常见反馈问题这一页特别好，用户在反馈之前，可以先自行查看相似问题的解答。并且，相似问题的解答是可以实时在后台添加修改，这极大方便了用户。</p>\n<p>于是就暂定了使用阿里百川，于是进行了接入的技术验证。先看一下效果图：</p>\n<div id=\"tt\" style=\"display: inline-block;\"><br>       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_1.PNG\" width=\"50%\" height=\"25%\"><br>       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_2.PNG\" width=\"50%\" height=\"25%\"><br></div>\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Part1-阿里百川平台注册\"><a href=\"#Part1-阿里百川平台注册\" class=\"headerlink\" title=\"Part1 阿里百川平台注册\"></a>Part1 阿里百川平台注册</h3><p>这里按照官方的接入流程就可以很容易完成了，就不赘述了。</p>\n<h3 id=\"Part2-用户反馈SDK导入\"><a href=\"#Part2-用户反馈SDK导入\" class=\"headerlink\" title=\"Part2 用户反馈SDK导入\"></a>Part2 用户反馈SDK导入</h3><p>我选择使用的是专业版2.0，SDK用的是Cocoapods安装方式，在Podfile添加阿里的私有源。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">source 'http:<span class=\"comment\">//repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecs.git'</span></div><div class=\"line\">source 'http:<span class=\"comment\">//repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecsMirror.git'</span></div><div class=\"line\">target '<span class=\"type\">YourTargetName'</span> <span class=\"keyword\">do</span></div><div class=\"line\">    pod '<span class=\"type\">YWFeedbackFMWK'</span>, '~&gt; <span class=\"number\">2.0</span>.<span class=\"number\">3.1</span>'</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>接着使用 <code>pod install</code> 安装出现了一个问题，就是我之前用的 Alamofire 等其他很多组件安装不了，出现需要更新的问题，我这里猜测 AliBCSpecsMirror 和 CocoaPods/Specs 有一些差异，弄了一会索性直接在上面再添加 CocoaPods 的仓库，<code>source &#39;https://github.com/CocoaPods/Specs.git&#39;</code>, 这样就能同时安装YWFeedbackFMWK和我之前的其他组件了，但是又会出现repo仓库有两份的warning，这个还没解决好，我考完试再找找解决方法。</p>\n<p>注意： Cocoapods集成方式不需要手动添加依赖系统库</p>\n<p>修改编译选项：<br>在Target-&gt;Linking-&gt;Other Linker Flags中添加-ObjC选项。</p>\n<p>iOS 10中隐私权限设置：<br>如果不做设置，可能会导致崩溃、审核不通过等情况。需要在info plist中增加字段：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSCameraUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>访问相机<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>访问相册<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Part3-初始化SDK，打开反馈页面\"><a href=\"#Part3-初始化SDK，打开反馈页面\" class=\"headerlink\" title=\"Part3 初始化SDK，打开反馈页面\"></a>Part3 初始化SDK，打开反馈页面</h3><ol>\n<li>在桥接头文件中加入：</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">import</span> &lt;YWFeedbackFMWK/YWFeedbackKit.h&gt;</div><div class=\"line\">#<span class=\"keyword\">import</span> &lt;YWFeedbackFMWK/YWFeedbackViewController.h&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>调用初始化方法：</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bcKit = <span class=\"type\">BCFeedbackKit</span>(appKey: <span class=\"string\">\"自己的appkey\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>这里需要将在阿里百川后台生成的安全图片添加进项目目录中</p>\n<ol>\n<li>设置业务方扩展的反馈数据：<br>相当于给反馈信息中加入反馈用户的个人信息，可设置任意字段，在创建反馈页面前设置，可在后台扩展信息中查看。</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bcKit.extInfo = [<span class=\"string\">\"username\"</span>:<span class=\"string\">\"自己app用户体系中的用户id\"</span>]</div></pre></td></tr></table></figure>\n<ol>\n<li>打开反馈页面：</li>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bcKit.makeFeedbackViewController(completionBlock: &#123; (feedbackVC, error) <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> vc = feedbackVC &#123;</div><div class=\"line\">    <span class=\"comment\">// 当用户关闭用户反馈，将调用该block进行dismiss或pop</span></div><div class=\"line\">        vc.closeBlock = &#123;(aParentController) <span class=\"keyword\">in</span></div><div class=\"line\">            aParentController?.navigationController?.popViewController(animated: <span class=\"literal\">false</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.isNavigationBarHidden = <span class=\"literal\">false</span>        </div><div class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.pushViewController(vc, animated: <span class=\"literal\">false</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样就完成了在app中加入反馈页面的添加。</p>\n<h3 id=\"Part4-阿里百川控制台配置反馈组件\"><a href=\"#Part4-阿里百川控制台配置反馈组件\" class=\"headerlink\" title=\"Part4 阿里百川控制台配置反馈组件\"></a>Part4 阿里百川控制台配置反馈组件</h3><p>在阿里百川用户反馈后台，可以在App内反馈中查看用户发送的反馈信息，还可以在Mobile客户端配置中自定义配置app中反馈页面的UI。这是我觉得的该产品的亮点所在，可以实时配置热门问题，减去了在app开发时需要考虑的动态获取生成热门问题的过程，而且整个appUI全都实时动态设置。具体操作大家用一下就很容易了解了。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>通过使用阿里百川用户反馈组件，我又一次看到了H5的用途。对于这类弱使用强度、高数据变更、低页面逻辑的页面，我觉得H5的用途大大体现了，虽然讲这样的一个反馈的原生页面以及一套后台处理系统没有什么技术实现上的困难点，但是对于大部分app开发来讲，还是需要消耗时间精力来做的，更重要的是这不是用户使用app的刚需，因此这种即插即用可服务端实时配置的H5反馈页面的出现恰到好处。</p>\n<h2 id=\"番外篇\"><a href=\"#番外篇\" class=\"headerlink\" title=\"番外篇\"></a>番外篇</h2><p>push 百川 feedbackVC 的时候，因此 NavigationBar 部分会黑一下再显示。很奇怪的是我如果在 push之前 navigationController 隐藏了 NavigationBar ，这个 feedbackVC 就没有了 NavigationBar。反馈页面其实就是一个 webView，因此我没有搞懂为什么 navigationController 的NavigationBar 显示与否会影响一个 webView 里面 H5 页面的 NavigationBar 显示。这个问题我得再研究研究。</p>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>所有的App都需要给用户一个反馈意见的功能，这样才能让用户使用的更好更方便。不想自己写这一套组件，因此调研了几款第三方的反馈组件。</p>\n<h3 id=\"Instabug\"><a href=\"#Instabug\" class=\"headerlink\" title=\"Instabug\"></a>Instabug</h3><p>九月份上架的师大助手App用的就是这个反馈组件，知乎日报用的也是这个，不管在App任何界面摇一摇就可以触发，Instabug会把当前界面进行截图并且支持用户编辑，非常方便好用的组件，这个用来反馈bug我觉得非常好用，但是作为反馈意见的话，感觉还是缺少一个入口。另外，Instabug采集Bug还是非常准确的。</p>\n<h3 id=\"LeanCloud\"><a href=\"#LeanCloud\" class=\"headerlink\" title=\"LeanCloud\"></a>LeanCloud</h3><p>LeanCloud的反馈组件号称两行代码接入，非常方便，它做成一个对话框的形式，客服与用户可以进行交流，并且用户的反馈可以及时发给开发人员的LeanCloud 手机客户端，实时性非常高。</p>\n<h3 id=\"阿里百川\"><a href=\"#阿里百川\" class=\"headerlink\" title=\"阿里百川\"></a>阿里百川</h3><p>一年之前开发的app用了阿里百川（阿里巴巴无限开放平台）的即时通讯功能，当时阿里巴巴刚把友盟这些公司收购，阿里巴巴无线开放平台还没有现在这么多功能，一年过去了，现在的功能已经非常多了。今天看用户反馈功能时，看到了他们的2.0版本的反馈组件，觉得这种加入了常见反馈问题这一页特别好，用户在反馈之前，可以先自行查看相似问题的解答。并且，相似问题的解答是可以实时在后台添加修改，这极大方便了用户。</p>\n<p>于是就暂定了使用阿里百川，于是进行了接入的技术验证。先看一下效果图：</p>\n<div id=\"tt\" style=\"display: inline-block;\"><br>       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_1.PNG\" width=\"50%\" height=\"25%\" /><br>       <img src=\"http://7xqj7o.com1.z0.glb.clouddn.com/blog/Blog_Baichuan_2.PNG\" width=\"50%\" height=\"25%\" /><br></div>\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Part1-阿里百川平台注册\"><a href=\"#Part1-阿里百川平台注册\" class=\"headerlink\" title=\"Part1 阿里百川平台注册\"></a>Part1 阿里百川平台注册</h3><p>这里按照官方的接入流程就可以很容易完成了，就不赘述了。</p>\n<h3 id=\"Part2-用户反馈SDK导入\"><a href=\"#Part2-用户反馈SDK导入\" class=\"headerlink\" title=\"Part2 用户反馈SDK导入\"></a>Part2 用户反馈SDK导入</h3><p>我选择使用的是专业版2.0，SDK用的是Cocoapods安装方式，在Podfile添加阿里的私有源。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">source 'http:<span class=\"comment\">//repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecs.git'</span></div><div class=\"line\">source 'http:<span class=\"comment\">//repo.baichuan-ios.taobao.com/baichuanSDK/AliBCSpecsMirror.git'</span></div><div class=\"line\">target '<span class=\"type\">YourTargetName'</span> <span class=\"keyword\">do</span></div><div class=\"line\">    pod '<span class=\"type\">YWFeedbackFMWK'</span>, '~&gt; <span class=\"number\">2.0</span>.<span class=\"number\">3.1</span>'</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>接着使用 <code>pod install</code> 安装出现了一个问题，就是我之前用的 Alamofire 等其他很多组件安装不了，出现需要更新的问题，我这里猜测 AliBCSpecsMirror 和 CocoaPods/Specs 有一些差异，弄了一会索性直接在上面再添加 CocoaPods 的仓库，<code>source &#39;https://github.com/CocoaPods/Specs.git&#39;</code>, 这样就能同时安装YWFeedbackFMWK和我之前的其他组件了，但是又会出现repo仓库有两份的warning，这个还没解决好，我考完试再找找解决方法。</p>\n<p>注意： Cocoapods集成方式不需要手动添加依赖系统库</p>\n<p>修改编译选项：<br>在Target-&gt;Linking-&gt;Other Linker Flags中添加-ObjC选项。</p>\n<p>iOS 10中隐私权限设置：<br>如果不做设置，可能会导致崩溃、审核不通过等情况。需要在info plist中增加字段：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSCameraUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>访问相机<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>访问相册<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Part3-初始化SDK，打开反馈页面\"><a href=\"#Part3-初始化SDK，打开反馈页面\" class=\"headerlink\" title=\"Part3 初始化SDK，打开反馈页面\"></a>Part3 初始化SDK，打开反馈页面</h3><ol>\n<li>在桥接头文件中加入：</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">import</span> &lt;YWFeedbackFMWK/YWFeedbackKit.h&gt;</div><div class=\"line\">#<span class=\"keyword\">import</span> &lt;YWFeedbackFMWK/YWFeedbackViewController.h&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>调用初始化方法：</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bcKit = <span class=\"type\">BCFeedbackKit</span>(appKey: <span class=\"string\">\"自己的appkey\"</span>)</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>这里需要将在阿里百川后台生成的安全图片添加进项目目录中</p>\n<ol>\n<li>设置业务方扩展的反馈数据：<br>相当于给反馈信息中加入反馈用户的个人信息，可设置任意字段，在创建反馈页面前设置，可在后台扩展信息中查看。</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bcKit.extInfo = [<span class=\"string\">\"username\"</span>:<span class=\"string\">\"自己app用户体系中的用户id\"</span>]</div></pre></td></tr></table></figure>\n<ol>\n<li>打开反馈页面：</li>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bcKit.makeFeedbackViewController(completionBlock: &#123; (feedbackVC, error) <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> vc = feedbackVC &#123;</div><div class=\"line\">    <span class=\"comment\">// 当用户关闭用户反馈，将调用该block进行dismiss或pop</span></div><div class=\"line\">        vc.closeBlock = &#123;(aParentController) <span class=\"keyword\">in</span></div><div class=\"line\">            aParentController?.navigationController?.popViewController(animated: <span class=\"literal\">false</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.isNavigationBarHidden = <span class=\"literal\">false</span>        </div><div class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.pushViewController(vc, animated: <span class=\"literal\">false</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样就完成了在app中加入反馈页面的添加。</p>\n<h3 id=\"Part4-阿里百川控制台配置反馈组件\"><a href=\"#Part4-阿里百川控制台配置反馈组件\" class=\"headerlink\" title=\"Part4 阿里百川控制台配置反馈组件\"></a>Part4 阿里百川控制台配置反馈组件</h3><p>在阿里百川用户反馈后台，可以在App内反馈中查看用户发送的反馈信息，还可以在Mobile客户端配置中自定义配置app中反馈页面的UI。这是我觉得的该产品的亮点所在，可以实时配置热门问题，减去了在app开发时需要考虑的动态获取生成热门问题的过程，而且整个appUI全都实时动态设置。具体操作大家用一下就很容易了解了。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>通过使用阿里百川用户反馈组件，我又一次看到了H5的用途。对于这类弱使用强度、高数据变更、低页面逻辑的页面，我觉得H5的用途大大体现了，虽然讲这样的一个反馈的原生页面以及一套后台处理系统没有什么技术实现上的困难点，但是对于大部分app开发来讲，还是需要消耗时间精力来做的，更重要的是这不是用户使用app的刚需，因此这种即插即用可服务端实时配置的H5反馈页面的出现恰到好处。</p>\n<h2 id=\"番外篇\"><a href=\"#番外篇\" class=\"headerlink\" title=\"番外篇\"></a>番外篇</h2><p>push 百川 feedbackVC 的时候，因此 NavigationBar 部分会黑一下再显示。很奇怪的是我如果在 push之前 navigationController 隐藏了 NavigationBar ，这个 feedbackVC 就没有了 NavigationBar。反馈页面其实就是一个 webView，因此我没有搞懂为什么 navigationController 的NavigationBar 显示与否会影响一个 webView 里面 H5 页面的 NavigationBar 显示。这个问题我得再研究研究。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1m7t9bw000khnh1vbnskp1a","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c2000qhnh152802z73"},{"post_id":"cj1m7t9bw000khnh1vbnskp1a","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9c3000uhnh10mqs0p1f"},{"post_id":"cj1m7t9bg0008hnh1077wmhu8","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c4000whnh1ttoptc0d"},{"post_id":"cj1m7t9bg0008hnh1077wmhu8","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9c4000zhnh1t6916y4b"},{"post_id":"cj1m7t9by000lhnh1i4uva8kn","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c50011hnh1auob3ipt"},{"post_id":"cj1m7t9by000lhnh1i4uva8kn","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9c50013hnh1p239jilx"},{"post_id":"cj1m7t9bz000ohnh1a01ns8fk","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c60015hnh1vvwin22p"},{"post_id":"cj1m7t9bz000ohnh1a01ns8fk","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9c70018hnh17ytov0ic"},{"post_id":"cj1m7t9b30001hnh1x84eihk2","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c7001bhnh15830z3wk"},{"post_id":"cj1m7t9b30001hnh1x84eihk2","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9c8001ehnh1ul5robp4"},{"post_id":"cj1m7t9bk000ahnh1vnavpzlz","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c8001ghnh1soqps38u"},{"post_id":"cj1m7t9bk000ahnh1vnavpzlz","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9c9001ihnh1vjmf92ha"},{"post_id":"cj1m7t9bn000chnh1ae5ay2on","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9c9001khnh15mf0czrd"},{"post_id":"cj1m7t9bn000chnh1ae5ay2on","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9ca001nhnh1f9lbir57"},{"post_id":"cj1m7t9b70003hnh1ae3ngjej","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9cb001phnh1bhz9yupx"},{"post_id":"cj1m7t9b70003hnh1ae3ngjej","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9cd001shnh1akbh3m1x"},{"post_id":"cj1m7t9bq000dhnh17yzx3ujp","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9cd001thnh1pc5lkj35"},{"post_id":"cj1m7t9bq000dhnh17yzx3ujp","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9ce001vhnh16mqrgqjf"},{"post_id":"cj1m7t9bs000ghnh1uqdgwp10","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9ce001whnh1woyw8efm"},{"post_id":"cj1m7t9bs000ghnh1uqdgwp10","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9cf001yhnh1q30j25xi"},{"post_id":"cj1m7t9be0007hnh1l7semzcl","category_id":"cj1m7t9bc0005hnh1arw1xpkk","_id":"cj1m7t9cf001zhnh17v3s9iff"},{"post_id":"cj1m7t9be0007hnh1l7semzcl","category_id":"cj1m7t9bv000ihnh1buy835kr","_id":"cj1m7t9cf0021hnh1yiawgsd1"},{"post_id":"cj1m7t9bt000hhnh1h8tzqj5e","category_id":"cj1m7t9c9001lhnh1dq5k21q1","_id":"cj1m7t9cf0023hnh1ie6cdshy"}],"PostTag":[{"post_id":"cj1m7t9b30001hnh1x84eihk2","tag_id":"cj1m7t9b90004hnh1qx6xr1xy","_id":"cj1m7t9c1000phnh1t1vjwg4h"},{"post_id":"cj1m7t9b30001hnh1x84eihk2","tag_id":"cj1m7t9bj0009hnh1lh38tbdp","_id":"cj1m7t9c2000shnh1izv2wwe1"},{"post_id":"cj1m7t9b30001hnh1x84eihk2","tag_id":"cj1m7t9br000fhnh1k7jldoq2","_id":"cj1m7t9c3000vhnh15lmcbwvl"},{"post_id":"cj1m7t9b30001hnh1x84eihk2","tag_id":"cj1m7t9bw000jhnh1sejgkocv","_id":"cj1m7t9c4000yhnh1lx84u5fo"},{"post_id":"cj1m7t9b70003hnh1ae3ngjej","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9c60016hnh10pajteef"},{"post_id":"cj1m7t9b70003hnh1ae3ngjej","tag_id":"cj1m7t9c3000thnh1fgoxered","_id":"cj1m7t9c70019hnh128d9n49j"},{"post_id":"cj1m7t9b70003hnh1ae3ngjej","tag_id":"cj1m7t9c40010hnh1hs5brx08","_id":"cj1m7t9c7001chnh18210infu"},{"post_id":"cj1m7t9be0007hnh1l7semzcl","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9ca001mhnh1drpqal0m"},{"post_id":"cj1m7t9be0007hnh1l7semzcl","tag_id":"cj1m7t9c7001ahnh1oeripnmw","_id":"cj1m7t9cb001ohnh1cyy7r908"},{"post_id":"cj1m7t9be0007hnh1l7semzcl","tag_id":"cj1m7t9c8001fhnh17op11jln","_id":"cj1m7t9cc001rhnh1somyrp9h"},{"post_id":"cj1m7t9bg0008hnh1077wmhu8","tag_id":"cj1m7t9c9001jhnh12godalrq","_id":"cj1m7t9cf0022hnh164n8ug0k"},{"post_id":"cj1m7t9bg0008hnh1077wmhu8","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9cf0024hnh168tre2dz"},{"post_id":"cj1m7t9bg0008hnh1077wmhu8","tag_id":"cj1m7t9ce001uhnh1g3gtx8dg","_id":"cj1m7t9cg0026hnh1gnlddo3m"},{"post_id":"cj1m7t9bg0008hnh1077wmhu8","tag_id":"cj1m7t9ce001xhnh151tdqc5l","_id":"cj1m7t9cg0027hnh1b665a090"},{"post_id":"cj1m7t9bk000ahnh1vnavpzlz","tag_id":"cj1m7t9c9001jhnh12godalrq","_id":"cj1m7t9cg002ahnh16fhhw830"},{"post_id":"cj1m7t9bk000ahnh1vnavpzlz","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9cg002bhnh1lanu88cr"},{"post_id":"cj1m7t9bk000ahnh1vnavpzlz","tag_id":"cj1m7t9cg0028hnh16bekhoe4","_id":"cj1m7t9ch002dhnh1pguhhncm"},{"post_id":"cj1m7t9bn000chnh1ae5ay2on","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9ch002ghnh1z9g0ziux"},{"post_id":"cj1m7t9bn000chnh1ae5ay2on","tag_id":"cj1m7t9c7001ahnh1oeripnmw","_id":"cj1m7t9ch002hhnh13xnp0jo8"},{"post_id":"cj1m7t9bn000chnh1ae5ay2on","tag_id":"cj1m7t9ch002ehnh1ggedp861","_id":"cj1m7t9ci002jhnh1tqgtvkla"},{"post_id":"cj1m7t9bq000dhnh17yzx3ujp","tag_id":"cj1m7t9c9001jhnh12godalrq","_id":"cj1m7t9ci002lhnh18mhwji1u"},{"post_id":"cj1m7t9bq000dhnh17yzx3ujp","tag_id":"cj1m7t9ch002ihnh1igt7xa0d","_id":"cj1m7t9ci002mhnh17cxiihvk"},{"post_id":"cj1m7t9bs000ghnh1uqdgwp10","tag_id":"cj1m7t9c9001jhnh12godalrq","_id":"cj1m7t9cj002rhnh1nm65st56"},{"post_id":"cj1m7t9bs000ghnh1uqdgwp10","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9cj002shnh1rg0isfs1"},{"post_id":"cj1m7t9bs000ghnh1uqdgwp10","tag_id":"cj1m7t9c7001ahnh1oeripnmw","_id":"cj1m7t9cj002uhnh1rb8w8q2m"},{"post_id":"cj1m7t9bs000ghnh1uqdgwp10","tag_id":"cj1m7t9ci002phnh1ly5wijls","_id":"cj1m7t9cj002vhnh1q3g5qpil"},{"post_id":"cj1m7t9bt000hhnh1h8tzqj5e","tag_id":"cj1m7t9cj002qhnh1slsx994s","_id":"cj1m7t9cj002xhnh1h9utetas"},{"post_id":"cj1m7t9bw000khnh1vbnskp1a","tag_id":"cj1m7t9cj002thnh1kwfoc3xn","_id":"cj1m7t9ck0030hnh1f49wqd9i"},{"post_id":"cj1m7t9bw000khnh1vbnskp1a","tag_id":"cj1m7t9cj002whnh1ll9e6osf","_id":"cj1m7t9ck0031hnh1rqorwca1"},{"post_id":"cj1m7t9bw000khnh1vbnskp1a","tag_id":"cj1m7t9cj002yhnh1pav8asa7","_id":"cj1m7t9ck0033hnh1scljgilw"},{"post_id":"cj1m7t9by000lhnh1i4uva8kn","tag_id":"cj1m7t9c9001jhnh12godalrq","_id":"cj1m7t9cm0037hnh1qasngorl"},{"post_id":"cj1m7t9by000lhnh1i4uva8kn","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9cm0038hnh1p8vbvcg0"},{"post_id":"cj1m7t9by000lhnh1i4uva8kn","tag_id":"cj1m7t9ck0034hnh1qt97097i","_id":"cj1m7t9cm003ahnh16azoefhz"},{"post_id":"cj1m7t9by000lhnh1i4uva8kn","tag_id":"cj1m7t9cj002whnh1ll9e6osf","_id":"cj1m7t9cn003bhnh1yb3mbube"},{"post_id":"cj1m7t9bz000ohnh1a01ns8fk","tag_id":"cj1m7t9bz000nhnh13veeguxm","_id":"cj1m7t9cn003dhnh19wsaqkb4"},{"post_id":"cj1m7t9bz000ohnh1a01ns8fk","tag_id":"cj1m7t9cj002whnh1ll9e6osf","_id":"cj1m7t9cn003ehnh1ikwd6pbv"},{"post_id":"cj1m7t9bz000ohnh1a01ns8fk","tag_id":"cj1m7t9cn003chnh1kfz5vqjm","_id":"cj1m7t9cn003fhnh1bpvuvu15"}],"Tag":[{"name":"Swift 3.x","_id":"cj1m7t9b90004hnh1qx6xr1xy"},{"name":"Alamofire 4.x","_id":"cj1m7t9bj0009hnh1lh38tbdp"},{"name":"Kanna 2.x","_id":"cj1m7t9br000fhnh1k7jldoq2"},{"name":"Eureka 2.x","_id":"cj1m7t9bw000jhnh1sejgkocv"},{"name":"Swift","_id":"cj1m7t9bz000nhnh13veeguxm"},{"name":"Xib","_id":"cj1m7t9c3000thnh1fgoxered"},{"name":"自定义View","_id":"cj1m7t9c40010hnh1hs5brx08"},{"name":"Alamofire","_id":"cj1m7t9c7001ahnh1oeripnmw"},{"name":"模拟登陆","_id":"cj1m7t9c8001fhnh17op11jln"},{"name":"iOS","_id":"cj1m7t9c9001jhnh12godalrq"},{"name":"UIWebView","_id":"cj1m7t9ce001uhnh1g3gtx8dg"},{"name":"二维码扫描","_id":"cj1m7t9ce001xhnh151tdqc5l"},{"name":"APNS推送","_id":"cj1m7t9cg0028hnh16bekhoe4"},{"name":"Today-Extension","_id":"cj1m7t9ch002ehnh1ggedp861"},{"name":"UITextView","_id":"cj1m7t9ch002ihnh1igt7xa0d"},{"name":"GB2312编码","_id":"cj1m7t9ci002phnh1ly5wijls"},{"name":"总结","_id":"cj1m7t9cj002qhnh1slsx994s"},{"name":"Android","_id":"cj1m7t9cj002thnh1kwfoc3xn"},{"name":"阿里百川","_id":"cj1m7t9cj002whnh1ll9e6osf"},{"name":"友盟推送","_id":"cj1m7t9cj002yhnh1pav8asa7"},{"name":"即时通讯","_id":"cj1m7t9ck0034hnh1qt97097i"},{"name":"用户反馈","_id":"cj1m7t9cn003chnh1kfz5vqjm"}]}}